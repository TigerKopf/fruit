==================================================
DATEINAME: src/assets/style/admin.css
--------------------------------------------------
/* Admin Panel spezifische Stile */
.admin-container {
    display: flex;
    flex: 1;
    width: 100%;
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 var(--spacing-md);
    box-sizing: border-box;
    margin-top: calc(var(--header-height) + var(--spacing-lg));
    margin-bottom: var(--spacing-lg);

    background: var(--color-background-white);
    border-radius: var(--border-radius-md);
    box-shadow: 0 4px 10px var(--color-shadow-light);
    overflow: hidden;
}

.admin-sidebar {
    width: 200px;
    background-color: #343a40;
    color: #fff;
    padding: var(--spacing-lg);
    flex-shrink: 0;
}
.admin-sidebar h2 {
    color: #fff;
    text-align: center;
    margin-bottom: var(--spacing-xl);
    font-size: 1.6em;
    font-weight: 600;
}
.admin-sidebar ul {
    list-style: none;
    padding: 0;
    margin: 0;
}
.admin-sidebar li {
    margin-bottom: var(--spacing-sm);
}
.admin-sidebar a {
    color: #adb5bd;
    text-decoration: none;
    display: block;
    padding: var(--spacing-sm) var(--spacing-md);
    border-radius: var(--border-radius-sm);
    transition: background-color 0.2s ease, color 0.2s ease;
    font-weight: 500;
}
.admin-sidebar a:hover, .admin-sidebar a.active {
    background-color: #495057;
    color: #fff;
}
.admin-content {
    flex-grow: 1;
    padding: var(--spacing-xl);
}
.admin-content h1 {
    color: var(--color-text-dark);
    margin-bottom: var(--spacing-lg);
    border-bottom: 1px solid var(--color-border);
    padding-bottom: var(--spacing-sm);
    font-size: 2.2em;
    font-weight: 700;
}
.admin-content h3 {
    color: var(--color-text-dark);
    margin-top: var(--spacing-xl);
    margin-bottom: var(--spacing-md);
    font-size: 1.6em;
    font-weight: 600;
}
.admin-content h4 {
    margin-top: var(--spacing-md);
    margin-bottom: var(--spacing-sm);
    color: var(--color-text-dark);
    font-size: 1.2em;
    font-weight: 500;
}
.admin-content table {
    width: 100%;
    border-collapse: collapse;
    margin-bottom: var(--spacing-md);
    box-shadow: 0 2px 5px var(--color-shadow-light);
    border-radius: var(--border-radius-sm);
    overflow: hidden;
}
.admin-content th, .admin-content td {
    border: 1px solid var(--color-border);
    padding: var(--spacing-sm);
    text-align: left;
    font-size: 0.9em;
}
.admin-content th {
    background-color: #F0F4F8;
    font-weight: 600;
    color: var(--color-text-dark);
}
.admin-content td {
    color: var(--color-text-medium);
}
.admin-content tr:nth-child(even) {
    background-color: #FDFEFE;
}
.admin-content .action-buttons {
    margin-top: var(--spacing-md);
    margin-bottom: var(--spacing-md);
}
.admin-content .action-buttons a, .admin-content .action-buttons button {
    display: inline-block;
    padding: var(--spacing-xs) var(--spacing-sm);
    margin-right: var(--spacing-xs);
    border: none;
    border-radius: var(--border-radius-sm);
    cursor: pointer;
    text-decoration: none;
    font-size: 0.85em;
    font-weight: 500;
    transition: background-color 0.2s ease, transform 0.1s ease;
}
.admin-content .action-buttons .edit-btn { background-color: var(--color-primary); color: white; }
.admin-content .action-buttons .edit-btn:hover { background-color: #2F5AA9; transform: translateY(-1px); }
.admin-content .action-buttons .delete-btn { background-color: #EF4444; color: white; }
.admin-content .action-buttons .delete-btn:hover { background-color: #DC2626; transform: translateY(-1px); }
.admin-content .action-buttons .add-btn { background-color: var(--color-secondary); color: white; }
.admin-content .action-buttons .add-btn:hover { background-color: #00A656; transform: translateY(-1px); }

.admin-form-container {
    background-color: #FDFEFE;
    padding: var(--spacing-lg);
    border-radius: var(--border-radius-md);
    margin-top: var(--spacing-lg);
    border: 1px solid var(--color-border);
    box-shadow: 0 2px 8px var(--color-shadow-light);
}
.admin-form-container label {
    display: block;
    margin-bottom: var(--spacing-xs);
    font-weight: 500;
    color: var(--color-text-dark);
    font-size: 0.95em;
}
.admin-form-container input[type="text"],
.admin-form-container input[type="number"],
.admin-form-container input[type="email"],
.admin-form-container textarea,
.admin-form-container select,
.admin-form-container input[type="datetime-local"] {
    width: 100%;
    padding: var(--spacing-sm);
    margin-bottom: var(--spacing-md);
    border: 1px solid var(--color-border);
    border-radius: var(--border-radius-sm);
    font-size: 1em;
    box-sizing: border-box;
    color: var(--color-text-dark);
    transition: border-color 0.2s ease, box-shadow 0.2s ease;
}
.admin-form-container input:focus,
.admin-form-container select:focus,
.admin-form-container textarea:focus {
    outline: none;
    border-color: var(--color-primary);
    box-shadow: 0 0 0 3px rgba(52, 104, 192, 0.2);
}
.admin-form-container button[type="submit"] {
    background-color: var(--color-primary);
    color: white;
    padding: var(--spacing-sm) var(--spacing-md);
    border: none;
    border-radius: var(--border-radius-sm);
    cursor: pointer;
    font-size: 1em;
    font-weight: 500;
    transition: background-color 0.2s ease, transform 0.1s ease;
}
.admin-form-container button[type="submit"]:hover {
    background-color: #2F5AA9;
    transform: translateY(-1px);
}

/* Dashboard Stat Cards */
.dashboard-stats {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: var(--spacing-md);
    margin-bottom: var(--spacing-xl);
}
.stat-card {
    background-color: var(--color-background-white);
    padding: var(--spacing-md);
    border-radius: var(--border-radius-md);
    text-align: center;
    box-shadow: 0 2px 8px var(--color-shadow-light);
    border: 1px solid var(--color-border);
    transition: transform 0.2s ease, box-shadow 0.2s ease;
}
.stat-card:hover {
    transform: translateY(-3px);
    box-shadow: 0 4px 12px var(--color-shadow-medium);
}
.stat-card h3 {
    margin: 0 0 var(--spacing-sm) 0;
    color: var(--color-text-medium);
    font-size: 1.1em;
    font-weight: 500;
}
.stat-card p {
    font-size: 2.2em;
    font-weight: 700;
    color: var(--color-primary);
    margin: 0;
}
.stat-card.income-positive p { color: var(--color-secondary); }
.stat-card.income-negative p { color: #EF4444; }


/* Dashboard Chart Container */
.chart-container {
    background-color: var(--color-background-white);
    padding: var(--spacing-md);
    border-radius: var(--border-radius-md);
    box-shadow: 0 2px 8px var(--color-shadow-light);
    border: 1px solid var(--color-border);
    margin-top: var(--spacing-xl);
    min-height: 300px;
    display: flex;
    justify-content: center;
    align-items: center;
    color: var(--color-text-medium);
    font-size: 1.1em;
}
.chart-container canvas {
    max-width: 100%;
    height: auto;
}

==================================================
DATEINAME: src/assets/style/alerts.css
--------------------------------------------------
/* General Alerts */
.alert {
    padding: var(--spacing-sm) var(--spacing-md);
    margin-top: var(--spacing-sm);
    margin-bottom: var(--spacing-md);
    border-radius: var(--border-radius-sm);
    font-size: 0.95em;
    display: flex;
    align-items: center;
    gap: var(--spacing-xs);
}
.alert.success {
    background-color: #D4EDDA;
    color: #155724;
    border-color: #C3E6CB;
}
.alert.error {
    background-color: #F8D7DA;
    color: #721C24;
    border-color: #F5C6CB;
}

##################################################
INFO: 'src/assets/style/archive__styles.css' wurde aufgrund der Ausschlussliste übersprungen.
##################################################

==================================================
DATEINAME: src/assets/style/base.css
--------------------------------------------------
/* Grundlegende Stile & Sticky Footer Layout */
html, body {
    height: 100%;
    margin: 0;
    padding: 0;
    display: flex;
    flex-direction: column;
    font-family: var(--font-family-base);
    font-size: var(--font-size-base);
    background-color: var(--color-background-light);
    color: var(--color-text-dark);
    line-height: var(--line-height-base);
    -webkit-font-smoothing: antialiased; /* Für glattere Schrift auf Webkit-Browsern */
    -moz-osx-font-smoothing: grayscale; /* Für glattere Schrift auf Firefox */
}

==================================================
DATEINAME: src/assets/style/cart.css
--------------------------------------------------
/* Warenkorb-Seitenleiste (rechts, sticky) für Desktop - ÄUSSERER CONTAINER TRANSPARENT */
.cart-sidebar {
    position: sticky;
    top: calc(var(--header-height) + var(--spacing-lg)); /* Unter dem Header + Abstand */
    align-self: flex-start;
    flex-shrink: 0;
    width: 320px; /* Etwas breiter für bessere Übersicht */
    background: transparent; /* Geändert: Hintergrund des Wrappers transparent */
    border: none; /* Geändert: Kein Rahmen */
    border-radius: 0; /* Geändert: Keine Abrundung */
    padding: 0; /* Geändert: Padding entfernt, wird auf innere Elemente verschoben */
    box-shadow: none; /* Geändert: Kein Schatten */
    max-height: calc(var(--cart-max-height-ratio) * 100vh - var(--spacing-xl)); /* Max-Höhe für Desktop */
    overflow-y: hidden; /* Hauptcontainer scrollt nicht, scrollt nur der innere wrapper */
    z-index: 10;
    display: flex;
    flex-direction: column;
    gap: var(--spacing-md); /* Abstand zwischen den Warenkorb-Karten auf Desktop */
}

/* Titel für Desktop-Warenkorb - JETZT EINE SEPARATE KARTE */
.cart-header-desktop {
    display: block;
    background-color: var(--color-background-white); /* Geändert: Weißer Hintergrund */
    border: 1px solid var(--color-border); /* Geändert: Rahmen */
    border-radius: var(--border-radius-md); /* Geändert: Abgerundete Ecken */
    padding: var(--spacing-md); /* Geändert: Padding */
    box-shadow: 0 2px 5px var(--color-shadow-light); /* Geändert: Dezenter Schatten */
    margin-bottom: 0; /* Geändert: Kein externer Bodenabstand, da Gap im Sidebar-Container */
}
.cart-header-desktop h2 {
    font-size: 1.8em;
    margin-top: 0;
    margin-bottom: 0; /* Geändert: Padding ist im Elternelement */
    color: var(--color-text-dark);
    text-align: left; /* Geändert: Standardmäßig linksbündig auf Desktop */
    font-weight: 600;
}

/* Mobiler Warenkorb Header standardmäßig verstecken, auf Mobile anzeigen */
.cart-header-mobile {
    display: none;
    background-color: var(--color-primary); /* Blauer Hintergrund für mobile Ansicht */
    color: white; /* Weißer Text */
    border-radius: var(--border-radius-md) var(--border-radius-md) 0 0;
    cursor: pointer;
    font-weight: 600;
    font-size: 1.1em;
    position: relative;
    z-index: 101;
    justify-content: space-between;
    align-items: center;
    padding: var(--spacing-sm) var(--spacing-md);
}

.cart-sidebar.is-expanded .cart-header-mobile {
    background-color: var(--color-primary); /* Bleibt blau, wenn ausgeklappt */
}

.cart-toggle-button {
    background: none;
    border: none;
    color: white; /* Passend zum blauen Hintergrund */
    font-size: 1.2em;
    cursor: pointer;
    padding: 0 var(--spacing-xs);
    line-height: 1;
    display: flex;
    align-items: center;
    gap: var(--spacing-xs);
    margin-left: var(--spacing-sm);
}

/* Warenkorb Inhalt (klappt auf Mobile ein/aus) - INHALTSBEREICH ALS SEPARATE KARTE */
.cart-body-content {
    background-color: var(--color-background-white); /* Geändert: Weißer Hintergrund für den Inhalt */
    border: 1px solid var(--color-border); /* Geändert: Rahmen */
    border-radius: var(--border-radius-md); /* Geändert: Abgerundete Ecken */
    box-shadow: 0 2px 8px var(--color-shadow-light); /* Geändert: Dezenter Schatten */
    padding: var(--spacing-md); /* Geändert: Padding hier angewendet */
    flex-grow: 1;
    display: flex; /* Für interne Flex-Anordnung */
    flex-direction: column;
    /* max-height für Mobile wird in responsive.css überschrieben */
    overflow-y: hidden; /* Sicherstellen, dass der body-content selbst nicht scrollt, sondern der Wrapper darin */
}

/* Restliche Stile bleiben unverändert */
#cart-items {
    list-style: none;
    padding: 0;
    margin: 0;
}

.cart-item {
    display: flex;
    align-items: center;
    justify-content: space-between;
    margin-bottom: var(--spacing-md);
    padding-bottom: var(--spacing-md);
    border-bottom: 1px solid var(--color-border);
}

.cart-item:last-child {
    border-bottom: none;
    margin-bottom: 0;
    padding-bottom: 0;
}

.cart-item-image {
    width: 50px;
    height: 50px;
    object-fit: cover;
    border-radius: var(--border-radius-sm);
    margin-right: var(--spacing-sm);
    flex-shrink: 0;
    mask-image: radial-gradient(circle at center, black 70%, transparent 100%);
    -webkit-mask-image: radial-gradient(circle at center, black 70%, transparent 100%);
    background-color: #FDFEFE;
}

.cart-item-info {
    flex-grow: 1;
    margin-right: var(--spacing-sm);
}

.cart-item-info h4 {
    margin: 0;
    font-size: 1.05em;
    color: var(--color-text-dark);
    font-weight: 500;
}

.cart-item-info p {
    margin: 4px 0 0;
    font-size: 0.9em;
    color: var(--color-accent);
    font-weight: 600;
}

.cart-item-controls {
    display: flex;
    align-items: center;
    gap: var(--spacing-xs);
    flex-shrink: 0;
}

.cart-item-controls input[type="number"] {
    width: 40px; /* Angepasst: Macht das Eingabefeld kleiner */
    padding: var(--spacing-xs) 0; /* Minimales vertikales Padding, kein horizontales */
    border: 1px solid var(--color-border);
    border-radius: var(--border-radius-sm);
    text-align: center;
    font-size: 0.9em; /* Angepasst: Kleinere Schrift im Input-Feld */
    color: var(--color-text-dark);
    -moz-appearance: textfield;
}

.cart-item-controls input[type="number"]::-webkit-outer-spin-button,
.cart-item-controls input[type="number"]::-webkit-inner-spin-button {
    -webkit-appearance: none;
    margin: 0;
}

.cart-item-controls .remove-item-btn {
    background: none;
    border: none;
    color: var(--color-text-light);
    cursor: pointer;
    font-size: 1.4em;
    padding: 0 var(--spacing-xs);
    line-height: 1;
    transition: color 0.2s ease, transform 0.2s ease;
}

.cart-item-controls .remove-item-btn:hover {
    color: var(--color-accent);
    transform: scale(1.1);
}

/* NEU: Wrapper für scrollbare Items - Übernimmt Scroll-Funktion und Maske */
.cart-items-scrollable-wrapper {
    flex-grow: 1; /* Nimmt den verfügbaren Platz ein */
    overflow-y: auto; /* Nur dieser Bereich scrollt */
    padding-right: var(--spacing-xs); /* Platz für Scrollbalken */
    margin-right: calc(-1 * var(--spacing-xs)); /* Kompensiert padding-right */
    mask-image: linear-gradient(to bottom, black 80%, transparent 100%); /* Verlauf am unteren Ende */
    -webkit-mask-image: linear-gradient(to bottom, black 80%, transparent 100%);
}

#cart-total-container {
    border-top: 1px solid var(--color-border);
    padding-top: var(--spacing-md);
    margin-top: var(--spacing-md);
    text-align: right;
    display: flex;
    justify-content: space-between; /* Sorgt dafür, dass "Gesamt" links und der Betrag rechts ausgerichtet sind */
    align-items: baseline;
    flex-shrink: 0;
}

#cart-total-container span {
    font-size: 1.1em; /* Angepasst: Leicht kleinere Schriftgröße für das "Gesamt"-Label */
    font-weight: 500;
    color: var(--color-text-dark);
}

#cart-total {
    font-size: 1.8em; /* Behält große und prominente Schrift bei */
    font-weight: 700;
    color: var(--color-accent);
    margin-left: var(--spacing-sm); /* Kleiner Linker Rand, um vom Label zu trennen */
}

.checkout-button {
    width: 100%;
    background-color: var(--color-secondary);
    color: var(--color-background-white);
    border: none;
    padding: var(--spacing-sm) var(--spacing-md);
    border-radius: var(--border-radius-md);
    cursor: pointer;
    font-size: 1.05em;
    font-weight: 600;
    margin-top: var(--spacing-md);
    transition: background-color 0.2s ease, box-shadow 0.2s ease, transform 0.2s ease;
    flex-shrink: 0;
}

.checkout-button:hover {
    background-color: #00A656;
    box-shadow: 0 4px 10px var(--color-shadow-light);
    transform: translateY(-2px);
}

==================================================
DATEINAME: src/assets/style/footer.css
--------------------------------------------------
/* Footer-Bereich (schwebender Block) */
.main-footer {
    padding: var(--spacing-lg) 0 0;
    width: 100%;
    display: flex;
    justify-content: center;
    background-color: var(--color-background-light);
    margin-top: var(--spacing-xl);
    position: relative;
    z-index: 10;
}

.footer-content-wrapper {
    background-color: var(--color-background-white);
    max-width: var(--content-max-width); /* GEÄNDERT: Konsistent mit Main-Content */
    width: 100%;
    margin: 0 auto var(--spacing-md) auto;
    border-radius: var(--border-radius-md);
    box-shadow: 0 4px 15px var(--color-shadow-light);
    padding: var(--spacing-xl);
    box-sizing: border-box; /* NEU: Stellt sicher, dass max-width padding beinhaltet */
    color: var(--color-text-dark);
    font-family: var(--font-family-base);
    /* GEÄNDERT: Verschiebung um 20px nach links entfernt */
    /* transform: translateX(-20px); */
}

/* Inhaltliche Gliederung des Footers mit CSS Grid für Symmetrie */
.footer-container {
    display: grid;
    grid-template-columns: 1.5fr repeat(3, 1fr);
    gap: var(--spacing-lg);
    padding-bottom: var(--spacing-md);
    border-bottom: 1px solid var(--color-border);
    margin-bottom: var(--spacing-md);
}

.footer-section {
    text-align: left;
}

.footer-section h3 {
    color: var(--color-text-dark);
    margin-bottom: var(--spacing-sm);
    font-size: 1.15em;
    font-weight: 600;
}

.footer-section p {
    margin-bottom: var(--spacing-xs);
    line-height: 1.5;
    font-size: 0.9em;
    font-weight: 400;
    color: var(--color-text-medium);
}

.footer-section ul {
    list-style: none;
    padding: 0;
    margin: 0;
}

.footer-section ul li {
    margin-bottom: var(--spacing-xs);
}

.footer-section ul li a {
    color: var(--color-text-medium);
    text-decoration: none;
    font-size: 0.9em;
    transition: color 0.3s ease;
    font-weight: 400;
}

.footer-section ul li a:hover {
    color: var(--color-primary);
}

/* Social Media Icons im Footer */
.social-icons {
    display: flex;
    gap: var(--spacing-sm);
    margin-top: var(--spacing-md);
    justify-content: flex-start;
}

.social-icons img {
    width: 28px;
    height: 28px;
    filter: grayscale(80%) brightness(120%);
    transition: filter 0.3s ease, transform 0.2s ease;
}

.social-icons a:hover img {
    filter: none;
    transform: translateY(-2px) scale(1.05);
}

/* Unterer Bereich des Footers (Copyright, etc.) */
.footer-bottom {
    text-align: center;
    color: var(--color-text-light);
    font-size: 0.8em;
    font-weight: 400;
    padding-top: var(--spacing-sm);
}

==================================================
DATEINAME: src/assets/style/header.css
--------------------------------------------------
/* Header-Bereich (Sticky Navigation Bar) */
header {
    width: 100%;
    height: var(--header-height);
    padding: 0 var(--spacing-md);
    background-color: transparent; /* Standardmäßig transparent */
    display: flex;
    justify-content: center;
    align-items: center;
    box-shadow: none; /* Initial kein Schatten */
    position: fixed;
    top: 0;
    left: 0;
    z-index: 1000;
    transition: box-shadow 0.3s ease, background-color 0.3s ease; /* Übergang für Hintergrundfarbe hinzugefügt */
    box-sizing: border-box;
}

header.header-scrolled {
    background-color: transparent; /* GEÄNDERT: Kein Hintergrund beim Scrollen */
    box-shadow: none; /* GEÄNDERT: Kein Schatten beim Scrollen */
}

.google-search-like-nav {
    display: flex;
    justify-content: space-between;
    align-items: center;
    width: 100%;
    max-width: var(--content-max-width); /* Angepasst an die Inhaltsbreite */
    background-color: var(--color-background-white);
    border: 1px solid var(--color-border);
    border-radius: var(--border-radius-lg);
    padding: var(--spacing-sm) var(--spacing-md);
    box-shadow: 0 2px 8px var(--color-shadow-light);
    height: 48px;
    transition: border-color 0.3s ease, box-shadow 0.3s ease;
}

header.header-scrolled .google-search-like-nav {
    border-color: var(--color-border);
    box-shadow: 0 1px 5px var(--color-shadow-light);
}

.google-header-wrapper {
    display: flex;
    justify-content: space-between;
    align-items: center;
    width: 100%;
    max-width: var(--content-max-width); /* Angepasst an die Inhaltsbreite */
    transform: translateX(-20px); /* Verschiebung um 20px nach links */
}

.logo {
    font-size: 1.8em;
    font-weight: 700;
    color: var(--color-primary);
    text-decoration: none;
    margin-right: var(--spacing-lg);
}

.nav-options {
    list-style: none;
    margin: 0;
    padding: 0;
    display: flex;
    gap: var(--spacing-lg);
}

.nav-options li a {
    text-decoration: none;
    color: var(--color-text-medium);
    font-size: var(--font-size-base);
    padding: var(--spacing-xs) 0;
    transition: color 0.3s ease;
    font-weight: 500;
}

.nav-options li a:hover,
.nav-options li a.active {
    color: var(--color-primary);
    position: relative;
}

.nav-options li a.active::after {
    content: '';
    position: absolute;
    bottom: -5px;
    left: 0;
    width: 100%;
    height: 2px;
    background-color: var(--color-primary);
    border-radius: 2px;
}

.cart-button {
    background-color: var(--color-primary);
    color: var(--color-background-white);
    text-decoration: none;
    padding: var(--spacing-sm) var(--spacing-md);
    border-radius: var(--border-radius-lg);
    font-size: 0.9em;
    font-weight: 600;
    border: none;
    cursor: pointer;
    transition: background-color 0.3s ease, box-shadow 0.3s ease, transform 0.2s ease;
    white-space: nowrap;
    display: inline-flex;
    align-items: center;
    gap: var(--spacing-xs);
}

.cart-button:hover {
    background-color: #2F5AA9;
    box-shadow: 0 4px 10px var(--color-shadow-light);
    transform: translateY(-2px);
}

==================================================
DATEINAME: src/assets/style/home.css
--------------------------------------------------
/* src/assets/style/home.css */

/* Allgemeine Stile für Home-Sektionen */
.home-section {
    padding: var(--spacing-xl) 0;
    margin-bottom: var(--spacing-lg);
    opacity: 0; /* Standardmäßig unsichtbar für Animation */
    transform: translateY(20px); /* Leicht nach unten verschoben für Slide-Up */
    transition: opacity 0.8s ease-out, transform 0.8s ease-out;
    position: relative;
    z-index: 1; /* Sicherstellen, dass Inhalte über Hintergrund liegen */
}

.home-section.is-visible {
    opacity: 1;
    transform: translateY(0);
}

.home-section:nth-of-type(even) {
    background-color: var(--color-background-light); /* Abwechselnder Hintergrund */
}

.home-section-content {
    max-width: var(--content-max-width);
    margin: 0 auto;
    padding: 0 var(--spacing-md);
    box-sizing: border-box;
    text-align: center;
}

.home-section h2 {
    font-size: 2.8em;
    color: var(--color-primary);
    margin-bottom: var(--spacing-lg);
    font-weight: 700;
    text-shadow: 1px 1px 2px var(--color-shadow-light);
}

.home-section h3 {
    font-size: 2em;
    color: var(--color-text-dark);
    margin-bottom: var(--spacing-md);
    font-weight: 600;
}

.home-section p {
    font-size: 1.1em;
    color: var(--color-text-medium);
    line-height: var(--line-height-base);
    max-width: 800px;
    margin: 0 auto var(--spacing-md) auto;
}

/* Hero Sektion */
.hero-section {
    background: url('/-hero-banner.jpeg') no-repeat center bottom; /* Hintergrundbild, Fokus auf den unteren Bereich */
    background-size: 130%; /* Leicht reingezoomt */
    background-attachment: fixed; /* Parallax-Effekt: Bild bleibt beim Scrollen "oben" */
    position: relative; /* Wichtig für Z-Index und ::before */
    display: flex;
    align-items: center;
    justify-content: center;
    min-height: 100vh; /* GEÄNDERT: explizit 100vh für volle Viewport-Höhe */
    /* Padding für den Inhalt, damit er nicht unter dem Header verschwindet */
    padding-top: 0; /* GEÄNDERT: padding-top hier auf 0 setzen, da es der erste Inhalt ist */
    padding-bottom: var(--spacing-xl);
    margin-bottom: 0;
    overflow: hidden; /* Verhindert sichtbaren Overflow des gezoomten Bildes */
    width: auto; /* Nimmt die gesamte verfügbare Breite des Bodies ein */
    flex-shrink: 0; /* NEU: Verhindert, dass der Hero-Bereich schrumpft */

    /* NEU: Übergang zum Inhalt darunter (Linear-Gradient Maske) */
    mask-image: linear-gradient(to bottom, black 90%, transparent 100%);
    -webkit-mask-image: linear-gradient(to bottom, black 90%, transparent 100%);
}

/* Semi-transparenter Overlay für bessere Lesbarkeit der Schrift */
.hero-section::before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.25); /* Dunkler, leicht transparenter Schleier */
    z-index: 1;
}

.hero-content {
    max-width: 900px;
    text-align: center;
    position: relative; /* Stellt sicher, dass der Inhalt über dem Overlay liegt */
    z-index: 2;
    color: var(--color-background-white); /* Textfarbe */
    /* Internes Padding für den Inhalt im Vollbild-Banner, um ihn auf kleineren Bildschirmen einzurücken */
    padding: 0 var(--spacing-md);
}

.hero-content h1 {
    font-size: 4.5em; /* Etwas größere Schrift für den Vollbildmodus */
    margin-bottom: var(--spacing-md);
    font-weight: 800;
    line-height: 1.1;
    text-shadow: 0 4px 10px rgba(0, 0, 0, 0.8); /* Stärkerer Textschatten für bessere Lesbarkeit */
    animation: fadeInUp 1s ease-out forwards 0.5s;
    opacity: 0;
    transform: translateY(30px);
}

.hero-content p {
    font-size: 1.6em; /* Etwas größere Schrift */
    margin-bottom: var(--spacing-lg);
    font-weight: 400;
    text-shadow: 0 2px 8px rgba(0, 0, 0, 0.7); /* Stärkerer Textschatten */
    animation: fadeInUp 1s ease-out forwards 0.8s;
    opacity: 0;
    transform: translateY(30px);
}

.hero-button {
    display: inline-block;
    background-color: var(--color-secondary);
    color: var(--color-background-white);
    padding: var(--spacing-sm) var(--spacing-lg);
    border-radius: var(--border-radius-lg);
    text-decoration: none;
    font-size: 1.2em;
    font-weight: 600;
    transition: background-color 0.3s ease, transform 0.2s ease, box-shadow 0.3s ease;
    animation: fadeInUp 1s ease-out forwards 1.1s;
    opacity: 0;
    transform: translateY(30px);
    box-shadow: 0 6px 20px rgba(0, 0, 0, 0.4); /* Stärkerer Schatten für Pop-Effekt */
}

.hero-button:hover {
    background-color: #00A656;
    transform: translateY(-3px) scale(1.02);
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.5); /* Noch stärkerer Schatten beim Hover */
}

/* Stil für den Missions-Hinweis */
.mission-highlight {
    color: var(--color-secondary); /* Ein auffälliges Grün */
    font-weight: 700;
    font-size: 1.2em;
    margin-top: var(--spacing-md);
    display: block; /* Macht es zu einem Blockelement, für mehr Platz */
    text-shadow: 0 1px 3px rgba(0,0,0,0.1);
}

.hero-content .mission-highlight {
    color: var(--color-accent); /* Im Hero-Banner eine kräftigere Akzentfarbe für besseren Kontrast */
    text-shadow: 0 2px 8px rgba(0, 0, 0, 0.8); /* Sehr starker Textschatten */
    animation: fadeInUp 1s ease-out forwards 1.4s; /* Später als Button einblenden */
    opacity: 0;
    transform: translateY(30px);
    font-size: 1.6em; /* Im Hero-Banner etwas größer und prominenter */
}


/* Feature Sektion */
.features-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
    gap: var(--spacing-lg);
    margin-top: var(--spacing-xl);
}

.feature-item {
    background-color: var(--color-background-white);
    padding: var(--spacing-md);
    border-radius: var(--border-radius-md);
    box-shadow: 0 4px 12px var(--color-shadow-light);
    transition: transform 0.3s ease, box-shadow 0.3s ease;
    text-align: center;
    border: 1px solid var(--color-border);
}

.feature-item:hover {
    transform: translateY(-5px);
    box-shadow: 0 8px 20px var(--color-shadow-medium);
}

.feature-item img {
    width: 80px;
    height: 80px;
    object-fit: contain;
    margin-bottom: var(--spacing-md);
    filter: drop-shadow(0 4px 8px rgba(0,0,0,0.1));
}

.feature-item h3 {
    color: var(--color-primary);
    font-size: 1.5em;
    margin-bottom: var(--spacing-sm);
}

.feature-item p {
    font-size: 0.95em;
    color: var(--color-text-medium);
}

/* Testimonial Sektion */
.testimonials-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: var(--spacing-lg);
    margin-top: var(--spacing-xl);
}

.testimonial-card {
    background-color: var(--color-background-white);
    padding: var(--spacing-lg);
    border-radius: var(--border-radius-md);
    box-shadow: 0 4px 12px var(--color-shadow-light);
    text-align: left;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    min-height: 200px;
    border: 1px solid var(--color-border);
    transition: transform 0.3s ease, box-shadow 0.3s ease;
}

.testimonial-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 8px 20px var(--color-shadow-medium);
}

.testimonial-quote {
    font-style: italic;
    color: var(--color-text-dark);
    margin-bottom: var(--spacing-md);
    font-size: 1.05em;
}

.testimonial-author {
    display: flex;
    align-items: center;
    margin-top: auto; /* Sorgt dafür, dass es unten klebt */
}

.testimonial-author img {
    width: 50px;
    height: 50px;
    border-radius: 50%;
    object-fit: cover;
    margin-right: var(--spacing-sm);
    border: 2px solid var(--color-primary);
    box-shadow: 0 2px 5px rgba(0,0,0,0.1);
}

.author-info strong {
    display: block;
    color: var(--color-primary);
    font-weight: 600;
}

.author-info span {
    font-size: 0.9em;
    color: var(--color-text-medium);
}

/* Produkt Teaser Sektion */
.product-teaser-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: var(--spacing-lg);
    margin-top: var(--spacing-xl);
}

.product-teaser-item {
    background-color: var(--color-background-white);
    padding: var(--spacing-sm);
    border-radius: var(--border-radius-md);
    box-shadow: 0 4px 12px var(--color-shadow-light);
    text-align: center;
    border: 1px solid var(--color-border);
    transition: transform 0.3s ease, box-shadow 0.3s ease;
    text-decoration: none; /* Für den Link */
    color: inherit;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
}

.product-teaser-item:hover {
    transform: translateY(-5px);
    box-shadow: 0 8px 20px var(--color-shadow-medium);
}

.product-teaser-item img {
    max-width: 100%;
    height: 150px;
    object-fit: contain;
    margin-bottom: var(--spacing-md);
    border-radius: var(--border-radius-sm);
    background-color: #FDFEFE;
    padding: var(--spacing-xs);
    mask-image: radial-gradient(circle at center, black 70%, transparent 100%);
    -webkit-mask-image: radial-gradient(circle at center, black 70%, transparent 100%); /* Radial for teaser also */
}


.product-teaser-item h3 {
    color: var(--color-text-dark);
    font-size: 1.3em;
    margin: 0 0 var(--spacing-xs) 0;
    font-weight: 600;
}

.product-teaser-item p {
    font-size: 1.1em;
    color: var(--color-accent);
    font-weight: 700;
    margin-top: 0;
}

/* Call to Action Sektion */
.cta-section {
    background-color: var(--color-primary);
    color: var(--color-background-white);
    text-shadow: 0 1px 3px rgba(0, 0, 0, 0.2);
    padding: var(--spacing-xl) 0;
    text-align: center;
}

.cta-section h2 {
    color: var(--color-background-white);
}

.cta-section p {
    color: #e0e0e0;
}

.cta-button {
    display: inline-block;
    background-color: var(--color-accent);
    color: var(--color-background-white);
    padding: var(--spacing-sm) var(--spacing-lg);
    border-radius: var(--border-radius-lg);
    text-decoration: none;
    font-size: 1.2em;
    font-weight: 600;
    transition: background-color 0.3s ease, transform 0.2s ease, box-shadow 0.3s ease;
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
    margin-top: var(--spacing-md);
}

.cta-button:hover {
    background-color: #e67e22; /* Dunklerer Akzent-Farbton */
    transform: translateY(-3px) scale(1.02);
    box-shadow: 0 6px 20px rgba(0, 0, 0, 0.3);
}

/* Animation Keyframes (wenn nicht von Scroll-JS gesteuert) */
@keyframes fadeInUp {
    from {
        opacity: 0;
        transform: translateY(30px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}


/* Responsive Anpassungen für die Home-Seite */
@media (max-width: 992px) {
    .hero-section {
        background-size: 150%; /* Zoom anpassen für Tablets */
        background-position: center bottom;
        min-height: 90vh; /* Etwas weniger als 100vh auf kleineren Desktops/Tablets */
    }
    .hero-content h1 { font-size: 3.5em; }
    .hero-content p { font-size: 1.4em; }
    .hero-content .mission-highlight { font-size: 1.4em; }
    .home-section-content { padding: 0 var(--spacing-sm); }
    .home-page-content-wrapper {
        padding: 0 var(--spacing-sm);
        transform: translateX(0); /* Entferne Verschiebung auf Tablets */
        /* NEU: Setze margin-top auf einen Standardwert, wenn es im flex-grow-Container ist */
        margin-top: var(--spacing-lg);
    }
}

@media (max-width: 768px) {
    .hero-section {
        background-size: 180%; /* Stärkerer Zoom für mobile Querformate */
        background-position: center bottom;
        min-height: 80vh; /* Anpassung für mobile Geräte */
        padding-top: calc(var(--header-height) + var(--spacing-lg)); /* GEÄNDERT: Padding-top für den Inhalt im Hero-Banner wieder aktivieren, da der Header auf Mobile größer ist */
        padding-bottom: var(--spacing-lg);
    }
    .hero-content h1 { font-size: 2.8em; }
    .hero-content p { font-size: 1.2em; }
    .hero-content .mission-highlight { font-size: 1.2em; }
    .home-section { padding: var(--spacing-lg) 0; }
    .home-section h2 { font-size: 1.8em; }
    .home-section p { font-size: 1em; }
}

@media (max-width: 500px) { /* Small Mobile */
    .hero-section {
        background-size: 220%;
        background-position: center bottom;
        min-height: 70vh;
        padding-top: calc(var(--header-height) + var(--spacing-md)); /* GEÄNDERT: Padding-top anpassen */
        padding-bottom: var(--spacing-md);
    }
    .hero-content h1 { font-size: 2.2em; }
    .hero-content p { font-size: 1em; }
    .hero-content .mission-highlight { font-size: 1.1em; }
    .hero-button { padding: var(--spacing-xs) var(--spacing-md); font-size: 1em; }
    .home-section h2 { font-size: 1.6em; }
    .home-page-content-wrapper {
        margin: var(--spacing-lg) auto var(--spacing-md) auto;
        padding: 0 var(--spacing-xs);
    }
}

==================================================
DATEINAME: src/assets/style/layout.css
--------------------------------------------------
/* Hauptinhaltsbereich & umgebender Container */
.site-content-wrapper {
    display: flex;
    flex: 1;
    width: 100%;
    max-width: var(--content-max-width); /* Verwende die Variable */
    margin: 0 auto; /* Zentriert den Inhalts-Wrapper */
    padding: 0 var(--spacing-md);
    box-sizing: border-box; /* NEU: Stellt sicher, dass max-width padding beinhaltet */
    margin-top: calc(var(--header-height) + var(--spacing-sm) - 50px); /* GEÄNDERT: Abstand oben reduziert (von spacing-md auf spacing-sm) */
    margin-bottom: var(--spacing-lg);

    transform: translateX(60px); /* KONSISTENT: Verschiebung um 20px nach links */
}

/* Hauptinhaltsbereich für Shop-Produkte */
main {
    flex: 1;
    background-color: transparent; /* Angepasst, um den Hintergrund der Seite durchscheinen zu lassen */
    border-radius: 0; /* Kein abgerundeter Rahmen */
    box-shadow: none; /* Kein Schatten */
    border: none; /* Kein Rahmen */
    padding: var(--spacing-xl);
    box-sizing: border-box;
    position: relative;
    z-index: 1;
    min-height: 400px;
    margin-right: var(--spacing-lg); /* Behält den Abstand zum Warenkorb bei */
}

==================================================
DATEINAME: src/assets/style/main.css
--------------------------------------------------
/* main.css */
@import '/.variables.css';
@import '/.base.css';
@import '/.header.css';
@import '/.layout.css';
@import '/.cart.css';
@import '/.shop.css';
@import '/.footer.css';
@import '/.modal.css';
@import '/.alerts.css';
@import '/.admin.css';
@import '/.home.css';
@import '/.responsive.css';

==================================================
DATEINAME: src/assets/style/modal.css
--------------------------------------------------
/* Popup Modal (for Checkout) */
.modal {
    display: none;
    position: fixed;
    z-index: 1001;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    overflow: auto;
    background-color: rgba(0,0,0,0.5);
    justify-content: center;
    align-items: center;
    animation: fadeIn 0.3s ease-out;
}

.modal-content {
    background-color: var(--color-background-white);
    margin: auto;
    padding: var(--spacing-xl);
    border: 1px solid var(--color-border);
    border-radius: var(--border-radius-md);
    width: 90%;
    max-width: 650px;
    box-shadow: 0 10px 30px var(--color-shadow-medium);
    position: relative;
    animation-name: animatetop;
    animation-duration: 0.4s;
}

@keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
}

@keyframes animatetop {
    from {top: -50px; opacity: 0}
    to {top: 0; opacity: 1}
}

.close-button {
    color: var(--color-text-light);
    float: right;
    font-size: 32px;
    font-weight: normal;
    position: absolute;
    top: var(--spacing-sm);
    right: var(--spacing-md);
    line-height: 1;
    transition: color 0.2s ease;
}

.close-button:hover,
.close-button:focus {
    color: var(--color-text-dark);
    text-decoration: none;
    cursor: pointer;
}

.modal-content h3 {
    text-align: center;
    margin-bottom: var(--spacing-lg);
    color: var(--color-text-dark);
    font-size: 2em;
    font-weight: 600;
}

.form-group {
    margin-bottom: var(--spacing-md);
}

.form-group label {
    display: block;
    margin-bottom: var(--spacing-xs);
    font-weight: 500;
    color: var(--color-text-dark);
    font-size: 0.95em;
}

.form-group input[type="text"],
.form-group input[type="number"],
.form-group input[type="email"],
.form-group select,
.form-group textarea,
.form-group input[type="datetime-local"] {
    width: 100%; /* Berechnung vereinfacht */
    padding: var(--spacing-sm);
    border: 1px solid var(--color-border);
    border-radius: var(--border-radius-sm);
    font-size: 1em;
    box-sizing: border-box;
    color: var(--color-text-dark);
    transition: border-color 0.2s ease, box-shadow 0.2s ease;
}

.form-group input:focus,
.form-group select:focus,
.form-group textarea:focus {
    outline: none;
    border-color: var(--color-primary);
    box-shadow: 0 0 0 3px rgba(52, 104, 192, 0.2);
}

.form-group input[type="radio"] {
    margin-right: var(--spacing-xs);
    transform: scale(1.1);
    accent-color: var(--color-primary);
}

.form-group .radio-option {
    display: inline-block;
    margin-right: var(--spacing-md);
    color: var(--color-text-medium);
    font-size: 0.95em;
}

#checkout-submit-button {
    background-color: var(--color-primary);
    color: var(--color-background-white);
    border: none;
    padding: var(--spacing-md) var(--spacing-lg);
    border-radius: var(--border-radius-md);
    cursor: pointer;
    font-size: 1.1em;
    font-weight: 600;
    width: 100%;
    margin-top: var(--spacing-lg);
    transition: background-color 0.2s ease, box-shadow 0.2s ease, transform 0.2s ease;
}

#checkout-submit-button:hover {
    background-color: #2F5AA9;
    box-shadow: 0 4px 10px var(--color-shadow-light);
    transform: translateY(-2px);
}

==================================================
DATEINAME: src/assets/style/responsive.css
--------------------------------------------------
/* Responsive Anpassungen */
@media (max-width: 1400px) {
    /* Diese Regeln bleiben, um auf kleineren Bildschirmen responsive zu sein */
    .site-content-wrapper,
    .google-search-like-nav,
    .google-header-wrapper, /* google-header-wrapper selbst bleibt 100% Breite */
    .footer-content-wrapper,
    .admin-container {
        max-width: 100%;
        padding-left: var(--spacing-md);
        padding-right: var(--spacing-md);
    }

    /* Die transform-Eigenschaft sollte auf kleineren Bildschirmen, wo max-width: 100% aktiv wird, entfernt werden,
       um keine horizontalen Scrollbalken zu verursachen oder das Layout zu stören. */
    .google-search-like-nav,
    .site-content-wrapper,
    .footer-content-wrapper {
        transform: translateX(0); /* NEU: Verschiebung auf 0px zurücksetzen für kleinere Bildschirme */
    }
}

@media (max-width: 992px) { /* Tablet/Smaller Desktop */
    .site-content-wrapper {
        flex-direction: column;
        padding: 0 var(--spacing-sm);
        margin-top: calc(var(--header-height) + var(--spacing-md));
        margin-bottom: var(--spacing-md);
        transform: translateX(0); /* Verschiebung auf Tablets und Mobile entfernen */
    }
    main {
        margin-right: 0;
        margin-bottom: var(--spacing-md);
        padding: var(--spacing-lg);
        width: 100%;
        border-radius: 0;
        box-shadow: none;
    }
    .cart-sidebar {
        position: static;
        width: 100%;
        max-height: 400px;
        overflow-y: hidden;
        padding: 0;
        order: -1;
        top: auto;
        margin-bottom: var(--spacing-md);
        background: transparent;
        border: none;
        border-radius: 0;
        box-shadow: none;
        display: flex;
        flex-direction: column;
        gap: var(--spacing-md);
    }

    /* Auf Tablets erhalten die inneren Elemente des Warenkorbs wieder ihre Karten-Struktur */
    .cart-header-desktop, .cart-body-content {
        background-color: var(--color-background-white);
        border: 1px solid var(--color-border);
        border-radius: var(--border-radius-md);
        padding: var(--spacing-md);
        box-shadow: 0 2px 5px var(--color-shadow-light);
        margin-bottom: 0;
    }
    .cart-header-desktop h2 { text-align: center; }

    .cart-items-scrollable-wrapper {
        padding-right: var(--spacing-xs);
        margin-right: calc(-1 * var(--spacing-xs));
        mask-image: linear-gradient(to bottom, black 80%, transparent 100%);
        -webkit-mask-image: linear-gradient(to bottom, black 80%, transparent 100%);
    }


    .admin-container {
        flex-direction: column;
        padding: 0 var(--spacing-sm);
        margin-top: calc(var(--header-height) + var(--spacing-md));
        margin-bottom: var(--spacing-md);
    }
    .admin-sidebar {
        width: 100%;
        order: -1;
        margin-bottom: var(--spacing-md);
    }
    .admin-content {
        padding: var(--spacing-lg);
    }
    .product-grid {
        grid-template-columns: repeat(2, 1fr);
        gap: var(--spacing-md);
    }
    .product-item img {
        height: 90px;
    }
    .footer-content-wrapper {
        padding: var(--spacing-lg) var(--spacing-md);
        transform: translateX(0);
    }
    .footer-container {
        grid-template-columns: repeat(2, 1fr);
        gap: var(--spacing-md);
    }
    .footer-section {
        margin-bottom: 0;
    }

    .dashboard-stats {
        grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));
    }

    .google-header-wrapper {
        transform: translateX(0); /* Sicherstellen, dass die Verschiebung auf Tablets und Mobile entfernt wird */
    }
}

@media (max-width: 768px) { /* Mobile Landscape & Portrait */
    :root {
        --header-height: 100px;
        --header-height-mobile-collapsed: 60px;
    }
    header {
        height: auto;
        padding: var(--spacing-sm) var(--spacing-md);
        box-shadow: 0 2px 10px var(--color-shadow-medium);
    }
    header.header-scrolled {
        box-shadow: 0 2px 10px var(--color-shadow-medium);
    }

    .google-search-like-nav {
        flex-wrap: wrap;
        height: auto;
        padding: var(--spacing-sm);
        flex-direction: column;
        align-items: flex-start;
        transform: translateX(0); /* Sicherstellen, dass die Verschiebung auf Mobile entfernt wird */
    }
    .google-header-wrapper {
        flex-direction: column;
        align-items: flex-start;
        width: 100%;
        transform: translateX(0);
    }
    .logo {
        margin-bottom: var(--spacing-sm);
        margin-right: 0;
    }
    .nav-options {
        gap: var(--spacing-md);
        width: 100%;
        justify-content: center;
        margin-bottom: var(--spacing-sm);
    }
    .cart-button {
        width: 100%;
        text-align: center;
        margin-top: var(--spacing-sm);
        justify-content: center;
    }
    .site-content-wrapper {
        flex-direction: column;
        margin-top: calc(var(--header-height) + var(--spacing-sm));
        padding: 0;
        transform: translateX(0);
    }
    main {
        order: 1;
        margin-bottom: var(--spacing-md);
        border-radius: 0;
        box-shadow: none;
        padding: var(--spacing-md);
    }

    /* Mobiler Warenkorb unten fixiert und zusammenklappbar - CONTAINER SELBST IST WEISS */
    .cart-sidebar {
        position: fixed;
        bottom: 0;
        left: 0;
        right: 0;
        width: 100%;
        max-height: calc(var(--cart-max-height-ratio) * 100vh);
        top: auto;
        border-radius: var(--border-radius-md) var(--border-radius-md) 0 0;
        box-shadow: 0 -4px 15px var(--color-shadow-medium);
        transform: translateY(calc(100% - var(--header-height-mobile-collapsed)));
        transition: transform 0.3s ease-in-out;
        z-index: 100;
        display: flex;
        flex-direction: column;
        padding: 0;
        background-color: var(--color-background-white);
        border: none;
        gap: 0;
    }

    .cart-sidebar.is-expanded {
        transform: translateY(0);
    }
    .cart-sidebar.is-collapsed {
        overflow-y: hidden;
    }

    .cart-header-desktop {
        display: none;
    }
    .cart-header-mobile {
        display: flex;
    }

    .cart-mobile-summary {
        flex-grow: 1;
        text-align: left;
    }

    .cart-body-content {
        max-height: calc(var(--cart-max-height-ratio) * 100vh - var(--header-height-mobile-collapsed));
        overflow-y: hidden;
        flex-grow: 1;
        display: flex;
        flex-direction: column;
        padding: var(--spacing-md);
        background-color: transparent;
        border: none;
        border-radius: 0;
        box-shadow: none;
    }
    .cart-sidebar.is-collapsed .cart-body-content {
        display: none;
    }

    .cart-items-scrollable-wrapper {
        flex-grow: 1;
        overflow-y: auto;
        padding-right: var(--spacing-xs);
        margin-right: calc(-1 * var(--spacing-xs));
        mask-image: linear-gradient(to bottom, black 80%, transparent 100%);
        -webkit-mask-image: linear-gradient(to bottom, black 80%, transparent 100%);
    }

    #cart-total-container {
        flex-shrink: 0;
    }
    .checkout-button {
        flex-shrink: 0;
    }


    /* Allgemeine Anpassungen für Mobile Admin-Panel */
    .admin-container {
        margin-top: calc(var(--header-height) + var(--spacing-md));
        padding: 0 var(--spacing-xs);
    }
    .admin-sidebar {
        padding: var(--spacing-md);
    }
    .admin-content {
        padding: var(--spacing-md);
        border-radius: var(--border-radius-sm);
    }
    .category-section h2 {
        font-size: 1.8em;
    }
    .product-item h3 {
        font-size: 1.2em;
    }
    .product-quantity-price-line {
        font-size: 1.1em;
        margin-bottom: var(--spacing-sm);
    }
    .admin-sidebar h2 {
        font-size: 1.4em;
    }
    .admin-sidebar a {
        padding: var(--spacing-xs) var(--spacing-sm);
        font-size: 0.9em;
    }
    .dashboard-stats {
        grid-template-columns: 1fr;
    }
    .footer-content-wrapper {
        margin: 0 var(--spacing-sm) var(--spacing-sm) var(--spacing-sm);
        padding: var(--spacing-md);
        transform: translateX(0);
    }
    .footer-container {
        grid-template-columns: 1fr;
        gap: var(--spacing-md);
    }
}

@media (max-width: 500px) { /* Small Mobile */
    :root {
        --font-size-base: 15px;
    }
    .cart-header-mobile {
        font-size: 1em;
    }
    .cart-mobile-summary {
        font-size: 0.9em;
    }
    .cart-toggle-button {
        font-size: 1em;
    }
    .site-content-wrapper,
    .admin-container {
        padding: 0 var(--spacing-xs);
    }
    main, .admin-content {
        border-radius: 0;
    }
    .footer-content-wrapper {
        margin: 0 var(--spacing-xs) var(--spacing-xs) var(--spacing-xs);
        width: calc(100% - (2 * var(--spacing-xs)));
        padding: var(--spacing-md);
        border-radius: var(--border-radius-md);
    }
    .product-grid {
        grid-template-columns: 1fr;
        gap: var(--spacing-md);
    }
    .modal-content {
        padding: var(--spacing-md);
        max-width: 95%;
    }
    .cart-item-image {
        width: 40px;
        height: 40px;
    }
    .cart-item-info h4 {
        font-size: 0.9em;
    }
    .cart-item-info p {
        font-size: 0.75em;
    }
    .cart-item-controls input[type="number"] {
        width: 35px;
        padding: 3px;
        font-size: 0.85em;
    }
}

==================================================
DATEINAME: src/assets/style/shop.css
--------------------------------------------------
/* Spezifische Shop-Stile für Produktliste im Main */
.category-section {
    margin-bottom: var(--spacing-xl);
}

.category-section h2 {
    border-bottom: 1px solid var(--color-border);
    padding-bottom: var(--spacing-sm);
    margin-bottom: var(--spacing-lg);
    color: var(--color-text-dark);
    font-size: 2em;
    font-weight: 600;
}

.product-grid {
    display: grid;
    grid-template-columns: repeat(3, 1fr); /* Immer 3 Spalten auf Desktop */
    gap: var(--spacing-lg);
}

.product-item {
    background: var(--color-background-white);
    border: 1px solid var(--color-border);
    border-radius: var(--border-radius-md);
    padding: var(--spacing-sm); /* GEÄNDERT: padding reduziert (von md auf sm) */
    text-align: center;
    box-shadow: 0 4px 12px var(--color-shadow-light);
    transition: transform 0.2s ease, box-shadow 0.2s ease;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
}

.product-item:hover {
    transform: translateY(-5px);
    box-shadow: 0 6px 20px var(--color-shadow-medium);
}

.product-item img {
    max-width: 100%;
    height: 110px; /* GEÄNDERT: Höhe des Bildes weiter reduziert */
    object-fit: contain;
    border-radius: var(--border-radius-sm);
    margin-bottom: var(--spacing-md);
    background-color: #FDFEFE;
    padding: var(--spacing-sm);
    /* NEU: Bilder ohne harten Rahmen, mit Verlauf */
    mask-image: radial-gradient(circle at center, black 70%, transparent 100%);
    -webkit-mask-image: radial-gradient(circle at center, black 70%, transparent 100%);
}

.product-item h3 {
    font-size: 1.3em;
    margin: 0 0 var(--spacing-xs);
    color: var(--color-text-dark);
    font-weight: 600;
    line-height: 1.3;
}

.product-quantity-price-line {
    /* Grundlegendes Styling für die Zeile */
    margin-bottom: var(--spacing-sm); /* GEÄNDERT: margin-bottom reduziert (von md auf sm) */
    line-height: 1.4;
    text-align: center;
    color: var(--color-text-medium);
    font-size: 0.95em;
    font-weight: 400;
}

.product-quantity-price-line .product-price-value {
    font-size: 1.4em;
    font-weight: 700;
    color: var(--color-accent);
    margin-left: 4px;
    white-space: nowrap;
}


.product-controls {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: var(--spacing-sm);
    margin-top: var(--spacing-sm); /* GEÄNDERT: margin-top reduziert (von md auf sm) */
}

.product-controls input[type="number"] {
    width: 45px;
    padding: var(--spacing-xs) var(--spacing-sm);
    border: 1px solid var(--color-border);
    border-radius: var(--border-radius-sm);
    text-align: center;
    font-size: 0.9em;
    color: var(--color-text-dark);
    -moz-appearance: textfield;
}

.product-controls input[type="number"]::-webkit-outer-spin-button,
.product-controls input[type="number"]::-webkit-inner-spin-button {
    -webkit-appearance: none;
    margin: 0;
}

.product-controls .add-to-cart-btn {
    background-color: var(--color-primary);
    color: var(--color-background-white);
    border: none;
    padding: var(--spacing-sm) var(--spacing-md);
    border-radius: var(--border-radius-lg);
    cursor: pointer;
    font-size: 0.95em;
    font-weight: 600;
    transition: background-color 0.2s ease, box-shadow 0.2s ease, transform 0.2s ease;
    display: inline-flex;
    align-items: center;
    gap: var(--spacing-xs);
}

.product-controls .add-to-cart-btn:hover {
    background-color: #2F5AA9;
    box-shadow: 0 4px 10px var(--color-shadow-light);
    transform: translateY(-2px);
}

==================================================
DATEINAME: src/assets/style/variables.css
--------------------------------------------------
/* Google Fonts Import */
@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');

/* CSS Custom Properties (Variablen) für Konsistenz */
:root {
    /* Farben */
    --color-primary: #3468C0; /* Ein modernes, etwas gedämpfteres Blau */
    --color-secondary: #00BF63; /* Ein frischeres Grün für Aktionen */
    --color-accent: #FF8B13; /* Ein wärmerer, weniger aggressiver Akzent für Preise/Wichtiges */
    --color-background-light: #F8FAFC; /* Sehr helles Grau, moderner als #f0f2f5 */
    --color-background-white: #FFFFFF;
    --color-text-dark: #2C3E50; /* Dunklerer Text für bessere Lesbarkeit */
    --color-text-medium: #627D98; /* Mittlerer Grauton für Beschreibungen */
    --color-text-light: #A0B3C8; /* Helles Grau für Hilfstexte */
    --color-border: #E0E6ED; /* Hellerer Rand */
    --color-shadow-light: rgba(0, 0, 0, 0.05);
    --color-shadow-medium: rgba(0, 0, 0, 0.1);

    /* Typografie */
    --font-family-base: 'Inter', Arial, sans-serif;
    --font-size-base: 16px;
    --line-height-base: 1.6;

    /* Abstände */
    --spacing-xs: 8px;
    --spacing-sm: 12px;
    --spacing-md: 20px;
    --spacing-lg: 30px;
    --spacing-xl: 40px;

    /* Radien */
    --border-radius-sm: 8px;
    --border-radius-md: 12px;
    --border-radius-lg: 24px;

    /* Header Höhe */
    --header-height: 80px; /* Leichte Anpassung für einen kompakteren Header */
    --header-height-mobile-collapsed: 60px; /* Höhe des mobilen Warenkorb-Headers, wenn zusammengeklappt */

    /* Warenkorb Höhe (2/3 der Viewport-Höhe) */
    --cart-max-height-ratio: 0.66;

    /* NEU: Maximale Breite für Hauptinhalts-Wrapper und Header/Footer */
    --content-max-width: 1240px;
}

==================================================
DATEINAME: src/api/cart_process.php
--------------------------------------------------
<?php
// api/cart_process.php

if (session_status() == PHP_SESSION_NONE) {
    session_start();
}

header('Content-Type: application/json');

// Benötigte Konfiguration und Funktionen laden
require_once __DIR__ . '/../config/config.php';
require_once ROOT_PATH . 'include/db.php'; // Stellt getDbConnection() und $pdo bereit

$response = ['success' => false, 'message' => ''];

try {
    $pdo = getDbConnection(); // Sicherstellen, dass die Verbindung besteht

    if (!isset($_SESSION['cart'])) {
        $_SESSION['cart'] = [];
    }

    if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['action'])) {
        $action = $_POST['action'];
        $productId = isset($_POST['product_id']) ? (int)$_POST['product_id'] : 0;
        $quantity = isset($_POST['quantity']) ? (int)$_POST['quantity'] : 1;

        if ($productId <= 0) {
            throw new Exception("Ungültige Produkt-ID.");
        }

        // Produktinformationen aus der Datenbank abrufen, einschließlich image_url und description
        $stmt = $pdo->prepare("SELECT product_id, name, description, price, stock_quantity, image_url FROM products WHERE product_id = :product_id AND is_active = TRUE");
        $stmt->execute([':product_id' => $productId]);
        $product = $stmt->fetch();

        if (!$product) {
            throw new Exception("Produkt nicht gefunden oder nicht aktiv.");
        }

        $availableStock = $product['stock_quantity'];

        switch ($action) {
            case 'add':
                // Prüfen, ob das Produkt bereits im Warenkorb ist
                $currentCartQuantity = isset($_SESSION['cart'][$productId]) ? $_SESSION['cart'][$productId]['quantity'] : 0;
                $newQuantity = $currentCartQuantity + $quantity;

                if ($newQuantity > $availableStock) {
                    $response['message'] = "Nicht genügend Lagerbestand. Maximal verfügbar: " . $availableStock;
                    echo json_encode($response);
                    exit();
                }

                $_SESSION['cart'][$productId] = [
                    'id' => $productId,
                    'name' => $product['name'],
                    'price' => $product['price'],
                    'quantity' => $newQuantity,
                    'stock' => $availableStock, // Lagerbestand für clientseitige Validierung
                    'image_url' => $product['image_url'], // Bild-URL im Warenkorb speichern
                    'description' => $product['description'] // Beschreibung im Warenkorb speichern (für Alt-Text)
                ];
                $response['success'] = true;
                $response['message'] = "Produkt erfolgreich hinzugefügt.";
                break;

            case 'update':
                if (!isset($_SESSION['cart'][$productId])) {
                    throw new Exception("Produkt nicht im Warenkorb.");
                }

                if ($quantity <= 0) {
                    // Wenn Menge 0 oder weniger ist, entfernen
                    unset($_SESSION['cart'][$productId]);
                    $response['success'] = true;
                    $response['message'] = "Produkt aus dem Warenkorb entfernt.";
                } else {
                    if ($quantity > $availableStock) {
                        $response['message'] = "Nicht genügend Lagerbestand. Maximal verfügbar: " . $availableStock;
                        echo json_encode($response);
                        exit();
                    }
                    $_SESSION['cart'][$productId]['quantity'] = $quantity;
                    $response['success'] = true;
                    $response['message'] = "Menge aktualisiert.";
                }
                break;

            case 'remove':
                if (!isset($_SESSION['cart'][$productId])) {
                    throw new Exception("Produkt nicht im Warenkorb.");
                }
                unset($_SESSION['cart'][$productId]);
                $response['success'] = true;
                $response['message'] = "Produkt aus dem Warenkorb entfernt.";
                break;

            default:
                throw new Exception("Unbekannte Aktion.");
        }
    } else {
        throw new Exception("Ungültige Anfrage.");
    }

} catch (Exception $e) {
    error_log("Warenkorb-Fehler: " . $e->getMessage());
    $response['message'] = $e->getMessage();
}

$response['cart'] = $_SESSION['cart'];
echo json_encode($response);

==================================================
DATEINAME: src/api/checkout_process.php
--------------------------------------------------
<?php
// api/checkout_process.php

if (session_status() == PHP_SESSION_NONE) {
    session_start();
}

header('Content-Type: application/json');

// Benötigte Konfiguration und Funktionen laden
require_once __DIR__ . '/../config/config.php';
require_once ROOT_PATH . 'include/db.php'; // Stellt getDbConnection() und $pdo bereit
require_once ROOT_PATH . 'include/email.php'; // Stellt sendAppEmail() bereit

/**
 * Formatiert einen Betrag in Euro mit spezifischen Regeln für Nachkommastellen.
 * Zeigt zwei Nachkommastellen nur an, wenn sie nicht .00 sind.
 *
 * @param float $amount Der zu formatierende Betrag.
 * @return string Der formatierte Betrag mit Euro-Symbol.
 */
function formatEuroCurrency(float $amount): string {
    // Überprüfen, ob der Betrag ganze Zahlen hat (keine Nachkommastellen oder .00)
    if (fmod($amount, 1.0) == 0) {
        return number_format($amount, 0, ',', '.') . ' €';
    } else {
        // Andernfalls mit zwei Nachkommastellen formatieren
        return number_format($amount, 2, ',', '.') . ' €';
    }
}


$response = ['success' => false, 'message' => ''];

try {
    $pdo = getDbConnection(); // Sicherstellen, dass die Verbindung besteht
    $pdo->beginTransaction(); // Transaktion starten

    if (empty($_SESSION['cart'])) {
        throw new Exception("Ihr Warenkorb ist leer. Keine Bestellung möglich.");
    }

    // Eingabedaten validieren und bereinigen
    $firstName = trim($_POST['firstName'] ?? '');
    $lastName = trim($_POST['lastName'] ?? '');
    $email = filter_var(trim($_POST['email'] ?? ''), FILTER_VALIDATE_EMAIL);
    $phone = trim($_POST['phone'] ?? '');
    $paymentMethod = $_POST['paymentMethod'] ?? ''; // 'bank_transfer' oder 'cash'
    $pickupDateId = (int)($_POST['pickupDate'] ?? 0);
    $cartTotalFromClient = (float)($_POST['cart_total'] ?? 0);

    if (empty($firstName) || empty($lastName) || !$email || empty($paymentMethod) || $pickupDateId <= 0) {
        throw new Exception("Bitte füllen Sie alle erforderlichen Felder aus.");
    }
    if (!in_array($paymentMethod, ['bank_transfer', 'cash'])) {
        throw new Exception("Ungültige Zahlungsmethode ausgewählt.");
    }

    // 1. Abholtermin überprüfen
    $stmtPickup = $pdo->prepare("SELECT pickup_datetime, location FROM pickup_dates WHERE pickup_date_id = :id AND is_active = TRUE AND pickup_datetime >= NOW()");
    $stmtPickup->execute([':id' => $pickupDateId]);
    $pickupDateInfo = $stmtPickup->fetch();

    if (!$pickupDateInfo) {
        throw new Exception("Der ausgewählte Abholtermin ist ungültig oder nicht mehr verfügbar.");
    }

    // 2. Benutzer finden oder erstellen
    $userId = null;
    $stmtUser = $pdo->prepare("SELECT user_id FROM users WHERE email = :email");
    $stmtUser->execute([':email' => $email]);
    $existingUser = $stmtUser->fetch();

    if ($existingUser) {
        $userId = $existingUser['user_id'];
        // Optional: Update user info if different
        $stmtUpdateUser = $pdo->prepare("UPDATE users SET first_name = :first_name, last_name = :last_name, phone_number = :phone_number, updated_at = CURRENT_TIMESTAMP WHERE user_id = :user_id");
        $stmtUpdateUser->execute([
            ':first_name' => $firstName,
            ':last_name' => $lastName,
            ':phone_number' => $phone,
            ':user_id' => $userId
        ]);
    } else {
        // Neuen Benutzer anlegen (vereinfacht, kein Passwort oder Registrierungsprozess hier)
        $stmtInsertUser = $pdo->prepare("INSERT INTO users (username, email, password_hash, first_name, last_name, phone_number) VALUES (:username, :email, :password_hash, :first_name, :last_name, :phone_number)");
        // Generiere einen einfachen Hash für Guest-User oder verwende Platzhalter
        $dummyPasswordHash = password_hash(uniqid(), PASSWORD_DEFAULT);
        $stmtInsertUser->execute([
            ':username' => $email, // Oder einen generischen Usernamen
            ':email' => $email,
            ':password_hash' => $dummyPasswordHash,
            ':first_name' => $firstName,
            ':last_name' => $lastName,
            ':phone_number' => $phone
        ]);
        $userId = $pdo->lastInsertId();
    }

    // 3. Warenkorb-Gesamtbetrag serverseitig neu berechnen und Lagerbestand prüfen
    $calculatedTotalAmount = 0;
    $orderItems = [];
    $productsToUpdateStock = [];

    foreach ($_SESSION['cart'] as $productId => $item) {
        $stmtProduct = $pdo->prepare("SELECT product_id, name, description, price, stock_quantity FROM products WHERE product_id = :product_id AND is_active = TRUE");
        $stmtProduct->execute([':product_id' => $productId]);
        $dbProduct = $stmtProduct->fetch();

        if (!$dbProduct) {
            throw new Exception("Produkt '{$item['name']}' nicht gefunden oder nicht mehr verfügbar.");
        }

        if ($item['quantity'] > $dbProduct['stock_quantity']) {
            throw new Exception("Nicht genügend Lagerbestand für Produkt '{$dbProduct['name']}'. Verfügbar: {$dbProduct['stock_quantity']}, Bestellt: {$item['quantity']}.");
        }

        $calculatedTotalAmount += $dbProduct['price'] * $item['quantity'];
        $orderItems[] = [
            'product_id' => $productId,
            'quantity' => $item['quantity'],
            'price_at_order' => $dbProduct['price'],
            'name' => $dbProduct['name'] // Produktname für die E-Mail
        ];
        $productsToUpdateStock[$productId] = $dbProduct['stock_quantity'] - $item['quantity'];
    }

    // Optional: Überprüfung, ob der vom Client übermittelte Gesamtbetrag dem serverseitig berechneten entspricht
    // Eine geringe Toleranz für Floating-Point-Ungenauigkeiten könnte hier sinnvoll sein.
    if (abs($calculatedTotalAmount - $cartTotalFromClient) > 0.01) {
        error_log("Client-Total ($cartTotalFromClient) does not match server-total ($calculatedTotalAmount) for user $userId. Possible manipulation or rounding error.");
        // Entscheiden, ob die Bestellung abgebrochen oder der server-berechnete Betrag verwendet wird.
        // Für dieses Beispiel verwenden wir den server-berechneten Betrag.
    }


    // 4. Bestellung in die 'orders'-Tabelle einfügen
    $stmtOrder = $pdo->prepare("INSERT INTO orders (user_id, pickup_date_id, total_amount, status, payment_method) VALUES (:user_id, :pickup_date_id, :total_amount, 'pending', :payment_method)");
    $stmtOrder->execute([
        ':user_id' => $userId,
        ':pickup_date_id' => $pickupDateId,
        ':total_amount' => $calculatedTotalAmount,
        ':payment_method' => $paymentMethod
    ]);
    $orderId = $pdo->lastInsertId();

    // 5. Artikel in 'order_items' einfügen und Lagerbestand aktualisieren
    $stmtOrderItem = $pdo->prepare("INSERT INTO order_items (order_id, product_id, quantity, price_at_order) VALUES (:order_id, :product_id, :quantity, :price_at_order)");
    $stmtUpdateStock = $pdo->prepare("UPDATE products SET stock_quantity = :new_stock WHERE product_id = :product_id");

    foreach ($orderItems as $item) {
        $stmtOrderItem->execute([
            ':order_id' => $orderId,
            ':product_id' => $item['product_id'],
            ':quantity' => $item['quantity'],
            ':price_at_order' => $item['price_at_order']
        ]);
        // Lagerbestand aktualisieren
        $stmtUpdateStock->execute([
            ':new_stock' => $productsToUpdateStock[$item['product_id']],
            ':product_id' => $item['product_id']
        ]);
    }

    // 6. Zahlungsinformationen in 'payments' einfügen
    $paymentStatus = ($paymentMethod === 'cash') ? 'pending' : 'pending'; // Für Überweisung auch 'pending' bis zum Geldeingang
    $transactionId = null;

    if ($paymentMethod === 'bank_transfer') {
        // Generiere Transaktions-ID: Nachname + 4-stellige Zufallszahl
        $randomNumber = str_pad(mt_rand(0, 9999), 4, '0', STR_PAD_LEFT);
        $transactionId = strtoupper(substr($lastName, 0, 5)) . '-' . $randomNumber; // Erste 5 Buchstaben des Nachnamens + Zufallszahl
    }


    $stmtPayment = $pdo->prepare("INSERT INTO payments (order_id, amount, payment_method, transaction_id, status, notes) VALUES (:order_id, :amount, :payment_method, :transaction_id, :status, :notes)");
    $stmtPayment->execute([
        ':order_id' => $orderId,
        ':amount' => $calculatedTotalAmount,
        ':payment_method' => $paymentMethod,
        ':transaction_id' => $transactionId,
        ':status' => $paymentStatus,
        ':notes' => ($paymentMethod === 'cash') ? 'Barzahlung bei Abholung' : 'Überweisung erwartet'
    ]);

    // Transaktion committen
    $pdo->commit();

    // Warenkorb leeren
    $_SESSION['cart'] = [];

    // 7. Bestätigungs-E-Mail senden
    $emailSubject = "Ihre Bestellung Nr. {$orderId} bei " . MAIL_FROM_NAME;
    $emailBody = "
        <p>Hallo {$firstName} {$lastName},</p>
        <p>Vielen Dank für Ihre Bestellung! Ihre Bestellung mit der Nummer <strong>{$orderId}</strong> wurde erfolgreich aufgenommen.</p>
        <p><strong>Bestelldetails:</strong></p>
        <table style='width: 100%; border-collapse: collapse; margin-bottom: 20px;'>
            <thead>
                <tr>
                    <th style='border: 1px solid #ddd; padding: 8px; text-align: left;'>Produkt</th>
                    <th style='border: 1px solid #ddd; padding: 8px; text-align: right;'>Menge</th>
                    <th style='border: 1px solid #ddd; padding: 8px; text-align: right;'>Einzelpreis</th>
                    <th style='border: 1px solid #ddd; padding: 8px; text-align: right;'>Gesamt</th>
                </tr>
            </thead>
            <tbody>";
    foreach ($orderItems as $item) {
        $emailBody .= "
                <tr>
                    <td style='border: 1px solid #ddd; padding: 8px; text-align: left;'>".htmlspecialchars($item['name'])."</td>
                    <td style='border: 1px solid #ddd; padding: 8px; text-align: right;'>{$item['quantity']}</td>
                    <td style='border: 1px solid #ddd; padding: 8px; text-align: right;'>".formatEuroCurrency($item['price_at_order'])."</td>
                    <td style='border: 1px solid #ddd; padding: 8px; text-align: right;'>".formatEuroCurrency($item['quantity'] * $item['price_at_order'])."</td>
                </tr>";
    }
    $emailBody .= "
            </tbody>
            <tfoot>
                <tr>
                    <td colspan='3' style='border: 1px solid #ddd; padding: 8px; text-align: right; font-weight: bold;'>Gesamtsumme:</td>
                    <td style='border: 1px solid #ddd; padding: 8px; text-align: right; font-weight: bold;'>".formatEuroCurrency($calculatedTotalAmount)."</td>
                </tr>
            </tfoot>
        </table>
        <p><strong>Zahlungsmethode:</strong> ";
    if ($paymentMethod === 'bank_transfer') {
        $emailBody .= "Überweisung. Bitte überweisen Sie den Betrag von <strong>" . formatEuroCurrency($calculatedTotalAmount) . "</strong> auf unser Konto. <br>
                       Verwendungszweck: <strong>{$transactionId}</strong>.<br>
                       Kontoinhaber: [Ihr Name/Firmenname]<br>
                       IBAN: [Ihre IBAN]<br>
                       BIC: [Ihre BIC]";
    } else {
        $emailBody .= "Barzahlung bei Abholung.";
    }
    $emailBody .= "</p>
        <p><strong>Abholung:</strong> Ihre Bestellung ist zur Abholung bereit am <strong>" . (new DateTime($pickupDateInfo['pickup_datetime']))->format('d.m.Y H:i') . " Uhr</strong> an folgender Adresse: <strong>" . htmlspecialchars($pickupDateInfo['location']) . "</strong>.</p>
        <p>Wir freuen uns auf Sie!</p>
        <p>Mit freundlichen Grüssen,<br>Ihr Team von " . MAIL_FROM_NAME . "</p>";

    $emailSent = sendAppEmail($email, $emailSubject, $emailBody, $orderId); // orderId an E-Mail-Log weitergeben

    if ($emailSent !== true) {
        // E-Mail-Fehler loggen, aber die Bestellung als erfolgreich markieren
        error_log("Fehler beim Senden der Bestätigungs-E-Mail für Bestellung {$orderId} an {$email}: " . $emailSent);
        $response['message'] = "Ihre Bestellung wurde erfolgreich aufgegeben, aber die Bestätigungs-E-Mail konnte nicht gesendet werden. Bitte überprüfen Sie Ihren Spam-Ordner oder kontaktieren Sie uns.";
        $response['success'] = true; // Bestellung war erfolgreich
    } else {
        $response['success'] = true;
        $response['message'] = "Ihre Bestellung wurde erfolgreich aufgegeben. Eine Bestätigungs-E-Mail wurde an Ihre Adresse gesendet.";
    }

} catch (Exception $e) {
    if ($pdo->inTransaction()) {
        $pdo->rollBack(); // Bei Fehler Transaktion rückgängig machen
    }
    error_log("Bestellfehler: " . $e->getMessage());
    $response['message'] = "Fehler bei der Bestellabwicklung: " . $e->getMessage();
}

echo json_encode($response);

==================================================
DATEINAME: src/include/asset_handler.php
--------------------------------------------------
<?php
// include/asset_handler.php

/**
 * Behandelt Anfragen für statische Assets, die mit einem Unterstrich (_), Bindestrich (-) oder Punkt (.) beginnen.
 * Anfragen mit '_' werden aus dem 'assets/'-Ordner bedient.
 * Anfragen mit '-' werden aus dem 'assets/img/'-Ordner bedient.
 * Anfragen mit '.' werden aus dem 'assets/style/'-Ordner bedient.
 *
 * @param string $page_name Der bereinigte Seitenname aus der URL (das erste Segment nach dem Root).
 * @return void
 */
function handleAssetRequest(string $page_name): void
{
    $assets_folder_base_path = ROOT_PATH . 'assets/';
    $file_name_without_prefix = '';
    $target_folder_path = '';

    // 1. Überprüfen, ob eine Asset-Anfrage vorliegt (beginnt mit '_', '-' oder '.')
    if (str_starts_with($page_name, '_')) {
        $file_name_without_prefix = substr($page_name, 1);
        $target_folder_path = $assets_folder_base_path; // Für '_' direkt im assets-Root
    } elseif (str_starts_with($page_name, '-')) {
        $file_name_without_prefix = substr($page_name, 1);
        $target_folder_path = $assets_folder_base_path . 'img/'; // Für '-' im assets/img-Unterordner
    } elseif (str_starts_with($page_name, '.')) { // NEU: Für Punkt-Präfix
        $file_name_without_prefix = substr($page_name, 1);
        $target_folder_path = $assets_folder_base_path . 'style/'; // Für '.' im assets/style-Unterordner
    } else {
        // Keine Asset-Anfrage, die von dieser Funktion behandelt wird
        return;
    }

    $file_path = $target_folder_path . $file_name_without_prefix;

    // Prüfen, ob die Datei existiert
    if (!file_exists($file_path)) {
        http_response_code(404);
        echo "Asset not found.";
        exit();
    }

    // MIME-Typ basierend auf der Dateierweiterung setzen
    $file_extension = pathinfo($file_path, PATHINFO_EXTENSION);

    switch ($file_extension) {
        case 'css':
            header('Content-Type: text/css');
            break;
        case 'js':
            header('Content-Type: application/javascript');
            break;
        case 'ico':
            header('Content-Type: image/x-icon');
            break;
        case 'png':
            header('Content-Type: image/png');
            break;
        case 'jpg':
        case 'jpeg':
            header('Content-Type: image/jpeg');
            break;
        case 'gif':
            header('Content-Type: image/gif');
            break;
        case 'svg':
            header('Content-Type: image/svg+xml');
            break;
        case 'webp': // Häufig für optimierte Bilder
            header('Content-Type: image/webp');
            break;
        default:
            // Standardmäßig als Binärdaten senden oder Fehlerbehandlung
            header('Content-Type: application/octet-stream');
            break;
    }

    // Datei an den Browser senden
    readfile($file_path);
    exit(); // Wichtig: Beende das Skript nach dem Senden des Assets
}

==================================================
DATEINAME: src/include/db.php
--------------------------------------------------
<?php
// include/db.php

/**
 * Datenbank-Verbindungslogik.
 *
 * Bindet die sensible Konfiguration ein und stellt eine Datenbankverbindung her.
 */


// Sensible Konfiguration einbinden
// ROOT_PATH muss in config/config.php definiert sein, um den Pfad korrekt aufzulösen
require_once ROOT_PATH . 'config/sensitive_config.php';

// Globale Variable für die Datenbankverbindung
// Alternativ könnte man eine Funktion erstellen, die die Verbindung zurückgibt
global $pdo;

try {
    // 1. Diagnose: Verfügbare PDO-Treiber prüfen
    $availableDrivers = PDO::getAvailableDrivers();
    if (!in_array('mariadb', $availableDrivers) && !in_array('mysql', $availableDrivers)) {
        $driverErrorMsg = "Der 'mariadb' oder 'mysql' PDO-Treiber wurde nicht gefunden. Verfügbare Treiber: " . implode(', ', $availableDrivers);
        error_log("Database Connection Error: " . $driverErrorMsg);
        die("Datenbankverbindung fehlgeschlagen: " . $driverErrorMsg);
    }
    
    // 2. DSN-Präfix anpassen, falls 'mariadb' nicht direkt unterstützt wird, aber 'mysql' vorhanden ist
    $dbDriver = 'mariadb';
    if (!in_array('mariadb', $availableDrivers) && in_array('mysql', $availableDrivers)) {
        $dbDriver = 'mysql'; // Fallback auf 'mysql' als DSN-Präfix, da MariaDB oft den 'mysql'-Treiber verwendet
        error_log("Info: 'mariadb' PDO-Treiber nicht direkt gefunden, verwende 'mysql' als DSN-Präfix.");
    }

    $dsn = "$dbDriver:host=" . DB_HOST . ";dbname=" . DB_NAME . ";charset=" . DB_CHARSET;
    $pdo = new PDO($dsn, DB_USER, DB_PASS);
    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
    $pdo->setAttribute(PDO::ATTR_DEFAULT_FETCH_MODE, PDO::FETCH_ASSOC);
} catch (PDOException $e) {
    // Im Falle eines Fehlers die Fehlermeldung ausgeben
    // In einer Produktionsumgebung sollte man diese Fehlermeldung loggen und dem Benutzer eine generische Fehlermeldung zeigen.
    error_log("Database Connection Error: " . $e->getMessage());
    die("Datenbankverbindung fehlgeschlagen: " . $e->getMessage());
}

// Beispiel einer Funktion, die die PDO-Instanz zurückgibt (optional, wenn $pdo global ist)
function getDbConnection(): PDO {
    global $pdo;
    return $pdo;
}
?>

==================================================
DATEINAME: src/include/email.php
--------------------------------------------------
<?php
// include/email.php

/**
 * E-Mail-Funktionen unter Verwendung von PHPMailer.
 *
 * Bindet die sensible Konfiguration ein und stellt eine Funktion zum Senden von E-Mails bereit.
 */

// Diese Zeilen sind gut für die Entwicklung, um PHP-Fehler anzuzeigen.
// In einer Produktionsumgebung sollten diese Zeilen entfernt oder entsprechend angepasst werden,
// um Fehler in Log-Dateien zu schreiben und nicht direkt anzuzeigen.
ini_set('display_errors', 1);
ini_set('display_startup_errors', 1);
error_reporting(E_ALL);

// Sensible Konfiguration einbinden
require_once ROOT_PATH . 'config/sensitive_config.php';
require_once ROOT_PATH . 'include/db.php'; // Stelle sicher, dass die DB-Verbindung hier verfügbar ist

// Composer Autoload einbinden. Dies lädt PHPMailer und andere Bibliotheken.
require_once ROOT_PATH . 'vendor/autoload.php';

use PHPMailer\PHPMailer\PHPMailer;
use PHPMailer\PHPMailer\Exception;

if (!function_exists('sendAppEmail')) {
    /**
     * Sendet eine E-Mail über die konfigurierte SMTP-Verbindung mit einem HTML-Template
     * und protokolliert den Versand in der Datenbank.
     *
     * @param string $to Empfänger-E-Mail-Adresse
     * @param string $subject Betreff der E-Mail
     * @param string $message Der Inhalt der E-Mail (HTML wird erwartet)
     * @param int|null $orderId Optionale Bestell-ID, falls E-Mail zu einer Bestellung gehört
     * @return bool|string True bei Erfolg, Fehlermeldung als String bei Fehler
     */
    function sendAppEmail(string $to, string $subject, string $message, ?int $orderId = null)
    {
        global $pdo; // Datenbankverbindung nutzen
        $mail = new PHPMailer(true);

        $logStatus = 'failed';
        $logErrorMessage = null;

        try {
            // Server-Einstellungen
            $mail->isSMTP();
            $mail->Host       = MAIL_HOST;
            $mail->SMTPAuth   = true;
            $mail->Username   = MAIL_USERNAME;
            $mail->Password   = MAIL_PASSWORD;

            if (defined('MAIL_ENCRYPTION')) {
                switch (strtolower(MAIL_ENCRYPTION)) {
                    case 'ssl':
                        $mail->SMTPSecure = PHPMailer::ENCRYPTION_SMTPS;
                        break;
                    case 'tls':
                    default:
                        $mail->SMTPSecure = PHPMailer::ENCRYPTION_STARTTLS;
                        break;
                }
            } else {
                $mail->SMTPSecure = PHPMailer::ENCRYPTION_STARTTLS;
            }

            $mail->Port       = MAIL_PORT;

            $fromEmail = MAIL_FROM_EMAIL;
            $atPos = strrpos($fromEmail, '@');
            if ($atPos !== false) {
                $usernamePart = substr($fromEmail, 0, $atPos);
                $domainPart = substr($fromEmail, $atPos + 1);
                if (function_exists('idn_to_ascii')) {
                    $punycodeDomain = idn_to_ascii($domainPart, IDNA_NONTRANSITIONAL_TO_ASCII, INTL_IDNA_VARIANT_UTS46);
                    if ($punycodeDomain !== false) {
                        $fromEmail = $usernamePart . '@' . $punycodeDomain;
                    } else {
                        error_log("Warnung: idn_to_ascii konnte die Domain '{$domainPart}' nicht in Punycode umwandeln.");
                    }
                } else {
                    error_log("Warnung: PHP intl Erweiterung nicht geladen. 'From'-Adresse könnte Probleme mit Sonderzeichen verursachen.");
                }
            }

            $mail->setFrom($fromEmail, MAIL_FROM_NAME);
            $mail->addAddress($to);

            // Inhalt
            $mail->CharSet = 'UTF-8';
            $mail->isHTML(true);
            $mail->Subject = $subject;
            $messageWithCss = '
            <!DOCTYPE html>
            <html>
            <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <style>
            body { font-family: Arial, sans-serif; margin: 0; padding: 0; background-color: #f4f4f4; color: #333333; }
            .container { width: 100%; max-width: 600px; margin: 0 auto; padding: 20px; text-align: center; background-color: #ffffff; box-shadow: 0px 2px 5px rgba(0, 0, 0, 0.1); border-radius: 8px; }
            .message-box { border: 1px solid #e0e0e0; padding: 20px; border-radius: 5px; background-color: #ffffff; text-align: left; line-height: 1.6; }
            p { margin-bottom: 1em; }
            </style>
            </head>
            <body>
            <div class="container">
                <div class="message-box">
                    ' . $message . '
                </div>
            </div>
            </body>
            </html>
            ';
            $mail->Body = $messageWithCss;
            $mail->AltBody = strip_tags($message);

            $mail->send();
            $logStatus = 'sent';
            return true;

        } catch (Exception $e) {
            $logErrorMessage = $mail->ErrorInfo;
            error_log("E-Mail konnte nicht gesendet werden. Mailer Error: {$logErrorMessage}");
            return "E-Mail konnte nicht gesendet werden. Mailer Error: {$logErrorMessage}";
        } finally {
            // E-Mail-Versand protokollieren
            if (isset($pdo)) {
                try {
                    $stmtLog = $pdo->prepare("INSERT INTO email_logs (to_email, subject, body_snippet, status, error_message, order_id) VALUES (:to_email, :subject, :body_snippet, :status, :error_message, :order_id)");
                    $stmtLog->execute([
                        ':to_email' => $to,
                        ':subject' => $subject,
                        ':body_snippet' => substr(strip_tags($message), 0, 500) . '...', // Snippet des Inhalts
                        ':status' => $logStatus,
                        ':error_message' => $logErrorMessage,
                        ':order_id' => $orderId
                    ]);
                } catch (PDOException $e) {
                    error_log("Fehler beim Protokollieren der E-Mail in der Datenbank: " . $e->getMessage());
                }
            } else {
                error_log("PDO-Verbindung nicht verfügbar für E-Mail-Protokollierung.");
            }
        }
    }
}

==================================================
DATEINAME: src/include/helpers.php
--------------------------------------------------
<?php
// include/helpers.php

/**
 * Formatiert einen Betrag in Euro mit spezifischen Regeln für Nachkommastellen.
 * Zeigt zwei Nachkommastellen nur an, wenn sie nicht .00 sind.
 *
 * @param float $amount Der zu formatierende Betrag.
 * @return string Der formatierte Betrag mit Euro-Symbol.
 */
if (!function_exists('formatEuroCurrency')) {
    function formatEuroCurrency(float $amount): string {
        // Überprüfen, ob der Betrag ganze Zahlen hat (keine Nachkommastellen oder .00)
        if (fmod($amount, 1.0) == 0) {
            return number_format($amount, 0, ',', '.') . ' €';
        } else {
            // Andernfalls mit zwei Nachkommastellen formatieren
            return number_format($amount, 2, ',', '.') . ' €';
        }
    }
}

==================================================
DATEINAME: src/include/loader.php
--------------------------------------------------
<?php
// include/loader.php
// Dieser Loader bindet alle anderen .php-Dateien im aktuellen Verzeichnis ('include'-Ordner) ein.

$include_dir = __DIR__; // Das aktuelle Verzeichnis (der 'include'-Ordner)

foreach (glob($include_dir . '/*.php') as $filename) {
    // Sicherstellen, dass der Loader sich nicht selbst einbindet
    if (basename($filename) !== 'loader.php') {
        require_once $filename;
    }
}
?>

==================================================
DATEINAME: src/include/startup.php
--------------------------------------------------
<?php
// include/startup.php

/**
 * Initialisierungs-Einstellungen für die Anwendung.
 */

// Fehlerberichterstattung aktivieren für die Entwicklung
ini_set('display_errors', 1);
ini_set('display_startup_errors', 1);
error_reporting(E_ALL);
?>

==================================================
DATEINAME: src/modules/404.php
--------------------------------------------------
    <div class="container">
        <h1>Uups! Seite nicht gefunden (Fehler 404)</h1>
        <p>Es tut uns leid, aber die von Ihnen angeforderte Seite scheint sich auf eine kleine Reise begeben zu haben oder existiert nicht mehr. Keine Sorge, das passiert den Besten!</p>
        <p>Bitte überprüfen Sie die URL noch einmal auf Tippfehler oder versuchen Sie es mit einer der folgenden Optionen:</p>
        <div class="suggestions">
            <h3>Wie geht es weiter?</h3>
            <ul>
                <li>Gehen Sie zurück zur <a href="/">Startseite</a>.</li>
                <li>Kontaktieren Sie uns, wenn Sie weiterhin Probleme haben: <a href="/kontakt">Kontaktformular</a>.</li>
            </ul>
        </div>
    </div>

==================================================
DATEINAME: src/modules/admin.php
--------------------------------------------------
<?php
// modules/admin.php

// Session starten, falls nicht bereits geschehen
if (session_status() == PHP_SESSION_NONE) {
    session_start();
}

// Benötigte Konfiguration und Funktionen laden
require_once ROOT_PATH . 'config/sensitive_config.php';
require_once ROOT_PATH . 'include/db.php'; // Für getDbConnection() und $pdo
require_once ROOT_PATH . 'include/email.php'; // Für sendAppEmail() und formatEuroCurrency (oder besser in Helpers auslagern)

// Helper-Funktion für Euro-Formatierung (muss hier verfügbar sein)
if (!function_exists('formatEuroCurrency')) {
    function formatEuroCurrency(float $amount): string {
        if (fmod($amount, 1.0) == 0) {
            return number_format($amount, 0, ',', '.') . ' €';
        } else {
            return number_format($amount, 2, ',', '.') . ' €';
        }
    }
}

global $pdo; // Sicherstellen, dass $pdo verfügbar ist
if (!isset($pdo)) {
    $pdo = getDbConnection();
}

// --- GLOBALE VARIABLEN ---
$isAdminLoggedIn = (isset($_SESSION['admin_logged_in']) && $_SESSION['admin_logged_in'] === true);
$loginError = '';
$currentSection = $_GET['section'] ?? 'dashboard';
$actionStatus = $_GET['status'] ?? ''; // Für Erfolgs-/Fehlermeldungen nach Aktionen
$actionMessage = $_GET['msg'] ?? ''; // Zusätzliche Nachricht bei Fehlern

// --- VORVERARBEITUNG VON POST- UND GET-ANFRAGEN (VOR JEDER HTML-AUSGABE) ---

// 1. Logout-Logik (GET-Anfrage)
if (isset($_GET['action']) && $_GET['action'] === 'logout') {
    session_destroy();
    header('Location: /admin'); // Redirect zur Login-Seite
    exit();
}

// 2. Login-Logik (POST-Anfrage)
if (isset($_POST['admin_password']) && !$isAdminLoggedIn) {
    if (password_verify($_POST['admin_password'], ADMIN_PASSWORD_HASH)) {
        $_SESSION['admin_logged_in'] = true;
        // Redirect nach erfolgreichem Login, um POST-Daten zu vermeiden
        header('Location: /admin');
        exit();
    } else {
        $loginError = 'Falsches Passwort.';
    }
}

// 3. Verarbeite Admin-Aktionen (Hinzufügen, Bearbeiten, Löschen) NACHDEM der Login überprüft wurde
if ($isAdminLoggedIn && $_SERVER['REQUEST_METHOD'] === 'POST') {
    $id = (int)($_GET['id'] ?? 0); // Allgemeine ID für Aktionen
    $action = $_GET['action'] ?? '';

    try {
        switch ($currentSection) {
            case 'orders':
                if (isset($_POST['update_order']) && $id > 0) {
                    $newStatus = $_POST['status'];

                    // Alten Status abrufen
                    $stmtOldStatus = $pdo->prepare("SELECT o.status, u.email, u.first_name, u.last_name FROM orders o JOIN users u ON o.user_id = u.user_id WHERE o.order_id = :id");
                    $stmtOldStatus->execute([':id' => $id]);
                    $oldOrderInfo = $stmtOldStatus->fetch();

                    if ($oldOrderInfo && $oldOrderInfo['status'] !== $newStatus) { // Nur senden, wenn Status sich wirklich ändert
                        $stmtUpdate = $pdo->prepare("UPDATE orders SET status = :status WHERE order_id = :id");
                        $stmtUpdate->execute([':status' => $newStatus, ':id' => $id]);

                        // E-Mail an den Kunden senden
                        $customerEmail = $oldOrderInfo['email'];
                        $customerName = $oldOrderInfo['first_name'] . ' ' . $oldOrderInfo['last_name'];
                        $emailSubject = "Status Ihrer Bestellung #{$id} bei " . MAIL_FROM_NAME . " aktualisiert";
                        $emailBody = "
                            <p>Hallo {$customerName},</p>
                            <p>der Status Ihrer Bestellung mit der Nummer <strong>#{$id}</strong> wurde aktualisiert.</p>
                            <p>Alter Status: <strong>" . htmlspecialchars(ucfirst($oldOrderInfo['status'])) . "</strong></p>
                            <p>Neuer Status: <strong>" . htmlspecialchars(ucfirst($newStatus)) . "</strong></p>
                            <p>Sie können den aktuellen Status Ihrer Bestellungen jederzeit in Ihrem Kundenkonto einsehen.</p>
                            <p>Vielen Dank für Ihr Vertrauen!</p>
                            <p>Mit freundlichen Grüssen,<br>Ihr Team von " . MAIL_FROM_NAME . "</p>";

                        sendAppEmail($customerEmail, $emailSubject, $emailBody, $id);
                        header('Location: ?section=orders&status=success&msg=' . urlencode('Bestellstatus erfolgreich aktualisiert.'));
                    } else {
                        header('Location: ?section=orders&status=success&msg=' . urlencode('Bestellstatus war bereits aktuell. Keine Änderung vorgenommen.'));
                    }
                    exit();
                }
                break;

            case 'customers':
                if (isset($_POST['update_customer']) && $id > 0) {
                    $firstName = $_POST['first_name'];
                    $lastName = $_POST['last_name'];
                    $email = $_POST['email'];
                    $phone = $_POST['phone_number'];
                    $stmtUpdate = $pdo->prepare("UPDATE users SET first_name = :first_name, last_name = :last_name, email = :email, phone_number = :phone_number, updated_at = CURRENT_TIMESTAMP WHERE user_id = :id");
                    $stmtUpdate->execute([
                        ':first_name' => $firstName,
                        ':last_name' => $lastName,
                        ':email' => $email,
                        ':phone_number' => $phone,
                        ':id' => $id
                    ]);
                    header('Location: ?section=customers&status=success');
                    exit();
                }
                break;

            case 'payments':
                if (isset($_POST['add_payment'])) {
                    $order_id = (int)$_POST['order_id'];
                    $payment_date = $_POST['payment_date'];
                    $amount = (float)$_POST['amount'];
                    $payment_method = $_POST['payment_method'];
                    $transaction_id = $_POST['transaction_id'] ?: null;
                    $status = $_POST['status'];
                    $notes = $_POST['notes'] ?: null;

                    // Überprüfen, ob die Bestell-ID existiert
                    $stmtOrderCheck = $pdo->prepare("SELECT COUNT(*) FROM orders WHERE order_id = :order_id");
                    $stmtOrderCheck->execute([':order_id' => $order_id]);
                    if ($stmtOrderCheck->fetchColumn() == 0) {
                        throw new Exception("Bestell-ID existiert nicht.");
                    }

                    $stmt = $pdo->prepare("INSERT INTO payments (order_id, payment_date, amount, payment_method, transaction_id, status, notes) VALUES (:order_id, :payment_date, :amount, :payment_method, :transaction_id, :status, :notes)");
                    $stmt->execute([
                        ':order_id' => $order_id,
                        ':payment_date' => $payment_date,
                        ':amount' => $amount,
                        ':payment_method' => $payment_method,
                        ':transaction_id' => $transaction_id,
                        ':status' => $status,
                        ':notes' => $notes
                    ]);

                    // E-Mail an den Kunden senden, wenn Zahlung abgeschlossen
                    if ($status === 'completed') {
                        $stmtOrderUser = $pdo->prepare("SELECT u.email, u.first_name, u.last_name, o.total_amount FROM orders o JOIN users u ON o.user_id = u.user_id WHERE o.order_id = :order_id");
                        $stmtOrderUser->execute([':order_id' => $order_id]);
                        $orderUserInfo = $stmtOrderUser->fetch();

                        if ($orderUserInfo) {
                            $customerEmail = $orderUserInfo['email'];
                            $customerName = $orderUserInfo['first_name'] . ' ' . $orderUserInfo['last_name'];
                            $emailSubject = "Zahlung für Bestellung #{$order_id} bei " . MAIL_FROM_NAME . " eingegangen";
                            $emailBody = "
                                <p>Hallo {$customerName},</p>
                                <p>wir freuen uns, Ihnen mitteilen zu können, dass Ihre Zahlung von <strong>" . formatEuroCurrency($amount) . "</strong> für die Bestellung <strong>#{$order_id}</strong> erfolgreich bearbeitet und als 'Abgeschlossen' markiert wurde.</p>
                                <p>Gesamtbetrag der Bestellung: <strong>" . formatEuroCurrency($orderUserInfo['total_amount']) . "</strong></p>
                                <p>Wir bedanken uns für Ihre Bestellung!</p>
                                <p>Mit freundlichen Grüssen,<br>Ihr Team von " . MAIL_FROM_NAME . "</p>";

                            sendAppEmail($customerEmail, $emailSubject, $emailBody, $order_id);
                        }
                    }

                    // Redirect zurück zur Zahlungsliste oder zur Bestelldetailseite, wenn von dort gekommen
                    if (isset($_POST['return_to_order_id']) && (int)$_POST['return_to_order_id'] === $order_id) {
                         header('Location: ?section=orders&action=edit&id=' . $order_id . '&status=success&msg=' . urlencode('Zahlung erfolgreich hinzugefügt.'));
                    } else {
                        header('Location: ?section=payments&status=success');
                    }
                    exit();
                } elseif (isset($_POST['update_payment']) && $id > 0) {
                    // Alten Zahlungsstatus abrufen und User-Info holen
                    $stmtOldPayment = $pdo->prepare("SELECT p.status, p.order_id, u.email, u.first_name, u.last_name, o.total_amount FROM payments p JOIN orders o ON p.order_id = o.order_id JOIN users u ON o.user_id = u.user_id WHERE p.payment_id = :id");
                    $stmtOldPayment->execute([':id' => $id]);
                    $oldPaymentInfo = $stmtOldPayment->fetch();

                    $payment_date = $_POST['payment_date'];
                    $amount = (float)$_POST['amount'];
                    $payment_method = $_POST['payment_method'];
                    $transaction_id = $_POST['transaction_id'] ?: null;
                    $status = $_POST['status'];
                    $notes = $_POST['notes'] ?: null;

                    $stmtUpdate = $pdo->prepare("UPDATE payments SET payment_date = :payment_date, amount = :amount, payment_method = :payment_method, transaction_id = :transaction_id, status = :status, notes = :notes WHERE payment_id = :id");
                    $stmtUpdate->execute([
                        ':payment_date' => $payment_date,
                        ':amount' => $amount,
                        ':payment_method' => $payment_method,
                        ':transaction_id' => $transaction_id,
                        ':status' => $status,
                        ':notes' => $notes,
                        ':id' => $id
                    ]);

                    // E-Mail an den Kunden senden, wenn der Status sich geändert hat (besonders wichtig bei 'completed')
                    if ($oldPaymentInfo && $oldPaymentInfo['status'] !== $status) {
                        $customerEmail = $oldPaymentInfo['email'];
                        $customerName = $oldPaymentInfo['first_name'] . ' ' . $oldPaymentInfo['last_name'];
                        $orderId = $oldPaymentInfo['order_id'];
                        $emailSubject = "Status Ihrer Zahlung #{$id} für Bestellung #{$orderId} bei " . MAIL_FROM_NAME . " aktualisiert";
                        $emailBody = "
                            <p>Hallo {$customerName},</p>
                            <p>der Status Ihrer Zahlung mit der ID <strong>#{$id}</strong> für die Bestellung <strong>#{$orderId}</strong> wurde aktualisiert.</p>
                            <p>Alter Status: <strong>" . htmlspecialchars(ucfirst($oldPaymentInfo['status'])) . "</strong></p>
                            <p>Neuer Status: <strong>" . htmlspecialchars(ucfirst($status)) . "</strong></p>
                            <p>Betrag der Zahlung: <strong>" . formatEuroCurrency($amount) . "</strong></p>
                            <p>Bei Rückfragen stehen wir Ihnen gerne zur Verfügung.</p>
                            <p>Mit freundlichen Grüssen,<br>Ihr Team von " . MAIL_FROM_NAME . "</p>";

                        sendAppEmail($customerEmail, $emailSubject, $emailBody, $orderId);
                    }

                    header('Location: ?section=payments&status=success');
                    exit();
                } elseif (isset($_POST['delete_payment']) && $id > 0) {
                     $stmt = $pdo->prepare("DELETE FROM payments WHERE payment_id = :id");
                     $stmt->execute([':id' => $id]);
                     // Optional: E-Mail senden, dass Zahlung storniert/gelöscht wurde.
                     header('Location: ?section=payments&status=success');
                     exit();
                }
                break;

            case 'products':
                if (isset($_POST['add_product'])) {
                    $stmt = $pdo->prepare("INSERT INTO products (name, description, price, stock_quantity, image_url, category_id, is_active) VALUES (:name, :description, :price, :stock_quantity, :image_url, :category_id, :is_active)");
                    $stmt->execute([
                        ':name' => $_POST['name'],
                        ':description' => $_POST['description'],
                        ':price' => $_POST['price'],
                        ':stock_quantity' => $_POST['stock_quantity'],
                        ':image_url' => $_POST['image_url'],
                        ':category_id' => $_POST['category_id'],
                        ':is_active' => isset($_POST['is_active']) ? 1 : 0
                    ]);
                    header('Location: ?section=products&status=success');
                    exit();
                } elseif (isset($_POST['update_product']) && $id > 0) {
                    $stmt = $pdo->prepare("UPDATE products SET name = :name, description = :description, price = :price, stock_quantity = :stock_quantity, image_url = :image_url, category_id = :category_id, is_active = :is_active, updated_at = CURRENT_TIMESTAMP WHERE product_id = :id");
                    $stmt->execute([
                        ':name' => $_POST['name'],
                        ':description' => $_POST['description'],
                        ':price' => $_POST['price'],
                        ':stock_quantity' => $_POST['stock_quantity'],
                        ':image_url' => $_POST['image_url'],
                        ':category_id' => $_POST['category_id'],
                        ':is_active' => isset($_POST['is_active']) ? 1 : 0,
                        ':id' => $id
                    ]);
                    header('Location: ?section=products&status=success');
                    exit();
                } elseif (isset($_POST['delete_product']) && $id > 0) {
                     $stmt = $pdo->prepare("DELETE FROM products WHERE product_id = :id");
                     $stmt->execute([':id' => $id]);
                     header('Location: ?section=products&status=success');
                     exit();
                }
                break;

            case 'categories':
                if (isset($_POST['add_category'])) {
                    $stmt = $pdo->prepare("INSERT INTO categories (name, description) VALUES (:name, :description)");
                    $stmt->execute([
                        ':name' => $_POST['name'],
                        ':description' => $_POST['description']
                    ]);
                    header('Location: ?section=categories&status=success');
                    exit();
                } elseif (isset($_POST['update_category']) && $id > 0) {
                    $stmt = $pdo->prepare("UPDATE categories SET name = :name, description = :description, updated_at = CURRENT_TIMESTAMP WHERE category_id = :id");
                    $stmt->execute([
                        ':name' => $_POST['name'],
                        ':description' => $_POST['description'],
                        ':id' => $id
                    ]);
                    header('Location: ?section=categories&status=success');
                    exit();
                } elseif (isset($_POST['delete_category']) && $id > 0) {
                    $stmtCheck = $pdo->prepare("SELECT COUNT(*) FROM products WHERE category_id = :id");
                    $stmtCheck->execute([':id' => $id]);
                    if ($stmtCheck->fetchColumn() > 0) {
                        throw new Exception("Kategorie kann nicht gelöscht werden, da noch Produkte zugeordnet sind.");
                    }
                     $stmt = $pdo->prepare("DELETE FROM categories WHERE category_id = :id");
                     $stmt->execute([':id' => $id]);
                     header('Location: ?section=categories&status=success');
                     exit();
                }
                break;

            case 'pickup_dates':
                if (isset($_POST['add_pickup_date'])) {
                    $stmt = $pdo->prepare("INSERT INTO pickup_dates (pickup_datetime, location, is_active, notes) VALUES (:pickup_datetime, :location, :is_active, :notes)");
                    $stmt->execute([
                        ':pickup_datetime' => $_POST['pickup_datetime'],
                        ':location' => $_POST['location'],
                        ':is_active' => isset($_POST['is_active']) ? 1 : 0,
                        ':notes' => $_POST['notes']
                    ]);
                    header('Location: ?section=pickup_dates&status=success');
                    exit();
                } elseif (isset($_POST['update_pickup_date']) && $id > 0) {
                    $stmt = $pdo->prepare("UPDATE pickup_dates SET pickup_datetime = :pickup_datetime, location = :location, is_active = :is_active, notes = :notes, updated_at = CURRENT_TIMESTAMP WHERE pickup_date_id = :id");
                    $stmt->execute([
                        ':pickup_datetime' => $_POST['pickup_datetime'],
                        ':location' => $_POST['location'],
                        ':is_active' => isset($_POST['is_active']) ? 1 : 0,
                        ':notes' => $_POST['notes'],
                        ':id' => $id
                    ]);
                    header('Location: ?section=pickup_dates&status=success');
                    exit();
                } elseif (isset($_POST['delete_pickup_date']) && $id > 0) {
                     $stmt = $pdo->prepare("DELETE FROM pickup_dates WHERE pickup_date_id = :id");
                     $stmt->execute([':id' => $id]);
                     header('Location: ?section=pickup_dates&status=success');
                     exit();
                }
                break;
        }
    } catch (Exception $e) {
        error_log("Admin-Aktion Fehler: " . $e->getMessage());
        header('Location: ?section=' . $currentSection . '&status=error&msg=' . urlencode($e->getMessage()));
        exit();
    }
}

// --- HTML-AUSGABE STARTET HIER ---

// Wenn nicht eingeloggt, zeige Login-Formular
if (!$isAdminLoggedIn) {
    ?>
    <style>
        body { font-family: Arial, sans-serif; background-color: #f0f2f5; display: flex; justify-content: center; align-items: center; min-height: 100vh; margin: 0; }
        .login-container { background-color: #fff; padding: 30px; border-radius: 8px; box-shadow: 0 4px 10px rgba(0,0,0,0.1); text-align: center; width: 350px; }
        .login-container h2 { margin-bottom: 25px; color: #333; }
        .login-container input[type="password"] { width: calc(100% - 24px); padding: 12px; margin-bottom: 20px; border: 1px solid #ddd; border-radius: 6px; font-size: 1em; }
        .login-container button { background-color: #4285f4; color: white; padding: 12px 25px; border: none; border-radius: 6px; cursor: pointer; font-size: 1em; transition: background-color 0.2s ease; }
        .login-container button:hover { background-color: #357ae8; }
        .login-container .error { color: #e44d26; margin-bottom: 15px; }
    </style>
    <div class="login-container">
        <h2>Admin Login</h2>
        <?php if ($loginError): ?>
            <p class="error"><?php echo htmlspecialchars($loginError); ?></p>
        <?php endif; ?>
        <form method="POST">
            <input type="password" name="admin_password" placeholder="Passwort" required>
            <button type="submit">Login</button>
        </form>
    </div>
    <?php
    exit(); // Beende Skript, wenn nicht eingeloggt
}

// CSS für die Admin-Seite (nur anzeigen, wenn eingeloggt)
// Dieses CSS wird durch index.php oder template/header.php über assets/main.css geladen
// HINWEIS: Bei der Umstellung auf Variablen in main.css könnte dieser inline-style Block entfernt werden.
?>

<div class="admin-container">
    <div class="admin-sidebar">
        <h2>Admin Panel</h2>
        <ul>
            <li><a href="?section=dashboard" class="<?php echo ($currentSection == 'dashboard' ? 'active' : ''); ?>">Dashboard</a></li>
            <li><a href="?section=orders" class="<?php echo ($currentSection == 'orders' ? 'active' : ''); ?>">Bestellungen</a></li>
            <li><a href="?section=customers" class="<?php echo ($currentSection == 'customers' ? 'active' : ''); ?>">Kunden</a></li>
            <li><a href="?section=payments" class="<?php echo ($currentSection == 'payments' ? 'active' : ''); ?>">Zahlungen</a></li>
            <li><a href="?section=products" class="<?php echo ($currentSection == 'products' ? 'active' : ''); ?>">Produkte</a></li>
            <li><a href="?section=categories" class="<?php echo ($currentSection == 'categories' ? 'active' : ''); ?>">Kategorien</a></li>
            <li><a href="?section=pickup_dates" class="<?php echo ($currentSection == 'pickup_dates' ? 'active' : ''); ?>">Abholtermine</a></li>
            <li><a href="?section=email_logs" class="<?php echo ($currentSection == 'email_logs' ? 'active' : ''); ?>">E-Mail Logs</a></li>
            <li><a href="?action=logout">Logout</a></li>
        </ul>
    </div>
    <div class="admin-content">
        <h1><?php echo ucfirst(str_replace('_', ' ', $currentSection)); ?> Verwaltung</h1>

        <?php if ($actionStatus === 'success'): ?>
            <div class="alert success"><?php echo htmlspecialchars($actionMessage ?: 'Aktion erfolgreich ausgeführt.'); ?></div>
        <?php elseif ($actionStatus === 'error'): ?>
            <div class="alert error"><?php echo htmlspecialchars($actionMessage ?: 'Fehler bei der Aktion.'); ?></div>
        <?php endif; ?>

        <?php
        switch ($currentSection) {
            case 'dashboard':
                // Dashboard-Statistiken abrufen
                $totalOrders = $pdo->query("SELECT COUNT(*) FROM orders")->fetchColumn();
                $pendingOrders = $pdo->query("SELECT COUNT(*) FROM orders WHERE status = 'pending'")->fetchColumn();
                $totalCustomers = $pdo->query("SELECT COUNT(*) FROM users")->fetchColumn();
                $totalProducts = $pdo->query("SELECT COUNT(*) FROM products")->fetchColumn();

                // Umsatzstatistiken
                $totalExpectedIncome = $pdo->query("SELECT SUM(total_amount) FROM orders")->fetchColumn();
                // Summe aller abgeschlossenen Zahlungen
                $totalReceivedIncome = $pdo->query("SELECT SUM(amount) FROM payments WHERE status = 'completed'")->fetchColumn();
                $totalOutstanding = $totalExpectedIncome - $totalReceivedIncome;

                ?>
                <div class="dashboard-stats">
                    <div class="stat-card">
                        <h3>Gesamtbestellungen</h3>
                        <p><?php echo $totalOrders; ?></p>
                    </div>
                    <div class="stat-card">
                        <h3>Offene Bestellungen</h3>
                        <p><?php echo $pendingOrders; ?></p>
                    </div>
                    <div class="stat-card">
                        <h3>Registrierte Kunden</h3>
                        <p><?php echo $totalCustomers; ?></p>
                    </div>
                    <div class="stat-card">
                        <h3>Verfügbare Produkte</h3>
                        <p><?php echo $totalProducts; ?></p>
                    </div>
                </div>

                <h3>Finanzübersicht</h3>
                <div class="dashboard-stats">
                    <div class="stat-card">
                        <h3>Erwarteter Umsatz</h3>
                        <p><?php echo formatEuroCurrency($totalExpectedIncome); ?></p>
                    </div>
                    <div class="stat-card">
                        <h3>Eingegangener Umsatz</h3>
                        <p><?php echo formatEuroCurrency($totalReceivedIncome); ?></p>
                    </div>
                    <div class="stat-card <?php echo ($totalOutstanding > 0 ? 'income-negative' : 'income-positive'); ?>">
                        <h3>Offener Betrag</h3>
                        <p><?php echo formatEuroCurrency($totalOutstanding); ?></p>
                    </div>
                </div>

                <h3>Umsatzentwicklung (Platzhalter für Grafik)</h3>
                <div class="chart-container">
                    <canvas id="incomeChart" style="display: none;"></canvas>
                    <p id="chartFallback">Lade Grafik...</p>
                    <pre style="display: none;" id="chartData">
                        <?php
                        // Beispiel-Daten für eine Grafik (würden normalerweise komplexer abgefragt)
                        $monthlySales = $pdo->query("
                            SELECT
                                DATE_FORMAT(order_date, '%Y-%m') as month,
                                SUM(total_amount) as total_ordered
                            FROM orders
                            GROUP BY month
                            ORDER BY month ASC
                            LIMIT 12 -- Letzte 12 Monate
                        ")->fetchAll();

                        $monthlyPayments = $pdo->query("
                            SELECT
                                DATE_FORMAT(payment_date, '%Y-%m') as month,
                                SUM(amount) as total_paid
                            FROM payments
                            WHERE status = 'completed'
                            GROUP BY month
                            ORDER BY month ASC
                            LIMIT 12
                        ")->fetchAll();

                        $chartLabels = [];
                        $chartOrderedData = [];
                        $chartPaidData = [];

                        // Monate der letzten 12 Monate generieren
                        $period = new DatePeriod(
                            new DateTime('-11 months first day of this month'),
                            new DateInterval('P1M'),
                            new DateTime('first day of next month')
                        );

                        $allMonths = [];
                        foreach ($period as $dt) {
                            $allMonths[$dt->format('Y-m')] = 0;
                        }

                        // Daten zusammenführen
                        $mergedSales = $allMonths;
                        foreach ($monthlySales as $sale) {
                            $mergedSales[$sale['month']] = (float)$sale['total_ordered'];
                        }
                        $mergedPayments = $allMonths;
                        foreach ($monthlyPayments as $payment) {
                            $mergedPayments[$payment['month']] = (float)$payment['total_paid'];
                        }

                        foreach ($mergedSales as $month => $total) {
                            $chartLabels[] = (new DateTime($month . '-01'))->format('M Y');
                            $chartOrderedData[] = $total;
                            $chartPaidData[] = $mergedPayments[$month] ?? 0; // Sicherstellen, dass ein Wert existiert
                        }

                        echo json_encode([
                            'labels' => $chartLabels,
                            'ordered' => $chartOrderedData,
                            'paid' => $chartPaidData
                        ]);
                        ?>
                    </pre>
                    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
                    <script>
                        document.addEventListener('DOMContentLoaded', function() {
                            const chartDataElement = document.getElementById('chartData');
                            const chartFallback = document.getElementById('chartFallback');
                            const canvas = document.getElementById('incomeChart');

                            if (chartDataElement && canvas) {
                                try {
                                    const chartConfig = JSON.parse(chartDataElement.textContent);

                                    if (chartConfig.labels && chartConfig.labels.length > 0) {
                                        chartFallback.style.display = 'none';
                                        canvas.style.display = 'block';

                                        const ctx = canvas.getContext('2d');
                                        new Chart(ctx, {
                                            type: 'bar',
                                            data: {
                                                labels: chartConfig.labels,
                                                datasets: [
                                                    {
                                                        label: 'Erwarteter Umsatz',
                                                        data: chartConfig.ordered,
                                                        backgroundColor: 'rgba(52, 104, 192, 0.7)', // var(--color-primary)
                                                        borderColor: 'rgba(52, 104, 192, 1)',
                                                        borderWidth: 1
                                                    },
                                                    {
                                                        label: 'Eingegangener Umsatz',
                                                        data: chartConfig.paid,
                                                        backgroundColor: 'rgba(0, 191, 99, 0.7)', // var(--color-secondary)
                                                        borderColor: 'rgba(0, 191, 99, 1)',
                                                        borderWidth: 1
                                                    }
                                                ]
                                            },
                                            options: {
                                                responsive: true,
                                                maintainAspectRatio: false,
                                                scales: {
                                                    y: {
                                                        beginAtZero: true,
                                                        title: {
                                                            display: true,
                                                            text: 'Betrag (€)'
                                                        }
                                                    },
                                                    x: {
                                                        title: {
                                                            display: true,
                                                            text: 'Monat'
                                                        }
                                                    }
                                                }
                                            }
                                        });
                                    } else {
                                        chartFallback.textContent = 'Keine Umsatzdaten für die Darstellung verfügbar.';
                                    }
                                } catch (e) {
                                    console.error("Fehler beim Parsen der Chart-Daten oder Initialisieren von Chart.js:", e);
                                    chartFallback.textContent = 'Fehler beim Laden der Grafikdaten.';
                                }
                            } else {
                                chartFallback.textContent = 'Chart-Container oder Daten nicht gefunden.';
                            }
                        });
                    </script>
                </div>
                <?php
                break;

            case 'orders':
                $orderIdToEdit = (int)($_GET['id'] ?? 0);
                $action = $_GET['action'] ?? '';

                if ($action === 'edit' && $orderIdToEdit > 0) {
                    $stmtEdit = $pdo->prepare("SELECT o.*, u.first_name, u.last_name, u.email, u.phone_number, pd.pickup_datetime, pd.location FROM orders o JOIN users u ON o.user_id = u.user_id LEFT JOIN pickup_dates pd ON o.pickup_date_id = pd.pickup_date_id WHERE o.order_id = :id");
                    $stmtEdit->execute([':id' => $orderIdToEdit]);
                    $orderToEdit = $stmtEdit->fetch();

                    if (!$orderToEdit) {
                         echo '<p class="alert error">Bestellung nicht gefunden.</p>';
                         break;
                    }

                    // Bestelldetails abrufen
                    $stmtItems = $pdo->prepare("SELECT oi.*, p.name as product_name FROM order_items oi JOIN products p ON oi.product_id = p.product_id WHERE oi.order_id = :order_id");
                    $stmtItems->execute([':order_id' => $orderIdToEdit]);
                    $orderItems = $stmtItems->fetchAll();

                    // Zahlungen für diese Bestellung abrufen
                    $stmtPayments = $pdo->prepare("SELECT * FROM payments WHERE order_id = :order_id ORDER BY payment_date ASC");
                    $stmtPayments->execute([':order_id' => $orderIdToEdit]);
                    $orderPayments = $stmtPayments->fetchAll();

                    $totalPaid = 0;
                    foreach($orderPayments as $payment) {
                        if ($payment['status'] === 'completed') { // Nur abgeschlossene Zahlungen zählen
                            $totalPaid += $payment['amount'];
                        }
                    }
                    $outstandingAmount = $orderToEdit['total_amount'] - $totalPaid;

                    ?>
                    <div class="admin-form-container">
                        <h3>Bestellung #<?php echo htmlspecialchars($orderToEdit['order_id']); ?> Details</h3>
                        <p><strong>Kunde:</strong> <?php echo htmlspecialchars($orderToEdit['first_name'] . ' ' . $orderToEdit['last_name']); ?> (<?php echo htmlspecialchars($orderToEdit['email']); ?>)</p>
                        <p><strong>Gesamtbestellwert:</strong> <?php echo formatEuroCurrency($orderToEdit['total_amount']); ?></p>
                        <p><strong>Gesamt bezahlt:</strong> <?php echo formatEuroCurrency($totalPaid); ?></p>
                        <p><strong>Offener Betrag:</strong> <span style="color: <?php echo ($outstandingAmount > 0 ? '#dc3545' : '#28a745'); ?>; font-weight: bold;"><?php echo formatEuroCurrency($outstandingAmount); ?></span></p>
                        <p><strong>Zahlungsmethode:</strong> <?php echo htmlspecialchars(ucfirst(str_replace('_', ' ', $orderToEdit['payment_method']))); ?></p>
                        <p><strong>Abholung:</strong> <?php echo ($orderToEdit['pickup_datetime'] ? (new DateTime($orderToEdit['pickup_datetime']))->format('d.m.Y H:i') . ' Uhr - ' . htmlspecialchars($orderToEdit['location']) : 'N/A'); ?></p>

                        <h4>Bestellte Artikel:</h4>
                        <table>
                            <thead>
                                <tr>
                                    <th>Produkt</th>
                                    <th>Menge</th>
                                    <th>Einzelpreis bei Bestellung</th>
                                    <th>Summe</th>
                                </tr>
                            </thead>
                            <tbody>
                                <?php foreach ($orderItems as $item): ?>
                                    <tr>
                                        <td><?php echo htmlspecialchars($item['product_name']); ?></td>
                                        <td><?php echo htmlspecialchars($item['quantity']); ?></td>
                                        <td><?php echo formatEuroCurrency($item['price_at_order']); ?></td>
                                        <td><?php echo formatEuroCurrency($item['quantity'] * $item['price_at_order']); ?></td>
                                    </tr>
                                <?php endforeach; ?>
                            </tbody>
                        </table>

                        <h4>Zahlungen für diese Bestellung:</h4>
                        <?php if (empty($orderPayments)): ?>
                            <p>Keine Zahlungen für diese Bestellung erfasst.</p>
                        <?php else: ?>
                            <table>
                                <thead>
                                    <tr>
                                        <th>ID</th>
                                        <th>Betrag</th>
                                        <th>Datum</th>
                                        <th>Methode</th>
                                        <th>Transaktions ID</th>
                                        <th>Status</th>
                                        <th>Aktionen</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <?php foreach ($orderPayments as $payment): ?>
                                        <tr>
                                            <td><?php echo htmlspecialchars($payment['payment_id']); ?></td>
                                            <td><?php echo formatEuroCurrency($payment['amount']); ?></td>
                                            <td><?php echo (new DateTime($payment['payment_date']))->format('d.m.Y H:i'); ?></td>
                                            <td><?php echo htmlspecialchars(ucfirst(str_replace('_', ' ', $payment['payment_method']))); ?></td>
                                            <td><?php echo htmlspecialchars($payment['transaction_id'] ?: 'N/A'); ?></td>
                                            <td><?php echo htmlspecialchars(ucfirst($payment['status'])); ?></td>
                                            <td class="action-buttons">
                                                <a href="?section=payments&action=edit&id=<?php echo $payment['payment_id']; ?>" class="edit-btn">Bearbeiten</a>
                                                <form method="POST" action="?section=payments&action=delete&id=<?php echo $payment['payment_id']; ?>&return_to_order_id=<?php echo $orderToEdit['order_id']; ?>" onsubmit="return confirm('Sicher? Diese Zahlung löschen?');" style="display:inline;">
                                                    <button type="submit" name="delete_payment" class="delete-btn">Löschen</button>
                                                </form>
                                            </td>
                                        </tr>
                                    <?php endforeach; ?>
                                </tbody>
                            </table>
                        <?php endif; ?>
                        <div class="action-buttons" style="margin-top: 15px;">
                            <a href="?section=payments&action=add&order_id=<?php echo $orderToEdit['order_id']; ?>" class="add-btn">Neue Zahlung hinzufügen</a>
                        </div>


                        <h4 style="margin-top: 30px;">Bestellstatus ändern:</h4>
                        <form method="POST" action="?section=orders&action=edit&id=<?php echo $orderToEdit['order_id']; ?>">
                            <div class="form-group">
                                <label for="order_status">Status:</label>
                                <select id="order_status" name="status" required>
                                    <option value="pending" <?php echo ($orderToEdit['status'] == 'pending' ? 'selected' : ''); ?>>Ausstehend</option>
                                    <option value="confirmed" <?php echo ($orderToEdit['status'] == 'confirmed' ? 'selected' : ''); ?>>Bestätigt</option>
                                    <option value="completed" <?php echo ($orderToEdit['status'] == 'completed' ? 'selected' : ''); ?>>Abgeschlossen</option>
                                    <option value="cancelled" <?php echo ($orderToEdit['status'] == 'cancelled' ? 'selected' : ''); ?>>Storniert</option>
                                </select>
                            </div>
                            <button type="submit" name="update_order">Status aktualisieren</button>
                        </form>
                    </div>
                    <?php
                } else {
                    $stmt = $pdo->query("SELECT o.*, u.first_name, u.last_name, pd.pickup_datetime, pd.location FROM orders o JOIN users u ON o.user_id = u.user_id LEFT JOIN pickup_dates pd ON o.pickup_date_id = pd.pickup_date_id ORDER BY o.order_date DESC");
                    $orders = $stmt->fetchAll();
                    ?>
                    <table>
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>Kunde</th>
                                <th>Datum</th>
                                <th>Betrag</th>
                                <th>Status</th>
                                <th>Zahlung</th>
                                <th>Abholung</th>
                                <th>Aktionen</th>
                            </tr>
                        </thead>
                        <tbody>
                            <?php foreach ($orders as $order): ?>
                                <tr>
                                    <td><?php echo htmlspecialchars($order['order_id']); ?></td>
                                    <td><?php echo htmlspecialchars($order['first_name'] . ' ' . $order['last_name']); ?></td>
                                    <td><?php echo (new DateTime($order['order_date']))->format('d.m.Y H:i'); ?></td>
                                    <td><?php echo formatEuroCurrency($order['total_amount']); ?></td>
                                    <td><?php echo htmlspecialchars(ucfirst($order['status'])); ?></td>
                                    <td><?php echo htmlspecialchars(ucfirst(str_replace('_', ' ', $order['payment_method']))); ?></td>
                                    <td><?php echo ($order['pickup_datetime'] ? (new DateTime($order['pickup_datetime']))->format('d.m.Y H:i') . ' - ' . htmlspecialchars($order['location']) : 'N/A'); ?></td>
                                    <td class="action-buttons">
                                        <a href="?section=orders&action=edit&id=<?php echo $order['order_id']; ?>" class="edit-btn">Details/Bearbeiten</a>
                                    </td>
                                </tr>
                            <?php endforeach; ?>
                        </tbody>
                    </table>
                    <?php
                }
                break;

            case 'customers':
                $customerIdToEdit = (int)($_GET['id'] ?? 0);
                $action = $_GET['action'] ?? '';

                if ($action === 'edit' && $customerIdToEdit > 0) {
                    $stmtEdit = $pdo->prepare("SELECT * FROM users WHERE user_id = :id");
                    $stmtEdit->execute([':id' => $customerIdToEdit]);
                    $customerToEdit = $stmtEdit->fetch();

                    if (!$customerToEdit) {
                        echo '<p class="alert error">Kunde nicht gefunden.</p>';
                        break;
                    }
                    ?>
                    <div class="admin-form-container">
                        <h3>Kunde #<?php echo htmlspecialchars($customerToEdit['user_id']); ?> bearbeiten</h3>
                        <form method="POST" action="?section=customers&action=edit&id=<?php echo $customerToEdit['user_id']; ?>">
                            <div class="form-group">
                                <label for="first_name">Vorname:</label>
                                <input type="text" id="first_name" name="first_name" value="<?php echo htmlspecialchars($customerToEdit['first_name']); ?>" required>
                            </div>
                            <div class="form-group">
                                <label for="last_name">Nachname:</label>
                                <input type="text" id="lastName" name="last_name" value="<?php echo htmlspecialchars($customerToEdit['last_name']); ?>" required>
                            </div>
                            <div class="form-group">
                                <label for="email">E-Mail:</label>
                                <input type="email" id="email" name="email" value="<?php echo htmlspecialchars($customerToEdit['email']); ?>" required>
                            </div>
                            <div class="form-group">
                                <label for="phone_number">Telefon:</label>
                                <input type="text" id="phone_number" name="phone_number" value="<?php echo htmlspecialchars($customerToEdit['phone_number']); ?>">
                            </div>
                            <button type="submit" name="update_customer">Kunden aktualisieren</button>
                        </form>
                    </div>
                    <?php
                } else {
                    $stmt = $pdo->query("SELECT * FROM users ORDER BY created_at DESC");
                    $customers = $stmt->fetchAll();
                    ?>
                    <table>
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>Name</th>
                                <th>E-Mail</th>
                                <th>Telefon</th>
                                <th>Registriert am</th>
                                <th>Aktionen</th>
                            </tr>
                        </thead>
                        <tbody>
                            <?php foreach ($customers as $customer): ?>
                                <tr>
                                    <td><?php echo htmlspecialchars($customer['user_id']); ?></td>
                                    <td><?php echo htmlspecialchars($customer['first_name'] . ' ' . $customer['last_name']); ?></td>
                                    <td><?php echo htmlspecialchars($customer['email']); ?></td>
                                    <td><?php echo htmlspecialchars($customer['phone_number'] ?: 'N/A'); ?></td>
                                    <td><?php echo (new DateTime($customer['created_at']))->format('d.m.Y H:i'); ?></td>
                                    <td class="action-buttons">
                                        <a href="?section=customers&action=edit&id=<?php echo $customer['user_id']; ?>" class="edit-btn">Bearbeiten</a>
                                    </td>
                                </tr>
                            <?php endforeach; ?>
                        </tbody>
                    </table>
                    <?php
                }
                break;

            case 'payments':
                $paymentIdToEdit = (int)($_GET['id'] ?? 0);
                $orderIdFromGet = (int)($_GET['order_id'] ?? 0); // Optional, wenn von Bestellseite verlinkt
                $action = $_GET['action'] ?? '';

                if ($action === 'add' || ($action === 'edit' && $paymentIdToEdit > 0)) {
                    $paymentToEdit = null;
                    if ($action === 'edit') {
                        $stmtEdit = $pdo->prepare("SELECT * FROM payments WHERE payment_id = :id");
                        $stmtEdit->execute([':id' => $paymentIdToEdit]);
                        $paymentToEdit = $stmtEdit->fetch();
                        if (!$paymentToEdit) {
                            echo '<p class="alert error">Zahlung nicht gefunden.</p>';
                            break;
                        }
                    }

                    // Hole Bestelldetails, falls eine order_id vorhanden ist (für Anzeige)
                    $orderInfo = null;
                    $targetOrderId = $orderIdFromGet ?: ($paymentToEdit['order_id'] ?? 0);
                    if ($targetOrderId > 0) {
                        $stmtOrder = $pdo->prepare("SELECT o.order_id, o.total_amount, u.first_name, u.last_name FROM orders o JOIN users u ON o.user_id = u.user_id WHERE o.order_id = :order_id");
                        $stmtOrder->execute([':order_id' => $targetOrderId]);
                        $orderInfo = $stmtOrder->fetch();
                    }

                    ?>
                    <div class="admin-form-container">
                        <h3><?php echo ($action === 'add' ? 'Neue Zahlung hinzufügen' : 'Zahlung #' . htmlspecialchars($paymentIdToEdit) . ' bearbeiten'); ?></h3>
                        <?php if ($orderInfo): ?>
                            <p><strong>Bestellung:</strong> #<?php echo htmlspecialchars($orderInfo['order_id']); ?> (Kunde: <?php echo htmlspecialchars($orderInfo['first_name'] . ' ' . $orderInfo['last_name']); ?>, Gesamt: <?php echo formatEuroCurrency($orderInfo['total_amount']); ?>)</p>
                            <!-- Hidden field to pass order_id back for redirect after successful add -->
                            <input type="hidden" name="order_id" value="<?php echo htmlspecialchars($orderInfo['order_id']); ?>">
                            <input type="hidden" name="return_to_order_id" value="<?php echo htmlspecialchars($orderInfo['order_id']); ?>">
                        <?php elseif ($action === 'add'): // Wenn direkt auf Payments-Seite hinzugefügt wird ?>
                            <div class="form-group">
                                <label for="order_id">Bestell-ID:</label>
                                <input type="number" id="order_id" name="order_id" value="<?php echo htmlspecialchars($orderIdFromGet); ?>" required min="1">
                            </div>
                        <?php endif; ?>

                        <form method="POST" action="?section=payments&action=<?php echo $action; ?><?php echo ($action === 'edit' ? '&id=' . $paymentIdToEdit : ''); ?>">
                            <?php if ($orderInfo): // Wenn von Bestellung aus hinzugefügt wird, die Order-ID übergeben ?>
                                <input type="hidden" name="order_id" value="<?php echo htmlspecialchars($orderInfo['order_id']); ?>">
                                <input type="hidden" name="return_to_order_id" value="<?php echo htmlspecialchars($orderInfo['order_id']); ?>">
                            <?php elseif ($action === 'add'): // Wenn direkt auf Payments-Seite hinzugefügt wird ?>
                                <div class="form-group">
                                    <label for="order_id">Bestell-ID:</label>
                                    <input type="number" id="order_id" name="order_id" value="<?php echo htmlspecialchars($orderIdFromGet); ?>" required min="1">
                                </div>
                            <?php endif; ?>

                            <div class="form-group">
                                <label for="payment_date">Zahlungsdatum & Uhrzeit:</label>
                                <input type="datetime-local" id="payment_date" name="payment_date" value="<?php echo (new DateTime($paymentToEdit['payment_date'] ?? 'now'))->format('Y-m-d\TH:i'); ?>" required>
                            </div>
                            <div class="form-group">
                                <label for="amount">Betrag (€):</label>
                                <input type="number" id="amount" name="amount" step="0.01" min="0" value="<?php echo htmlspecialchars($paymentToEdit['amount'] ?? ''); ?>" required>
                            </div>
                            <div class="form-group">
                                <label for="payment_method">Zahlungsmethode:</label>
                                <select id="payment_method" name="payment_method" required>
                                    <option value="bank_transfer" <?php echo (isset($paymentToEdit['payment_method']) && $paymentToEdit['payment_method'] == 'bank_transfer' ? 'selected' : ''); ?>>Überweisung</option>
                                    <option value="cash" <?php echo (isset($paymentToEdit['payment_method']) && $paymentToEdit['payment_method'] == 'cash' ? 'selected' : ''); ?>>Barzahlung</option>
                                </select>
                            </div>
                            <div class="form-group">
                                <label for="transaction_id">Transaktions ID (optional):</label>
                                <input type="text" id="transaction_id" name="transaction_id" value="<?php echo htmlspecialchars($paymentToEdit['transaction_id'] ?? ''); ?>">
                            </div>
                            <div class="form-group">
                                <label for="payment_status">Status:</label>
                                <select id="payment_status" name="status" required>
                                    <option value="pending" <?php echo (isset($paymentToEdit['status']) && $paymentToEdit['status'] == 'pending' ? 'selected' : ''); ?>>Ausstehend</option>
                                    <option value="completed" <?php echo (isset($paymentToEdit['status']) && $paymentToEdit['status'] == 'completed' ? 'selected' : ''); ?>>Abgeschlossen</option>
                                    <option value="refunded" <?php echo (isset($paymentToEdit['status']) && $paymentToEdit['status'] == 'refunded' ? 'selected' : ''); ?>>Rückerstattet</option>
                                    <option value="failed" <?php echo (isset($paymentToEdit['status']) && $paymentToEdit['status'] == 'failed' ? 'selected' : ''); ?>>Fehlgeschlagen</option>
                                </select>
                            </div>
                            <div class="form-group">
                                <label for="notes">Notizen:</label>
                                <textarea id="notes" name="notes"><?php echo htmlspecialchars($paymentToEdit['notes'] ?? ''); ?></textarea>
                            </div>
                            <button type="submit" name="<?php echo ($action === 'add' ? 'add_payment' : 'update_payment'); ?>"><?php echo ($action === 'add' ? 'Zahlung hinzufügen' : 'Zahlung aktualisieren'); ?></button>
                        </form>
                    </div>
                    <?php
                } else {
                    $stmt = $pdo->query("SELECT p.*, o.order_id, u.first_name, u.last_name FROM payments p JOIN orders o ON p.order_id = o.order_id JOIN users u ON o.user_id = u.user_id ORDER BY p.payment_date DESC");
                    $payments = $stmt->fetchAll();
                    ?>
                    <div class="action-buttons">
                        <a href="?section=payments&action=add" class="add-btn">Neue Zahlung hinzufügen</a>
                    </div>
                    <table>
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>Bestellung ID</th>
                                <th>Kunde</th>
                                <th>Datum</th>
                                <th>Betrag</th>
                                <th>Methode</th>
                                <th>Transaktions ID</th>
                                <th>Status</th>
                                <th>Aktionen</th>
                            </tr>
                        </thead>
                        <tbody>
                            <?php foreach ($payments as $payment): ?>
                                <tr>
                                    <td><?php echo htmlspecialchars($payment['payment_id']); ?></td>
                                    <td><a href="?section=orders&action=edit&id=<?php echo htmlspecialchars($payment['order_id']); ?>"><?php echo htmlspecialchars($payment['order_id']); ?></a></td>
                                    <td><?php echo htmlspecialchars($payment['first_name'] . ' ' . $payment['last_name']); ?></td>
                                    <td><?php echo (new DateTime($payment['payment_date']))->format('d.m.Y H:i'); ?></td>
                                    <td><?php echo formatEuroCurrency($payment['amount']); ?></td>
                                    <td><?php echo htmlspecialchars(ucfirst(str_replace('_', ' ', $payment['payment_method']))); ?></td>
                                    <td><?php echo htmlspecialchars($payment['transaction_id'] ?: 'N/A'); ?></td>
                                    <td><?php echo htmlspecialchars(ucfirst($payment['status'])); ?></td>
                                    <td class="action-buttons">
                                        <a href="?section=payments&action=edit&id=<?php echo $payment['payment_id']; ?>" class="edit-btn">Bearbeiten</a>
                                        <form method="POST" action="?section=payments&action=delete&id=<?php echo $payment['payment_id']; ?>" onsubmit="return confirm('Sicher? Diese Zahlung löschen?');" style="display:inline;">
                                            <button type="submit" name="delete_payment" class="delete-btn">Löschen</button>
                                        </form>
                                    </td>
                                </tr>
                            <?php endforeach; ?>
                        </tbody>
                    </table>
                    <?php
                }
                break;

            case 'products':
                $productId = (int)($_GET['id'] ?? 0);
                $action = $_GET['action'] ?? '';

                if ($action === 'add' || ($action === 'edit' && $productId > 0)) {
                    $productToEdit = null;
                    if ($action === 'edit') {
                        $stmtEdit = $pdo->prepare("SELECT * FROM products WHERE product_id = :id");
                        $stmtEdit->execute([':id' => $productId]);
                        $productToEdit = $stmtEdit->fetch();
                        if (!$productToEdit) {
                             echo '<p class="alert error">Produkt nicht gefunden.</p>';
                             break;
                        }
                    }
                    $categories = $pdo->query("SELECT * FROM categories ORDER BY name")->fetchAll();
                    ?>
                    <div class="admin-form-container">
                        <h3><?php echo ($action === 'add' ? 'Neues Produkt hinzufügen' : 'Produkt #' . htmlspecialchars($productId) . ' bearbeiten'); ?></h3>
                        <form method="POST" action="?section=products&action=<?php echo $action; ?><?php echo ($action === 'edit' ? '&id=' . $productId : ''); ?>">
                            <div class="form-group">
                                <label for="name">Name:</label>
                                <input type="text" id="name" name="name" value="<?php echo htmlspecialchars($productToEdit['name'] ?? ''); ?>" required>
                            </div>
                            <div class="form-group">
                                <label for="description">Beschreibung:</label>
                                <textarea id="description" name="description"><?php echo htmlspecialchars($productToEdit['description'] ?? ''); ?></textarea>
                            </div>
                            <div class="form-group">
                                <label for="price">Preis (€):</label>
                                <input type="number" id="price" name="price" step="0.01" min="0" value="<?php echo htmlspecialchars($productToEdit['price'] ?? ''); ?>" required>
                            </div>
                            <div class="form-group">
                                <label for="stock_quantity">Lagerbestand:</label>
                                <input type="number" id="stock_quantity" name="stock_quantity" min="0" value="<?php echo htmlspecialchars($productToEdit['stock_quantity'] ?? ''); ?>" required>
                            </div>
                            <div class="form-group">
                                <label for="image_url">Bild-URL:</label>
                                <input type="text" id="image_url" name="image_url" value="<?php echo htmlspecialchars($productToEdit['image_url'] ?? ''); ?>">
                            </div>
                            <div class="form-group">
                                <label for="category_id">Kategorie:</label>
                                <select id="category_id" name="category_id" required>
                                    <?php foreach ($categories as $category): ?>
                                        <option value="<?php echo htmlspecialchars($category['category_id']); ?>" <?php echo (isset($productToEdit['category_id']) && $productToEdit['category_id'] == $category['category_id'] ? 'selected' : ''); ?>>
                                            <?php echo htmlspecialchars($category['name']); ?>
                                        </option>
                                    <?php endforeach; ?>
                                </select>
                            </div>
                            <div class="form-group">
                                <input type="checkbox" id="is_active" name="is_active" <?php echo (isset($productToEdit['is_active']) && $productToEdit['is_active'] ? 'checked' : ($action === 'add' ? 'checked' : '')); ?>>
                                <label for="is_active" style="display: inline;">Aktiv</label>
                            </div>
                            <button type="submit" name="<?php echo ($action === 'add' ? 'add_product' : 'update_product'); ?>"><?php echo ($action === 'add' ? 'Produkt hinzufügen' : 'Produkt aktualisieren'); ?></button>
                        </form>
                    </div>
                    <?php
                } else {
                    // GEÄNDERT: Sortierung nach p.product_id ASC
                    $stmt = $pdo->query("SELECT p.*, c.name as category_name FROM products p JOIN categories c ON p.category_id = c.category_id ORDER BY p.product_id ASC");
                    $products = $stmt->fetchAll();
                    ?>
                    <div class="action-buttons">
                        <a href="?section=products&action=add" class="add-btn">Neues Produkt hinzufügen</a>
                    </div>
                    <table>
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>Name</th>
                                <th>Beschreibung</th>
                                <th>Preis</th>
                                <th>Lager</th>
                                <th>Kategorie</th>
                                <th>Aktiv</th>
                                <th>Aktionen</th>
                            </tr>
                        </thead>
                        <tbody>
                            <?php foreach ($products as $product): ?>
                                <tr>
                                    <td><?php echo htmlspecialchars($product['product_id']); ?></td>
                                    <td><?php echo htmlspecialchars($product['name']); ?></td>
                                    <td><?php echo htmlspecialchars(substr($product['description'], 0, 50)); ?><?php echo (strlen($product['description']) > 50 ? '...' : ''); ?></td>
                                    <td><?php echo formatEuroCurrency($product['price']); ?></td>
                                    <td><?php echo htmlspecialchars($product['stock_quantity']); ?></td>
                                    <td><?php echo htmlspecialchars($product['category_name']); ?></td>
                                    <td><?php echo ($product['is_active'] ? 'Ja' : 'Nein'); ?></td>
                                    <td class="action-buttons">
                                        <a href="?section=products&action=edit&id=<?php echo $product['product_id']; ?>" class="edit-btn">Bearbeiten</a>
                                        <form method="POST" action="?section=products&action=delete&id=<?php echo $product['product_id']; ?>" onsubmit="return confirm('Sicher? Dies löscht auch alle Bestellartikel, die dieses Produkt verwenden!');" style="display:inline;">
                                            <button type="submit" name="delete_product" class="delete-btn">Löschen</button>
                                        </form>
                                    </td>
                                </tr>
                            <?php endforeach; ?>
                        </tbody>
                    </table>
                    <?php
                }
                break;

            case 'categories':
                $categoryId = (int)($_GET['id'] ?? 0);
                $action = $_GET['action'] ?? '';

                if ($action === 'add' || ($action === 'edit' && $categoryId > 0)) {
                    $categoryToEdit = null;
                    if ($action === 'edit') {
                        $stmtEdit = $pdo->prepare("SELECT * FROM categories WHERE category_id = :id");
                        $stmtEdit->execute([':id' => $categoryId]);
                        $categoryToEdit = $stmtEdit->fetch();
                        if (!$categoryToEdit) {
                            echo '<p class="alert error">Kategorie nicht gefunden.</p>';
                            break;
                        }
                    }
                    ?>
                    <div class="admin-form-container">
                        <h3><?php echo ($action === 'add' ? 'Neue Kategorie hinzufügen' : 'Kategorie #' . htmlspecialchars($categoryId) . ' bearbeiten'); ?></h3>
                        <form method="POST" action="?section=categories&action=<?php echo $action; ?><?php echo ($action === 'edit' ? '&id=' . $categoryId : ''); ?>">
                            <div class="form-group">
                                <label for="name">Name:</label>
                                <input type="text" id="name" name="name" value="<?php echo htmlspecialchars($categoryToEdit['name'] ?? ''); ?>" required>
                            </div>
                            <div class="form-group">
                                <label for="description">Beschreibung:</label>
                                <textarea id="description" name="description"><?php echo htmlspecialchars($categoryToEdit['description'] ?? ''); ?></textarea>
                            </div>
                            <button type="submit" name="<?php echo ($action === 'add' ? 'add_category' : 'update_category'); ?>"><?php echo ($action === 'add' ? 'Kategorie hinzufügen' : 'Kategorie aktualisieren'); ?></button>
                        </form>
                    </div>
                    <?php
                } else {
                    $stmt = $pdo->query("SELECT * FROM categories ORDER BY category_id ASC");
                    $categories = $stmt->fetchAll();
                    ?>
                    <div class="action-buttons">
                        <a href="?section=categories&action=add" class="add-btn">Neue Kategorie hinzufügen</a>
                    </div>
                    <table>
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>Name</th>
                                <th>Beschreibung</th>
                                <th>Aktionen</th>
                            </tr>
                        </thead>
                        <tbody>
                            <?php foreach ($categories as $category): ?>
                                <tr>
                                    <td><?php echo htmlspecialchars($category['category_id']); ?></td>
                                    <td><?php echo htmlspecialchars($category['name']); ?></td>
                                    <td><?php echo htmlspecialchars(substr($category['description'], 0, 100)); ?><?php echo (strlen($category['description']) > 100 ? '...' : ''); ?></td>
                                    <td class="action-buttons">
                                        <a href="?section=categories&action=edit&id=<?php echo $category['category_id']; ?>" class="edit-btn">Bearbeiten</a>
                                        <form method="POST" action="?section=categories&action=delete&id=<?php echo $category['category_id']; ?>" onsubmit="return confirm('Sicher? Dies löscht die Kategorie nur, wenn keine Produkte mehr zugeordnet sind!');" style="display:inline;">
                                            <button type="submit" name="delete_category" class="delete-btn">Löschen</button>
                                        </form>
                                    </td>
                                </tr>
                            <?php endforeach; ?>
                        </tbody>
                    </table>
                    <?php
                }
                break;

            case 'pickup_dates':
                $dateId = (int)($_GET['id'] ?? 0);
                $action = $_GET['action'] ?? '';

                if ($action === 'add' || ($action === 'edit' && $dateId > 0)) {
                    $dateToEdit = null;
                    if ($action === 'edit') {
                        $stmtEdit = $pdo->prepare("SELECT * FROM pickup_dates WHERE pickup_date_id = :id");
                        $stmtEdit->execute([':id' => $dateId]);
                        $dateToEdit = $stmtEdit->fetch();
                        if (!$dateToEdit) {
                            echo '<p class="alert error">Abholtermin nicht gefunden.</p>';
                            break;
                        }
                    }
                    ?>
                    <div class="admin-form-container">
                        <h3><?php echo ($action === 'add' ? 'Neuen Abholtermin hinzufügen' : 'Abholtermin #' . htmlspecialchars($dateId) . ' bearbeiten'); ?></h3>
                        <form method="POST" action="?section=pickup_dates&action=<?php echo $action; ?><?php echo ($action === 'edit' ? '&id=' . $dateId : ''); ?>">
                            <div class="form-group">
                                <label for="pickup_datetime">Datum und Uhrzeit:</label>
                                <input type="datetime-local" id="pickup_datetime" name="pickup_datetime" value="<?php echo (new DateTime($dateToEdit['pickup_datetime'] ?? 'now'))->format('Y-m-d\TH:i'); ?>" required>
                            </div>
                            <div class="form-group">
                                <label for="location">Ort:</label>
                                <input type="text" id="location" name="location" value="<?php echo htmlspecialchars($dateToEdit['location'] ?? 'Standard Abholort'); ?>" required>
                            </div>
                            <div class="form-group">
                                <input type="checkbox" id="is_active" name="is_active" <?php echo (isset($dateToEdit['is_active']) && $dateToEdit['is_active'] ? 'checked' : ($action === 'add' ? 'checked' : '')); ?>>
                                <label for="is_active" style="display: inline;">Aktiv</label>
                            </div>
                             <div class="form-group">
                                <label for="notes">Notizen:</label>
                                <textarea id="notes" name="notes"><?php echo htmlspecialchars($dateToEdit['notes'] ?? ''); ?></textarea>
                            </div>
                            <button type="submit" name="<?php echo ($action === 'add' ? 'add_pickup_date' : 'update_pickup_date'); ?>"><?php echo ($action === 'add' ? 'Abholtermin hinzufügen' : 'Abholtermin aktualisieren'); ?></button>
                        </form>
                    </div>
                    <?php
                } else {
                    $stmt = $pdo->query("SELECT * FROM pickup_dates ORDER BY pickup_datetime DESC");
                    $pickupDates = $stmt->fetchAll();
                    ?>
                    <div class="action-buttons">
                        <a href="?section=pickup_dates&action=add" class="add-btn">Neuen Abholtermin hinzufügen</a>
                    </div>
                    <table>
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>Datum/Uhrzeit</th>
                                <th>Ort</th>
                                <th>Aktiv</th>
                                <th>Notizen</th>
                                <th>Aktionen</th>
                            </tr>
                        </thead>
                        <tbody>
                            <?php foreach ($pickupDates as $date): ?>
                                <tr>
                                    <td><?php echo htmlspecialchars($date['pickup_date_id']); ?></td>
                                    <td><?php echo (new DateTime($date['pickup_datetime']))->format('d.m.Y H:i'); ?></td>
                                    <td><?php echo htmlspecialchars($date['location']); ?></td>
                                    <td><?php echo ($date['is_active'] ? 'Ja' : 'Nein'); ?></td>
                                    <td><?php echo htmlspecialchars(substr($date['notes'], 0, 50)); ?><?php echo (strlen($date['notes']) > 50 ? '...' : ''); ?></td>
                                    <td class="action-buttons">
                                        <a href="?section=pickup_dates&action=edit&id=<?php echo $date['pickup_date_id']; ?>" class="edit-btn">Bearbeiten</a>
                                        <form method="POST" action="?section=pickup_dates&action=delete&id=<?php echo $date['pickup_date_id']; ?>" onsubmit="return confirm('Sicher? Dies löscht den Abholtermin!');" style="display:inline;">
                                            <button type="submit" name="delete_pickup_date" class="delete-btn">Löschen</button>
                                        </form>
                                    </td>
                                </tr>
                            <?php endforeach; ?>
                        </tbody>
                    </table>
                    <?php
                }
                break;

            case 'email_logs':
                // Alle E-Mail-Protokolle anzeigen
                $stmt = $pdo->query("SELECT * FROM email_logs ORDER BY sent_at DESC");
                $emailLogs = $stmt->fetchAll();
                ?>
                <table>
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>An E-Mail</th>
                            <th>Betreff</th>
                            <th>Status</th>
                            <th>Versendet am</th>
                            <th>Fehlermeldung</th>
                            <th>Bestell-ID</th>
                        </tr>
                    </thead>
                    <tbody>
                        <?php foreach ($emailLogs as $log): ?>
                            <tr>
                                <td><?php echo htmlspecialchars($log['log_id']); ?></td>
                                <td><?php echo htmlspecialchars($log['to_email']); ?></td>
                                <td><?php echo htmlspecialchars($log['subject']); ?></td>
                                <td><?php echo htmlspecialchars(ucfirst($log['status'])); ?></td>
                                <td><?php echo (new DateTime($log['sent_at']))->format('d.m.Y H:i'); ?></td>
                                <td><?php echo htmlspecialchars($log['error_message'] ?: 'N/A'); ?></td>
                                <td><?php echo ($log['order_id'] ? '<a href="?section=orders&action=edit&id=' . htmlspecialchars($log['order_id']) . '">' . htmlspecialchars($log['order_id']) . '</a>' : 'N/A'); ?></td>
                            </tr>
                        <?php endforeach; ?>
                    </tbody>
                </table>
                <?php
                break;

            default:
                echo '<p>Willkommen im Admin Panel. Wählen Sie eine Option aus dem Menü.</p>';
                break;
        }
        ?>
    </div>
</div>
<?php
// Footer wird vom index.php geladen, daher hier nicht erneut ausgeben.
?>

==================================================
DATEINAME: src/modules/home.php
--------------------------------------------------
<?php
// modules/home.php

// Hier könnten Sie bei Bedarf dynamische Daten laden, z.B. eine Auswahl von Produkten für den Teaser.
// Für diese Beispielseite werden wir hauptsächlich statische Inhalte verwenden,
// die das Design und die Animationen demonstrieren.

// Beispiel für das Abrufen von 3 aktiven Produkten für den Teaser
global $pdo;
$featured_products = [];
if (isset($pdo)) {
    try {
        $stmt = $pdo->prepare("SELECT product_id, name, description, price, image_url FROM products WHERE is_active = TRUE ORDER BY created_at DESC LIMIT 3");
        $stmt->execute();
        $featured_products = $stmt->fetchAll();
    } catch (PDOException $e) {
        error_log("Fehler beim Laden der Featured Products für die Homepage: " . $e->getMessage());
        // $featured_products bleibt leer
    }
}

// Die Funktion formatEuroCurrency() wird über include/helpers.php geladen und ist global verfügbar.
// Wir fügen sie hier sicherheitshalber nochmals hinzu, falls helper.php nicht überall geladen wird (was aber der loader.php tun sollte)
if (!function_exists('formatEuroCurrency')) {
    function formatEuroCurrency(float $amount): string {
        if (fmod($amount, 1.0) == 0) {
            return number_format($amount, 0, ',', '.') . ' €';
        } else {
            return number_format($amount, 2, ',', '.') . ' €';
        }
    }
}
?>

<div class="home-page-content">

    <!-- Hero Sektion -->
    <section class="hero-section">
        <div class="hero-content">
            <h1>Frische Früchte direkt aus Portugal</h1>
            <p>Erlebe den wahren Geschmack der Natur – saisonal, nachhaltig und mit Liebe geerntet.</p>
            <a href="/shop" class="hero-button">Jetzt bestellen</a>
            <span class="mission-highlight">100% des Gewinnes gehen in die Missionsarbeit!</span>
        </div>
    </section>

    <!-- Über uns / Philosophie Sektion -->
    <section class="home-section" id="about-us">
        <div class="home-section-content">
            <h2>Unsere Mission: Guter Geschmack, Gutes tun</h2>
            <p>Bei Früchte aus Portugal glauben wir an Authentizität und Qualität. Wir bringen dir handverlesene, sonnengereifte Früchte direkt von kleinen Bauernhöfen in Portugal. Ohne Umwege, ohne unnötige Zusätze – einfach purer Genuss.</p>
            <p>Doch wir sind mehr als nur ein ein gutes Geschäft. Unser Projekt verfolgt ein höheres Ziel: <strong>100% des Gewinnes aus jedem Verkauf fließen direkt in die Missionsarbeit des BSB.</strong> Mit jedem Bissen einer saftigen Orange oder einer süßen Kiwi unterstützt du wichtige Projekte, die Menschen in Not helfen und Hoffnung schenken. Dein Einkauf hat eine doppelte Wirkung!</p>
            <p>Jede Frucht erzählt eine Geschichte von Sonne, Leidenschaft und traditionellem Anbau, und trägt gleichzeitig dazu bei, die Welt ein kleines Stück besser zu machen. Entdecke den Unterschied, den echte Qualität und ein gutes Herz machen.</p>
        </div>
    </section>

    <!-- Vorteile / Features Sektion -->
    <section class="home-section" id="features">
        <div class="home-section-content">
            <h2>Warum Früchte aus Portugal wählen?</h2>
            <div class="features-grid">
                <div class="feature-item">
                    <img src="/-quality.jpeg" alt="Icon für Qualität">
                    <h3>Unvergleichliche Qualität</h3>
                    <p>Die Früchte werden frisch gepflügt. Somit haben sie viel mehr Zeit in der Sonne verbracht als übliche Früchte.</p>
                </div>
                <div class="feature-item">
                    <img src="/-freshness.jpeg" alt="Icon für Frische">
                    <h3>Garantierte Frische</h3>
                    <p>Direkt vom Baum zu dir – für ein Geschmackserlebnis wie im Urlaub.</p>
                </div>
                <div class="feature-item">
                    <img src="/-mission.jpeg" alt="Icon für Für die Missionsarbeit">
                    <h3>Für die Missionsarbeit</h3>
                    <p>Damit die Früchte zu dir kommen, gibt es viele ehrenamtliche Helfer.</p>
                </div>
            </div>
        </div>
    </section>

    <!-- Produkt Teaser Sektion -->
    <section class="home-section" id="products-teaser">
        <div class="home-section-content">
            <h2>Unsere beliebtesten Früchte</h2>
            <p>Entdecke eine Auswahl unserer exquisiten Produkte, die unsere Kunden lieben.</p>
            <div class="product-teaser-grid">
                <?php if (!empty($featured_products)): ?>
                    <?php foreach ($featured_products as $product): ?>
                        <a href="/shop#product-<?php echo htmlspecialchars($product['product_id']); ?>" class="product-teaser-item">
                            <img src="<?php echo htmlspecialchars($product['image_url'] ?: '/_placeholder.png'); ?>" alt="Bild von <?php echo htmlspecialchars($product['name']); ?>">
                            <h3><?php echo htmlspecialchars($product['name']); ?></h3>
                            <p><?php echo formatEuroCurrency($product['price']); ?></p>
                            <!-- <div class="product-controls">
                                // Hier könnte man einen "Zum Warenkorb"-Button hinzufügen, der direkt über JS arbeitet
                            </div> -->
                        </a>
                    <?php endforeach; ?>
                <?php else: ?>
                    <p>Derzeit keine Produkte zum Anpreisen verfügbar. Besuchen Sie unseren <a href="/shop">Shop</a>!</p>
                <?php endif; ?>
            </div>
            <div style="margin-top: var(--spacing-xl);">
                <a href="/shop" class="hero-button">Alle Produkte entdecken</a>
            </div>
        </div>
    </section>

    <!-- Call to Action Sektion -->
    <section class="cta-section">
        <div class="home-section-content">
            <h2>Bereit, zu geniessen und zu helfen?</h2>
            <p>Tauche ein in die Welt der unvergleichlichen Geschmäcker und unterstütze gleichzeitig unsere Missionsarbeit. Jeder Einkauf zählt!</p>
            <a href="/shop" class="cta-button">Jetzt reinschauen & Gutes tun</a>
            <span class="mission-highlight" style="color: white; font-size: 1.1em; margin-top: var(--spacing-lg);">100% des Gewinnes gehen in die Missionsarbeit!</span>
        </div>
    </section>

</div>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        // Observer für Scroll-Animationen
        const animateOnScroll = () => {
            const sections = document.querySelectorAll('.home-section');

            const observerOptions = {
                root: null, // viewport
                rootMargin: '0px',
                threshold: 0.1 // 10% der Sektion muss sichtbar sein
            };

            const observer = new IntersectionObserver((entries, observer) => {
                entries.forEach(entry => {
                    if (entry.isIntersecting) {
                        entry.target.classList.add('is-visible');
                        // Optional: Animation nur einmal abspielen, kann aber auch wiederholt werden,
                        // wenn man aus dem Viewport scrollt und wieder hinein.
                        // observer.unobserve(entry.target);
                    } else {
                        // Optional: Elemente wieder verstecken, wenn sie nicht mehr sichtbar sind
                        // entry.target.classList.remove('is-visible');
                    }
                });
            }, observerOptions);

            sections.forEach(section => {
                observer.observe(section);
            });
        };

        animateOnScroll();
    });
</script>

==================================================
DATEINAME: src/modules/kontakt.php
--------------------------------------------------
meins

==================================================
DATEINAME: src/modules/shop.php
--------------------------------------------------
<?php
// modules/shop.php

// session_start() sollte in loader.php oder index.php aufgerufen werden.
// Wenn nicht, hier aufrufen:
if (session_status() == PHP_SESSION_NONE) {
    session_start();
}

// Warenkorb in der Session initialisieren, falls noch nicht vorhanden
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
}

// Datenbankverbindung abrufen (wird über loader.php und getDbConnection() verfügbar sein)
global $pdo; // Annahme, dass $pdo bereits global über include/db.php gesetzt ist
if (!isset($pdo)) {
    // Fallback falls $pdo nicht global ist, aber getDbConnection() existiert
    require_once ROOT_PATH . 'include/db.php';
    $pdo = getDbConnection();
}

// HINWEIS: Die Funktion formatEuroCurrency() wird jetzt über include/helpers.php geladen und ist global verfügbar.

$products_by_category = [];
$pickup_dates = [];
$error_message = '';
$success_message = '';

try {
    // Produkte und Kategorien abrufen
    // Sicherstellen, dass image_url und description auch abgerufen werden
    // GEÄNDERT: Sortierung nach c.category_id ASC und p.product_id ASC
    $stmt = $pdo->query("SELECT p.*, c.name as category_name FROM products p JOIN categories c ON p.category_id = c.category_id WHERE p.is_active = TRUE ORDER BY c.category_id ASC, p.product_id ASC");
    $all_products = $stmt->fetchAll();

    foreach ($all_products as $product) {
        // Hier wird die Kategorie nach category_name gruppiert, aber die Reihenfolge der Kategorien
        // in der Ausgabe wird durch die ORDER BY Klausel der SQL-Abfrage beeinflusst.
        $products_by_category[$product['category_name']][] = $product;
    }

    // Aktive Abholtermine abrufen
    $stmt_dates = $pdo->query("SELECT * FROM pickup_dates WHERE is_active = TRUE AND pickup_datetime >= NOW() ORDER BY pickup_datetime ASC");
    $pickup_dates = $stmt_dates->fetchAll();

} catch (PDOException $e) {
    error_log("Datenbankfehler auf Shop-Seite: " . $e->getMessage());
    $error_message = "Es ist ein Fehler aufgetreten. Bitte versuchen Sie es später erneut.";
}

// Gesamtbetrag des Warenkorbs berechnen
$cart_total = 0;
$cart_item_count = 0;
foreach ($_SESSION['cart'] as $item_id => $item) {
    $cart_total += $item['price'] * $item['quantity'];
    $cart_item_count += $item['quantity'];
}
?>

<!-- Begin site-content-wrapper, which now wraps both the main product content and the cart sidebar -->
<div class="site-content-wrapper">

    <main>

        <?php if ($error_message): ?>
            <div class="alert error"><?php echo htmlspecialchars($error_message); ?></div>
        <?php endif; ?>
        <?php if ($success_message): ?>
            <div class="alert success"><?php echo htmlspecialchars($success_message); ?></div>
        <?php endif; ?>

        <div class="product-list">
            <?php if (empty($products_by_category)): ?>
                <p>Derzeit sind keine Produkte verfügbar.</p>
            <?php else: ?>
                <?php
                // Um die Kategorien tatsächlich nach ID (oder einer impliziten Reihenfolge aus der DB) zu sortieren,
                // und nicht alphabetisch durch den PHP-Schlüssel 'category_name',
                // müsste die $products_by_category Struktur anders aufgebaut werden, z.B.
                // $products_by_category[$product['category_id']]['name'] = $product['category_name'];
                // $products_by_category[$product['category_id']]['products'][] = $product;
                // Dann würde man über die Keys von $products_by_category iterieren, die die IDs wären.
                // Für diese Anfrage belassen wir die Gruppierung nach Name und vertrauen darauf,
                // dass die ursprüngliche Abfrage mit "ORDER BY c.category_id" die Kategorien korrekt einliest.
                // Wenn die Kategorien im Array $products_by_category alphabetisch nach Name sortiert sind,
                // weil PHP-Assoziative Arrays dies tun könnten, dann müsste man das Array explizit neu sortieren.
                // Da die DB-Abfrage nach c.category_id sortiert, sollten die Kategorien in der richtigen Reihenfolge auftauchen.
                ?>
                <?php foreach ($products_by_category as $category_name => $products): ?>
                    <section class="category-section">
                        <h2><?php echo htmlspecialchars($category_name); ?></h2>
                        <div class="product-grid">
                            <?php foreach ($products as $product): ?>
                                <div class="product-item">
                                    <img src="<?php echo htmlspecialchars($product['image_url'] ?: '/_placeholder.png'); ?>" alt="Bild von <?php echo htmlspecialchars($product['name']); ?> (<?php echo htmlspecialchars($product['description']); ?>)">
                                    <h3><?php echo htmlspecialchars($product['name']); ?></h3>
                                    <p class="product-quantity-price-line">
                                        <span class="product-unit"><?php echo htmlspecialchars($product['description']); ?> für</span> <span class="product-price-value"><?php echo formatEuroCurrency($product['price']); ?></span>
                                    </p>
                                    <div class="product-controls">
                                        <input type="number" class="quantity-input" value="1" min="1" max="<?php echo (int)$product['stock_quantity']; ?>" data-product-id="<?php echo (int)$product['product_id']; ?>">
                                        <button class="add-to-cart-btn" data-product-id="<?php echo (int)$product['product_id']; ?>"
                                                data-product-name="<?php echo htmlspecialchars($product['name']); ?>"
                                                data-product-price="<?php echo htmlspecialchars($product['price']); ?>"
                                                data-product-stock="<?php echo (int)$product['stock_quantity']; ?>"
                                                data-product-image="<?php echo htmlspecialchars($product['image_url'] ?: '/_placeholder.png'); ?>"
                                                data-product-description="<?php echo htmlspecialchars($product['description']); ?>"
                                                <?php echo ($product['stock_quantity'] <= 0) ? 'disabled' : ''; ?>>
                                            <?php echo ($product['stock_quantity'] <= 0) ? 'Ausverkauft' : 'In den Warenkorb'; ?>
                                        </button>
                                    </div>
                                </div>
                            <?php endforeach; ?>
                        </div>
                    </section>
                <?php endforeach; ?>
            <?php endif; ?>
        </div>
    </main>

    <aside class="cart-sidebar">
        <!-- Desktop Warenkorb Header -->
        <div class="cart-header-desktop">
            <h2>Ihr Warenkorb</h2>
        </div>

        <!-- Mobiler Warenkorb Header (zusammenklappbar) -->
        <div class="cart-header-mobile">
            <span class="cart-mobile-summary">
                Warenkorb (<span id="mobile-cart-item-count"><?php echo $cart_item_count; ?></span> Artikel) - <span id="mobile-cart-total-summary"><?php echo formatEuroCurrency($cart_total); ?></span>
            </span>
            <button id="cart-toggle-mobile" class="cart-toggle-button">
                <span class="toggle-text">Details</span> <span class="toggle-icon">▼</span>
            </button>
        </div>

        <!-- Warenkorb Inhalt (klappt auf Mobile ein/aus) -->
        <div class="cart-body-content">
            <!-- NEU: Wrapper für scrollbare Items -->
            <div class="cart-items-scrollable-wrapper">
                <ul id="cart-items">
                    <?php if (empty($_SESSION['cart'])): ?>
                        <li id="cart-empty-message">Ihr Warenkorb ist leer.</li>
                    <?php else: ?>
                        <?php foreach ($_SESSION['cart'] as $productId => $item): ?>
                            <li class="cart-item" data-product-id="<?php echo htmlspecialchars($productId); ?>">
                                <img src="<?php echo htmlspecialchars($item['image_url'] ?: '/_placeholder.png'); ?>" alt="Bild von <?php echo htmlspecialchars($item['name']); ?>: <?php echo htmlspecialchars($item['description']); ?>" class="cart-item-image">
                                <div class="cart-item-info">
                                    <h4><?php echo htmlspecialchars($item['name']); ?></h4>
                                    <p><?php echo formatEuroCurrency(parseFloat($item.price) * parseInt($item.quantity)); ?></p>
                                </div>
                                <div class="cart-item-controls">
                                    <input type="number" class="cart-quantity-input" value="<?php echo htmlspecialchars($item['quantity']); ?>" min="1" max="<?php echo htmlspecialchars($item['stock']); ?>" data-product-id="<?php echo htmlspecialchars($productId); ?>">
                                    <button class="remove-item-btn" data-product-id="<?php echo htmlspecialchars($productId); ?>">×</button>
                                </div>
                            </li>
                        <?php endforeach; ?>
                    <?php endif; ?>
                </ul>
            </div>
            <div id="cart-total-container">
                <span>Gesamt:</span> <span id="cart-total"><?php echo formatEuroCurrency($cart_total); ?></span>
            </div>
            <button class="checkout-button" id="open-checkout-modal" <?php echo empty($_SESSION['cart']) ? 'disabled' : ''; ?>>Weiter</button>
        </div>
    </aside>

    <!-- Checkout Modal remains here -->
    <div id="checkoutModal" class="modal">
        <div class="modal-content">
            <span class="close-button">×</span>
            <h3>Bestellung abschliessen</h3>
            <div id="checkout-message" class="alert" style="display:none;"></div>
            <form id="checkoutForm">
                <div class="form-group">
                    <label for="firstName">Vorname:</label>
                    <input type="text" id="firstName" name="firstName" required>
                </div>
                <div class="form-group">
                    <label for="lastName">Nachname:</label>
                    <input type="text" id="lastName" name="lastName" required>
                </div>
                <div class="form-group">
                    <label for="email">E-Mail:</label>
                    <input type="email" id="email" name="email" required>
                </div>
                <div class="form-group">
                    <label for="phone">Telefon (optional):</label>
                    <input type="text" id="phone" name="phone">
                </div>

                <div class="form-group">
                    <label>Zahlungsmethode:</label>
                    <div class="radio-option">
                        <input type="radio" id="paymentBankTransfer" name="paymentMethod" value="bank_transfer" required checked>
                        <label for="paymentBankTransfer">Überweisung</label>
                    </div>
                    <div class="radio-option">
                        <input type="radio" id="paymentCash" name="paymentMethod" value="cash" required>
                        <label for="paymentCash">Barzahlung bei Abholung</label>
                    </div>
                </div>

                <div class="form-group">
                    <label for="pickupDate">Abholtermin:</label>
                    <select id="pickupDate" name="pickupDate" required>
                        <option value="">Bitte wählen</option>
                        <?php foreach ($pickup_dates as $date): ?>
                            <option value="<?php echo htmlspecialchars($date['pickup_date_id']); ?>">
                                <?php echo (new DateTime($date['pickup_datetime']))->format('d.m.Y H:i') . ' Uhr'; ?> - <?php echo htmlspecialchars($date['location']); ?>
                            </option>
                        <?php endforeach; ?>
                        <?php if (empty($pickup_dates)): ?>
                            <option value="" disabled>Keine Abholtermine verfügbar</option>
                        <?php endif; ?>
                    </select>
                </div>

                <button type="submit" id="checkout-submit-button">Bestellung abschicken</button>
            </form>
        </div>
    </div>

</div><!-- End site-content-wrapper -->

<script>
    // Helper function for consistent currency formatting in JavaScript
    const formatEuroCurrencyJS = (amount) => {
        const floatAmount = parseFloat(amount);
        let formatted = floatAmount.toFixed(2).replace('.', ','); // Always two decimals first for consistency
        if (formatted.endsWith(',00')) {
            formatted = formatted.slice(0, -3); // Remove ',00' if it ends with '.00'
        }
        return formatted + ' €';
    };

    document.addEventListener('DOMContentLoaded', () => {
        const cartSidebar = document.querySelector('.cart-sidebar');
        const cartItemsList = document.getElementById('cart-items');
        const cartTotalSpan = document.getElementById('cart-total');
        const checkoutButton = document.getElementById('open-checkout-modal');
        const mobileCartItemCount = document.getElementById('mobile-cart-item-count');
        const mobileCartTotalSummary = document.getElementById('mobile-cart-total-summary');
        const cartToggleButton = document.getElementById('cart-toggle-mobile');

        // Funktion zur Aktualisierung der Warenkorb-Anzeige
        const updateCartDisplay = (cart) => {
            cartItemsList.innerHTML = ''; // Warenkorb leeren
            let total = 0;
            let itemCount = 0;

            if (Object.keys(cart).length === 0) {
                cartItemsList.innerHTML = '<li id="cart-empty-message">Ihr Warenkorb ist leer.</li>';
                checkoutButton.disabled = true;
            } else {
                checkoutButton.disabled = false;
                const existingEmptyMessage = document.getElementById('cart-empty-message');
                if (existingEmptyMessage) {
                    existingEmptyMessage.remove();
                }

                for (const productId in cart) {
                    const item = cart[productId];
                    total += parseFloat(item.price) * parseInt(item.quantity);
                    itemCount += parseInt(item.quantity);

                    const listItem = document.createElement('li');
                    listItem.classList.add('cart-item');
                    listItem.dataset.productId = productId;
                    listItem.innerHTML = `
                        <img src="${item.image_url || '/_placeholder.png'}" alt="Bild von ${item.name}: ${item.description}" class="cart-item-image">
                        <div class="cart-item-info">
                            <h4>${item.name}</h4>
                            <p>${formatEuroCurrencyJS(parseFloat(item.price) * parseInt(item.quantity))}</p>
                        </div>
                        <div class="cart-item-controls">
                            <input type="number" class="cart-quantity-input" value="${item.quantity}" min="1" max="${item.stock}" data-product-id="${productId}">
                            <button class="remove-item-btn" data-product-id="${productId}">×</button>
                        </div>
                    `;
                    cartItemsList.appendChild(listItem);
                }
            }
            cartTotalSpan.textContent = formatEuroCurrencyJS(total);
            if (mobileCartItemCount) mobileCartItemCount.textContent = itemCount;
            if (mobileCartTotalSummary) mobileCartTotalSummary.textContent = formatEuroCurrencyJS(total);

            // Deaktiviere Checkout Button, wenn Warenkorb leer
            if (itemCount === 0) {
                checkoutButton.disabled = true;
            } else {
                checkoutButton.disabled = false;
            }
        };

        const sendCartUpdateRequest = async (action, productId, quantity = 0) => {
            const formData = new FormData();
            formData.append('action', action);
            formData.append('product_id', productId);
            if (quantity > 0) {
                formData.append('quantity', quantity);
            }

            try {
                const response = await fetch('api/cart_process.php', {
                    method: 'POST',
                    body: formData
                });
                const data = await response.json();
                if (data.success) {
                    updateCartDisplay(data.cart);
                    // Optionally show a temporary success message
                } else {
                    alert('Fehler: ' + (data.message || 'Etwas ist schief gelaufen.'));
                }
            } catch (error) {
                console.error('Fetch error:', error);
                alert('Netzwerkfehler beim Aktualisieren des Warenkorbs.');
            }
        };

        // Event Listener für "In den Warenkorb" Buttons
        document.querySelectorAll('.add-to-cart-btn').forEach(button => {
            button.addEventListener('click', () => {
                const productId = button.dataset.productId;
                const quantityInput = button.closest('.product-item').querySelector('.quantity-input');
                const quantity = parseInt(quantityInput.value);

                sendCartUpdateRequest('add', productId, quantity);
            });
        });

        // Event Listener für Mengenänderungen im Produkt-Grid (falls direkt dort geändert wird)
        document.querySelectorAll('.product-controls .quantity-input').forEach(input => {
            input.addEventListener('change', (event) => {
                let value = parseInt(event.target.value);
                const max = parseInt(event.target.max);
                const min = parseInt(event.target.min);

                if (isNaN(value) || value < min) {
                    value = min;
                }
                if (value > max) {
                    value = max;
                }
                event.target.value = value;
            });
        });


        // Event Listener für Mengenänderungen im Warenkorb (Delegation)
        cartItemsList.addEventListener('change', (event) => {
            if (event.target.classList.contains('cart-quantity-input')) {
                const productId = event.target.dataset.productId;
                let quantity = parseInt(event.target.value);
                const max = parseInt(event.target.max);
                const min = parseInt(event.target.min);

                if (isNaN(quantity) || quantity < min) {
                    quantity = min;
                }
                if (quantity > max) {
                    quantity = max;
                }
                event.target.value = quantity; // Update input field with clamped value
                sendCartUpdateRequest('update', productId, quantity);
            }
        });

        // Event Listener für "Entfernen" Buttons im Warenkorb (Delegation)
        cartItemsList.addEventListener('click', (event) => {
            if (event.target.classList.contains('remove-item-btn')) {
                const productId = event.target.dataset.productId;
                sendCartUpdateRequest('remove', productId);
            }
        });

        // --- Checkout Modal Logik ---
        const checkoutModal = document.getElementById('checkoutModal');
        const closeButton = document.querySelector('.close-button');
        const checkoutForm = document.getElementById('checkoutForm');
        const checkoutMessageDiv = document.getElementById('checkout-message');

        // Funktion, um das Modal zu öffnen
        const openCheckoutModal = () => {
            // Sicherstellen, dass der Warenkorb auf Mobile ausgeklappt ist, bevor das Modal geöffnet wird
            if (window.innerWidth <= 768 && cartSidebar.classList.contains('is-collapsed')) {
                cartSidebar.classList.remove('is-collapsed');
                cartSidebar.classList.add('is-expanded');
            }
            const currentCartItems = cartItemsList.querySelectorAll('.cart-item');
            if (currentCartItems.length > 0) {
                checkoutModal.style.display = 'flex'; // Use flex to center
                checkoutMessageDiv.style.display = 'none'; // Clear any previous messages
                checkoutMessageDiv.className = 'alert'; // Reset alert classes
            }
        };

        // Event Listener für den Checkout-Button im Warenkorb
        checkoutButton.addEventListener('click', openCheckoutModal);
        // Event Listener für den mobilen Checkout-Button (falls vorhanden und sichtbar)
        const mobileCheckoutButton = document.querySelector('.cart-header-mobile + .cart-body-content .checkout-button');
        if (mobileCheckoutButton) {
            mobileCheckoutButton.addEventListener('click', openCheckoutModal);
        }

        closeButton.addEventListener('click', () => {
            checkoutModal.style.display = 'none';
        });

        window.addEventListener('click', (event) => {
            if (event.target === checkoutModal) {
                checkoutModal.style.display = 'none';
            }
        });

        checkoutForm.addEventListener('submit', async (event) => {
            event.preventDefault(); // Prevent default form submission

            const formData = new FormData(checkoutForm);
            // Append the calculated total amount to the form data
            formData.append('cart_total', parseFloat(cartTotalSpan.textContent.replace(' €', '').replace(',', '.')));


            try {
                const response = await fetch('api/checkout_process.php', {
                    method: 'POST',
                    body: formData
                });
                const data = await response.json();

                checkoutMessageDiv.style.display = 'block';
                if (data.success) {
                    checkoutMessageDiv.classList.add('success');
                    checkoutMessageDiv.classList.remove('error');
                    checkoutMessageDiv.textContent = data.message;
                    checkoutForm.reset(); // Reset form
                    updateCartDisplay({}); // Clear cart display
                    setTimeout(() => {
                        checkoutModal.style.display = 'none';
                        // Optionally reload the page or redirect after successful order
                        // window.location.reload();
                    }, 3000);
                } else {
                    checkoutMessageDiv.classList.add('error');
                    checkoutMessageDiv.classList.remove('success');
                    checkoutMessageDiv.textContent = data.message;
                }
            } catch (error) {
                console.error('Fetch error:', error);
                checkoutMessageDiv.style.display = 'block';
                checkoutMessageDiv.classList.add('error');
                checkoutMessageDiv.classList.remove('success');
                checkoutMessageDiv.textContent = 'Netzwerkfehler: Die Bestellung konnte nicht verarbeitet werden.';
            }
        });

        // Initial cart display update on page load (if items exist in session)
        const initialCart = <?php echo json_encode($_SESSION['cart']); ?>;
        updateCartDisplay(initialCart);

        // --- Mobiler Warenkorb Toggle Logik ---
        const isMobile = () => window.innerWidth <= 768; // Definiere deine Mobile-Breakpoint

        const applyMobileCartState = () => {
            // Zeige/verstecke Desktop/Mobile Warenkorb Header basierend auf Bildschirmgröße
            const desktopHeader = cartSidebar.querySelector('.cart-header-desktop');
            const mobileHeader = cartSidebar.querySelector('.cart-header-mobile');

            // Lese die CSS-Variable für die Höhe aus dem Root-Element
            const rootStyles = getComputedStyle(document.documentElement);
            const mobileCollapsedHeight = parseFloat(rootStyles.getPropertyValue('--header-height-mobile-collapsed'));

            if (isMobile()) {
                if (desktopHeader) desktopHeader.style.display = 'none';
                if (mobileHeader) mobileHeader.style.display = 'flex'; // Mobile Header anzeigen

                // Sicherstellen, dass der Warenkorb zusammengeklappt ist, wenn Mobile-Modus aktiv wird
                if (!cartSidebar.classList.contains('is-expanded')) { // Nur wenn er nicht explizit ausgeklappt wurde
                    cartSidebar.classList.add('is-collapsed');
                    // Setze den Transform-Wert basierend auf der CSS-Variablen
                    cartSidebar.style.transform = `translateY(calc(100% - ${mobileCollapsedHeight}px))`;
                }
            } else {
                if (desktopHeader) desktopHeader.style.display = 'block'; // Desktop Header anzeigen
                if (mobileHeader) mobileHeader.style.display = 'none';

                // Auf Desktop-Größe alle mobilen Klassen entfernen und den normalen Zustand wiederherstellen
                cartSidebar.classList.remove('is-collapsed');
                cartSidebar.classList.remove('is-expanded');
                cartSidebar.style.transform = ''; // Reset transform
            }
        };

        // Event Listener für den mobilen Toggle-Button
        if (cartToggleButton) {
            cartToggleButton.addEventListener('click', () => {
                const rootStyles = getComputedStyle(document.documentElement);
                const mobileCollapsedHeight = parseFloat(rootStyles.getPropertyValue('--header-height-mobile-collapsed'));

                if (cartSidebar.classList.contains('is-collapsed')) {
                    cartSidebar.classList.remove('is-collapsed');
                    cartSidebar.classList.add('is-expanded');
                    cartSidebar.style.transform = 'translateY(0)'; // Ausgeklappt
                } else {
                    cartSidebar.classList.remove('is-expanded');
                    cartSidebar.classList.add('is-collapsed');
                    cartSidebar.style.transform = `translateY(calc(100% - ${mobileCollapsedHeight}px))`; // Zusammengeklappt
                }
            });
        }

        // Zustand bei Seitenladung und Größenänderung anwenden
        applyMobileCartState();
        window.addEventListener('resize', applyMobileCartState);


        // Sticky Header Scroll-Effekt
        const header = document.querySelector('header');
        window.addEventListener('scroll', () => {
            if (window.scrollY > 0) {
                header.classList.add('header-scrolled');
            } else {
                header.classList.remove('header-scrolled');
            }
        });
    });
</script>

==================================================
DATEINAME: src/partials/cart_content.php
--------------------------------------------------
<?php
// partials/cart_content.php
// Dieses Skript wird von index.php eingebunden, um den initialen Warenkorb anzuzeigen.
// Es geht davon aus, dass session_start() und ROOT_PATH bereits im aufrufenden Skript definiert wurden.

// Sicherstellen, dass der Warenkorb in der Session initialisiert ist
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
}

$cart = $_SESSION['cart'];
$totalAmount = 0;
?>

<div>
    <?php if (count($cart) > 0): ?>
        <ul id="cart-items">
            <?php foreach ($cart as $productId => $item):
                $itemTotal = $item['price'] * $item['quantity'];
                $totalAmount += $itemTotal;
            ?>
                <li class="cart-item">
                    <img src="<?= htmlspecialchars($item['image_url']) ?>" alt="<?= htmlspecialchars($item['name']) ?>" class="cart-item-img">
                    <div class="cart-item-details">
                        <h4><?= htmlspecialchars($item['name']) ?></h4>
                        <p><?= number_format($item['price'], 2, ',', '.') ?> € x</p>
                    </div>
                    <div class="cart-item-actions">
                        <input type="number" min="1" value="<?= htmlspecialchars($item['quantity']) ?>" data-product-id="<?= htmlspecialchars($productId) ?>" class="quantity-input">
                        <button class="remove-item-btn" data-product-id="<?= htmlspecialchars($productId) ?>">X</button>
                    </div>
                </li>
            <?php endforeach; ?>
        </ul>
        <p id="cart-total">Gesamt: <?= number_format($totalAmount, 2, ',', '.') ?> €</p>
    <?php else: ?>
        <p>Ihr Warenkorb ist leer.</p>
        <p id="cart-total">Gesamt: 0,00 €</p>
    <?php endif; ?>
</div>

==================================================
DATEINAME: src/templates/footer.php
--------------------------------------------------
<?php
// templates/footer.php
// Dieser Footer wird durch index.php eingebunden
?>

<footer class="main-footer">
    <div class="footer-content-wrapper">
        <div class="footer-container">
            <div class="footer-section contact-info">
                <h3>Früchte aus Portugal</h3>
                <p>© <?php echo date("Y"); ?> Früchte aus Portugal. Alle Rechte vorbehalten.</p>
                <p>Rosental 1, 53332 Bornheim</p>
                <p>E-Mail: <a href="mailto:info@früch.de">info@früch.de</a></p>
            </div>
            <div class="footer-section navigation">
                <h3>Navigation</h3>
                <ul>
                    <li><a href="/">Home</a></li>
                    <li><a href="/produkte">Produkte</a></li>
                    <li><a href="/geschichte">Geschichte</a></li>
                    <li><a href="/kontakt">Kontakt</a></li>
                    <li><a href="/warenkorb">Warenkorb</a></li>
                </ul>
            </div>
            <div class="footer-section legal">
                <h3>Rechtliches</h3>
                <ul>
                    <li><a href="/impressum">Impressum</a></li>
                    <li><a href="/datenschutz">Datenschutz</a></li>
                    <li><a href="/agb">AGB</a></li>
                    <li><a href="/widerrufsrecht">Widerrufsrecht</a></li>
                </ul>
            </div>
            <div class="footer-section social">
                <h3>Folge uns</h3>
                <div class="social-icons">
                    <!-- Annahme: Du hast diese Icons im assets-Ordner als _whatsapp.png und _instagram.png -->
                    <a href="https://www.efbornheim.de/" target="_blank" aria-label="Webseite"><img src="/-webseite.png" alt="Webseite"></a>
                    <a href="https://chat.whatsapp.com/BaBd04yeoGvDkcGZcRNkTI?mode=ac_t" target="_blank" aria-label="WhatsApp"><img src="/-WhatsApp.png" alt="WhatsApp"></a>
                    <a href="https://www.youtube.com/@efbornheim" target="_blank" aria-label="Youtube"><img src="/-youtube.png" alt="Youtube"></a>
                    <a href="https://www.instagram.com/efbornheim/" target="_blank" aria-label="Twitter"><img src="/-instagram.png" alt="Instagram"></a>
                </div>
            </div>
        </div>
        <div class="footer-bottom">
            Made with ❤️ in Germany
        </div>
    </div>
</footer>

<!-- Include the main JavaScript for sticky header (if it's not in another common JS file) -->
<script>
    document.addEventListener('DOMContentLoaded', () => {
        const header = document.querySelector('header');
        window.addEventListener('scroll', () => {
            if (window.scrollY > 0) {
                header.classList.add('header-scrolled');
            } else {
                header.classList.remove('header-scrolled');
            }
        });
    });
</script>

==================================================
DATEINAME: src/templates/header.php
--------------------------------------------------
<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Früchte aus Portugal</title>

    <!-- CSS-Dateien und Icons -->
    <link rel="stylesheet" href="/.main.css">
    <link rel="icon" type="image/x-icon" href="/_favicon.ico">
    <link rel="icon" type="image/png" href="/-logo.png">
    <link rel="apple-touch-icon" href="/-apple-touch-icon.png">
</head>
<body>
    <header>
        <div class="google-header-wrapper">
            <nav class="google-search-like-nav">
                <ul class="nav-options">
                    <li><a href="/">Home</a></li>
                    <li><a href="/shop">Bestellen</a></li>
                    <li><a href="/geschichte">Geschichte</a></li>
                    <li><a href="/kontakt">Kontakt</a></li>
                </ul>
                <a href="/spenden" class="cart-button">Spenden</a>
            </nav>
        </div>
    </header>

==================================================
DATEINAME: src/index.php
--------------------------------------------------
<?php

/**
 * Kern-Datei der Anwendung
 * Diese Datei verarbeitet alle Anfragen dank .htaccess
 */

// --- SETUP PHASE ---
// Konfigurationsdatei einbinden (Bleibt hier, da sie grundlegende Konstanten wie ROOT_PATH definiert)
require_once __DIR__ . '/config/config.php';

// Alle Hilfsdateien und Initialisierungen aus dem 'include'-Ordner laden
// Dies bindet startup.php, asset_handler.php, db.php, email.php, helpers.php und alle anderen hinzugefügten Dateien ein.
require_once __DIR__ . '/include/loader.php';

// Composer Autoload einbinden. Dies ist essenziell für PHPMailer.
// Stelle sicher, dass der 'vendor'-Ordner direkt unter deinem ROOT_PATH liegt.
require_once __DIR__  . '/vendor/autoload.php';

// Session starten (wichtig für den Warenkorb und Admin-Login)
if (session_status() == PHP_SESSION_NONE) {
    session_start();
}


// --- REQUEST PARSING PHASE ---
// Angeforderte URI extrahieren
// Beispiel: /ueber-uns -> ueber-uns
$request_uri = trim(parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH), '/');

// Segmente der URI aufteilen
$segments = explode('/', $request_uri);

// Das erste Segment als Modul-/Seitennamen verwenden, Standard ist 'home'
$page = !empty($segments[0]) ? $segments[0] : 'home';


// --- ASSET HANDLING PHASE ---
// Prüfen, ob eine Asset-Anfrage vorliegt und diese behandeln
// Die Funktion handleAssetRequest() ist in include/asset_handler.php definiert.
// Sie wird nur aktiv, wenn $page_name mit '_' beginnt (z.B. /_favicon.ico).
// Eine Anfrage wie /api/cart_process.php oder /admin wird hier nicht behandelt.
handleAssetRequest($page);


// --- API ROUTING PHASE ---
// Wenn das erste Segment 'api' ist, versuchen wir, die entsprechende API-Datei zu laden.
if ($page === 'api' && isset($segments[1])) {
    $api_file = ROOT_PATH . 'api/' . $segments[1];
    if (file_exists($api_file)) {
        require_once $api_file;
        exit(); // Wichtig: Beende das Skript nach dem Ausführen der API-Datei
    } else {
        header("HTTP/1.0 404 Not Found");
        require_once ROOT_PATH . 'modules/404.php';
        exit();
    }
}

// --- ADMIN ROUTING PHASE (NEU) ---
// Wenn das erste Segment 'admin' ist, laden wir den Admin-Einstiegspunkt.
if ($page === 'admin') {
    // Admin-Modul wird oft mit einem eigenen Layout oder speziellen <main> Tags behandelt
    // Für dieses Beispiel ist es einfacher, es direkt zu laden
    require_once ROOT_PATH . 'modules/admin.php';
    exit(); // Wichtig: Beende das Skript nach dem Ausführen der Admin-Seite
}


// --- PAGE / MODULE LOADING PHASE ---
// Seitennamen bereinigen, um nur alphanumerische Zeichen, Bindestriche, Unterstriche zu erlauben
$page = preg_replace('/[^a-zA-Z0-9\-_.]/', '', $page);

// Pfad zum Modul
$module_path = ROOT_PATH . 'modules/' . $page . '.php';

// Header der Seite einbinden
require_once ROOT_PATH . 'templates/header.php';

// Modul laden oder 404-Fehler anzeigen
if (file_exists($module_path)) {
    if ($page === 'home') {
        // GEÄNDERT: Für die Homepage wird ein neuer Wrapper um Hero-Sektion und Main-Inhalt gelegt.
        echo '<div class="content-area-wrapper">'; // NEUER CONTAINER FÜR STICKY FOOTER LOGIK
        require_once $module_path; // Lädt hero-section und main.site-content-wrapper
        echo '</div>'; // SCHLIESST NEUEN CONTAINER
    } else {
        // Für alle anderen Seiten, wrap in <main class="site-content-wrapper">
        // Diese Klasse sorgt für max-width und padding
        echo '<main class="site-content-wrapper">';
        require_once $module_path;
        echo '</main>';
    }
} else {
    // Wenn das Modul nicht existiert, 404-Status senden
    header("HTTP/1.0 404 Not Found");
    echo '<main class="site-content-wrapper">'; // 404-Seite auch in <main> für konsistentes Layout
    require_once ROOT_PATH . 'modules/404.php';
    echo '</main>';
}

// Footer der Seite einbinden
require_once ROOT_PATH . 'templates/footer.php';

?>

<link rel="icon" type="image/x-icon" href="/_favicon.ico">
<link rel="icon" type="image/png" href="/-logo.png">
<link rel="apple-touch-icon" href="/-apple-touch-icon.png">

==================================================
DATEINAME: src/.htaccess
--------------------------------------------------
RewriteEngine On
RewriteBase "/"

# Wenn die Anfrage für eine existierende Datei ist, bearbeite sie direkt
RewriteCond %{REQUEST_FILENAME} -f
RewriteRule ^ - [L]

# Wenn die Anfrage für ein existierendes Verzeichnis ist, bearbeite es direkt
RewriteCond %{REQUEST_FILENAME} -d
RewriteRule ^ - [L]

# Alle anderen Anfragen werden an index.php weitergeleitet
RewriteRule ^(.*)$ index.php [QSA,L]


==================================================
DATEINAME: Dockerfile
--------------------------------------------------
# Verwenden Sie ein offizielles PHP-Image mit Apache
FROM php:8.2-apache

# Installieren Sie den MySQL PDO-Treiber für die Datenbankverbindung
RUN docker-php-ext-install pdo pdo_mysql

# Aktivieren Sie mod_rewrite für unsere Regeln
RUN a2enmod rewrite

# Kopieren Sie die individuelle Apache-Konfigurationsdatei
COPY my-custom.conf /etc/apache2/conf-available/my-custom.conf

# Aktivieren Sie Ihre individuelle Apache-Konfigurationsdatei
RUN a2enconf my-custom

# Kopieren Sie alle Webseiten-Dateien in den DocumentRoot
COPY ./src /var/www/html/

# Optional: Stellen Sie sicher, dass Ihre 404.html-Seite ebenfalls kopiert wird,
# falls sie nicht bereits im ./src-Verzeichnis enthalten ist, das oben kopiert wird.
# Wenn sie in ./src liegt, ist dieser Schritt überflüssig.
# COPY ./src/404.html /var/www/html/404.html 

# Stellen Sie sicher, dass das 'config'-Verzeichnis im DocumentRoot existiert.
# Dies ist wichtig, damit die sensitive_config.php dort platziert werden kann.
RUN mkdir -p /var/www/html/config

# Generieren Sie die sensitive_config.php während des Builds.
# Diese Datei enthält PHP-Code, der zur Laufzeit die Umgebungsvariablen ausliest.
# Die Werte werden in Coodlify in den "Environment Variables" definiert.
RUN cat << 'EOF' > /var/www/html/config/sensitive_config.php
<?php
// config/sensitive_config.php

// Diese Datei wurde automatisch während des Docker-Builds erstellt.
// Ihre Werte werden zur Laufzeit aus den Umgebungsvariablen gelesen,
// die in Coodlify gesetzt sind. Bearbeiten Sie diese Datei NICHT direkt im Container.

// --- DATENBANK-KONFIGURATION ---
define('DB_HOST', getenv('DB_HOST') ?: 'localhost'); // Standardwert für Entwicklung/Fallback
define('DB_USER', getenv('DB_USER') ?: 'root');
define('DB_PASS', getenv('DB_PASS') ?: ''); // Wichtige Umgebungsvariable
define('DB_NAME', getenv('DB_NAME') ?: 'mydatabase');
define('DB_CHARSET', getenv('DB_CHARSET') ?: 'utf8mb4');

// --- E-MAIL-KONFIGURATION (SMTP) ---
define('MAIL_HOST', getenv('MAIL_HOST') ?: 'smtp.example.com');
define('MAIL_USERNAME', getenv('MAIL_USERNAME') ?: 'noreply@example.com');
define('MAIL_PASSWORD', getenv('MAIL_PASSWORD') ?: ''); // Wichtige Umgebungsvariable
define('MAIL_PORT', (int)getenv('MAIL_PORT') ?: 587); // Typ-Casting zu int
define('MAIL_ENCRYPTION', getenv('MAIL_ENCRYPTION') ?: 'tls');

// Absender-Details für E-Mails
define('MAIL_FROM_EMAIL', getenv('MAIL_FROM_EMAIL') ?: 'noreply@example.com');
define('MAIL_FROM_NAME', getenv('MAIL_FROM_NAME') ?: 'Your Application');

// Für den Login auf der Admin Seite
define('ADMIN_PASSWORD_HASH', getenv('ADMIN_PASSWORD_HASH') ?: ''); // Wichtige Umgebungsvariable

?>
EOF

# Konfigurieren Sie Apache, um auf Port 801 zu lauschen
EXPOSE 801
RUN echo "Listen 801" >> /etc/apache2/ports.conf

# Passen Sie die Standard-VirtualHost-Konfiguration an, um auf Port 801 zu lauschen
RUN sed -i -e 's/VirtualHost \*:80/VirtualHost \*:801/' /etc/apache2/sites-available/000-default.conf
RUN sed -i -e 's/VirtualHost _default_:80/VirtualHost _default_:801/' /etc/apache2/sites-available/default-ssl.conf

# WICHTIG: Setzen Sie AllowOverride All für den DocumentRoot, damit mod_rewrite-Regeln funktionieren
RUN sed -i 's/AllowOverride None/AllowOverride All/' /etc/apache2/sites-available/000-default.conf

# Apache wird als Standard-CMD des Basis-Images gestartet (apache2-foreground)
CMD ["apache2-foreground"]

==================================================
DATEINAME: composer.json
--------------------------------------------------
{
        "name": "tigerkopf/portugal-fruits",
        "description": "Eine einfache PHP-Anwendung für Früchte aus Portugal.",
        "type": "project",
        "license": "MIT",
        "authors": [
            {
                "name": "TigerKopf",
                "email": "kopftiger678@gmail.com"
            }
        ],
        "minimum-stability": "dev",
        "prefer-stable": true,
        "require": {
            "php": ">=8.2",
            "beberlei/assert": "^3.3",
            "thecodingmachine/safe": "^3.3",
            "ext-pdo": "*",
            "ext-pdo_mysql": "*",
                "phpmailer/phpmailer": "^6.10"
        },
        "autoload": {
            "psr-4": {
                "App\\": "app/"
            }
        },
        "config": {
            "allow-plugins": {
                "php-http/discovery": true,
                "composer/package-versions-deprecated": true
            }
        }
    }


