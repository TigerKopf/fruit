==================================================
DATEINAME: src/assets/style/admin.css
--------------------------------------------------
/* Admin Panel spezifische Stile */
.admin-container {
    display: flex;
    flex: 1;
    width: 100%;
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 var(--spacing-md);
    box-sizing: border-box;
    /* GEÄNDERT: Abstand oben angepasst */
    margin-top: calc(var(--header-height) + var(--spacing-lg));
    margin-bottom: var(--spacing-lg);

    background: var(--color-background-white);
    border-radius: var(--border-radius-md);
    box-shadow: 0 4px 10px var(--color-shadow-light);
    overflow: hidden;
}

.admin-sidebar {
    width: 200px;
    background-color: #343a40;
    color: #fff;
    padding: var(--spacing-lg);
    flex-shrink: 0;
}
.admin-sidebar h2 {
    color: #fff;
    text-align: center;
    margin-bottom: var(--spacing-xl);
    font-size: 1.6em;
    font-weight: 600;
}
.admin-sidebar ul {
    list-style: none;
    padding: 0;
    margin: 0;
}
.admin-sidebar li {
    margin-bottom: var(--spacing-sm);
}
.admin-sidebar a {
    color: #adb5bd;
    text-decoration: none;
    display: block;
    padding: var(--spacing-sm) var(--spacing-md);
    border-radius: var(--border-radius-sm);
    transition: background-color 0.2s ease, color 0.2s ease;
    font-weight: 500;
}
.admin-sidebar a:hover, .admin-sidebar a.active {
    background-color: #495057;
    color: #fff;
}
.admin-content {
    flex-grow: 1;
    padding: var(--spacing-xl);
}
.admin-content h1 {
    color: var(--color-text-dark);
    margin-bottom: var(--spacing-lg);
    border-bottom: 1px solid var(--color-border);
    padding-bottom: var(--spacing-sm);
    font-size: 2.2em;
    font-weight: 700;
}
.admin-content h3 {
    color: var(--color-text-dark);
    margin-top: var(--spacing-xl);
    margin-bottom: var(--spacing-md);
    font-size: 1.6em;
    font-weight: 600;
}
.admin-content h4 {
    margin-top: var(--spacing-md);
    margin-bottom: var(--spacing-sm);
    color: var(--color-text-dark);
    font-size: 1.2em;
    font-weight: 500;
}
.admin-content table {
    width: 100%;
    border-collapse: collapse;
    margin-bottom: var(--spacing-md);
    box-shadow: 0 2px 5px var(--color-shadow-light);
    border-radius: var(--border-radius-sm);
    overflow: hidden;
}
.admin-content th, .admin-content td {
    border: 1px solid var(--color-border);
    padding: var(--spacing-sm);
    text-align: left;
    font-size: 0.9em;
}
.admin-content th {
    background-color: #F0F4F8;
    font-weight: 600;
    color: var(--color-text-dark);
}
.admin-content td {
    color: var(--color-text-medium);
}
.admin-content tr:nth-child(even) {
    background-color: #FDFEFE;
}
.admin-content .action-buttons {
    margin-top: var(--spacing-md);
    margin-bottom: var(--spacing-md);
}
.admin-content .action-buttons a, .admin-content .action-buttons button {
    display: inline-block;
    padding: var(--spacing-xs) var(--spacing-sm);
    margin-right: var(--spacing-xs);
    border: none;
    border-radius: var(--border-radius-sm);
    cursor: pointer;
    text-decoration: none;
    font-size: 0.85em;
    font-weight: 500;
    transition: background-color 0.2s ease, transform 0.1s ease;
}
.admin-content .action-buttons .edit-btn { background-color: var(--color-primary); color: white; }
.admin-content .action-buttons .edit-btn:hover { background-color: #2F5AA9; transform: translateY(-1px); }
.admin-content .action-buttons .delete-btn { background-color: #EF4444; color: white; }
.admin-content .action-buttons .delete-btn:hover { background-color: #DC2626; transform: translateY(-1px); }
.admin-content .action-buttons .add-btn { background-color: var(--color-secondary); color: white; }
.admin-content .action-buttons .add-btn:hover { background-color: #00A656; transform: translateY(-1px); }

.admin-form-container {
    background-color: #FDFEFE;
    padding: var(--spacing-lg);
    border-radius: var(--border-radius-md);
    margin-top: var(--spacing-lg);
    border: 1px solid var(--color-border);
    box-shadow: 0 2px 8px var(--color-shadow-light);
}
.admin-form-container label {
    display: block;
    margin-bottom: var(--spacing-xs);
    font-weight: 500;
    color: var(--color-text-dark);
    font-size: 0.95em;
}
.admin-form-container input[type="text"],
.admin-form-container input[type="number"],
.admin-form-container input[type="email"],
.admin-form-container textarea,
.admin-form-container select,
.admin-form-container input[type="datetime-local"] {
    width: 100%;
    padding: var(--spacing-sm);
    margin-bottom: var(--spacing-md);
    border: 1px solid var(--color-border);
    border-radius: var(--border-radius-sm);
    font-size: 1em;
    box-sizing: border-box;
    color: var(--color-text-dark);
    transition: border-color 0.2s ease, box-shadow 0.2s ease;
}
.admin-form-container input:focus,
.admin-form-container select:focus,
.admin-form-container textarea:focus {
    outline: none;
    border-color: var(--color-primary);
    box-shadow: 0 0 0 3px rgba(52, 104, 192, 0.2);
}
.admin-form-container button[type="submit"] {
    background-color: var(--color-primary);
    color: white;
    padding: var(--spacing-sm) var(--spacing-md);
    border: none;
    border-radius: var(--border-radius-sm);
    cursor: pointer;
    font-size: 1em;
    font-weight: 500;
    transition: background-color 0.2s ease, transform 0.1s ease;
}
.admin-form-container button[type="submit"]:hover {
    background-color: #2F5AA9;
    transform: translateY(-1px);
}

/* Dashboard Stat Cards */
.dashboard-stats {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: var(--spacing-md);
    margin-bottom: var(--spacing-xl);
}
.stat-card {
    background-color: var(--color-background-white);
    padding: var(--spacing-md);
    border-radius: var(--border-radius-md);
    text-align: center;
    box-shadow: 0 2px 8px var(--color-shadow-light);
    border: 1px solid var(--color-border);
    transition: transform 0.2s ease, box-shadow 0.2s ease;
}
.stat-card:hover {
    transform: translateY(-3px);
    box-shadow: 0 4px 12px var(--color-shadow-medium);
}
.stat-card h3 {
    margin: 0 0 var(--spacing-sm) 0;
    color: var(--color-text-medium);
    font-size: 1.1em;
    font-weight: 500;
}
.stat-card p {
    font-size: 2.2em;
    font-weight: 700;
    color: var(--color-primary);
    margin: 0;
}
.stat-card.income-positive p { color: var(--color-secondary); }
.stat-card.income-negative p { color: #EF4444; }


/* Dashboard Chart Container */
.chart-container {
    background-color: var(--color-background-white);
    padding: var(--spacing-md);
    border-radius: var(--border-radius-md);
    box-shadow: 0 2px 8px var(--color-shadow-light);
    border: 1px solid var(--color-border);
    margin-top: var(--spacing-xl);
    min-height: 300px;
    display: flex;
    justify-content: center;
    align-items: center;
    color: var(--color-text-medium);
    font-size: 1.1em;
}
.chart-container canvas {
    max-width: 100%;
    height: auto;
}

==================================================
DATEINAME: src/assets/style/alerts.css
--------------------------------------------------
/* General Alerts */
.alert {
    padding: var(--spacing-sm) var(--spacing-md);
    margin-top: var(--spacing-sm);
    margin-bottom: var(--spacing-md);
    border-radius: var(--border-radius-sm);
    font-size: 0.95em;
    display: flex;
    align-items: center;
    gap: var(--spacing-xs);
}
.alert.success {
    background-color: #D4EDDA;
    color: #155724;
    border-color: #C3E6CB;
}
.alert.error {
    background-color: #F8D7DA;
    color: #721C24;
    border-color: #F5C6CB;
}

==================================================
DATEINAME: src/assets/style/base.css
--------------------------------------------------
/* Grundlegende Stile & Sticky Footer Layout */
html, body {
    height: 100%;
    margin: 0;
    padding: 0;
    display: flex;
    flex-direction: column;
    font-family: var(--font-family-base);
    font-size: var(--font-size-base);
    background-color: var(--color-background-light);
    color: var(--color-text-dark);
    line-height: var(--line-height-base);
    -webkit-font-smoothing: antialiased; /* Für glattere Schrift auf Webkit-Browsern */
    -moz-osx-font-smoothing: grayscale; /* Für glattere Schrift auf Firefox */
}

/* NEU: Dieser Wrapper nimmt den gesamten verfügbaren Platz ein */
#page-content-wrapper {
    flex-grow: 1; /* Sorgt dafür, dass dieser Bereich den gesamten freien Platz im Flex-Container (body) einnimmt */
    display: flex; /* Auch als Flex-Container, um inneren Content zu kontrollieren */
    flex-direction: column; /* Sicherstellen, dass die inneren Elemente untereinander liegen */
}

==================================================
DATEINAME: src/assets/style/cart.css
--------------------------------------------------
/* ==========================================================================
   Shop & Warenkorb Komponenten-Stile (Desktop-First)
   ========================================================================== */

/* Spezifische Shop-Stile für Produktliste im Main */
.category-section {
    margin-bottom: var(--spacing-xl);
}

.category-section h2 {
    font-size: 2em;
    font-weight: 600;
    color: var(--color-text-dark);
    padding-bottom: var(--spacing-sm);
    margin-bottom: var(--spacing-lg);
    border-bottom: 1px solid var(--color-border);
}

.product-grid {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: var(--spacing-lg);
}

.product-item {
    background: var(--color-background-white);
    border: 1px solid var(--color-border);
    border-radius: var(--border-radius-md);
    padding: var(--spacing-md);
    text-align: center;
    box-shadow: 0 4px 12px var(--color-shadow-light);
    transition: transform 0.2s ease, box-shadow 0.2s ease;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
}

.product-item:hover {
    transform: translateY(-5px);
    box-shadow: 0 6px 20px var(--color-shadow-medium);
}

.product-image-container {
    position: relative;
    margin-bottom: calc(var(--spacing-md) + 15px); /* Platz für überlappenden Titel */
}

.product-item img {
    width: 100%;
    height: 200px;
    object-fit: cover;
    border-radius: var(--border-radius-md);
    display: block;
}

.product-item h3 {
    position: absolute;
    bottom: -15px; /* Hängt über den unteren Rand des Bildes */
    left: 50%;
    transform: translateX(-50%);
    background-color: var(--color-background-white);
    padding: var(--spacing-xs) var(--spacing-md);
    border-radius: var(--border-radius-lg); /* Pillenform */
    box-shadow: 0 3px 8px var(--color-shadow-medium);
    font-size: 1.4em;
    font-weight: 600;
    color: var(--color-text-dark);
    white-space: nowrap;
    margin: 0;
    line-height: 1.3;
}

.product-quantity-price-line {
    color: var(--color-text-medium);
    font-size: 0.95em;
    line-height: 1.4;
    margin-bottom: var(--spacing-md);
}

.product-quantity-price-line .product-price-value {
    font-size: 1.4em;
    font-weight: 700;
    color: var(--color-accent);
    margin-left: 4px;
    white-space: nowrap;
}

.product-controls {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: var(--spacing-sm);
    margin-top: auto; /* Sorgt dafür, dass Controls am unteren Rand bleiben */
}

.product-controls input[type="number"] {
    width: 50px;
    padding: var(--spacing-sm);
    border: 1px solid var(--color-border);
    border-radius: var(--border-radius-md);
    text-align: center;
    font-size: 1em;
    color: var(--color-text-dark);
    -moz-appearance: textfield;
}

.product-controls input::-webkit-outer-spin-button,
.product-controls input::-webkit-inner-spin-button {
    -webkit-appearance: none;
    margin: 0;
}

.product-controls .add-to-cart-btn {
    background-color: var(--color-primary);
    color: var(--color-background-white);
    border: none;
    padding: var(--spacing-sm) var(--spacing-lg);
    border-radius: var(--border-radius-lg);
    cursor: pointer;
    font-size: 1em;
    font-weight: 600;
    transition: background-color 0.2s ease, box-shadow 0.2s ease, transform 0.2s ease;
    display: inline-flex;
    align-items: center;
    gap: var(--spacing-xs);
}

.product-controls .add-to-cart-btn:hover {
    background-color: #2F5AA9;
    box-shadow: 0 4px 10px var(--color-shadow-light);
    transform: translateY(-2px);
}

.product-controls .add-to-cart-btn[disabled] {
    background-color: var(--color-background-white);
    color: var(--color-text-light);
    border: 1px solid var(--color-border);
    cursor: not-allowed;
    pointer-events: none;
}

.product-controls .add-to-cart-btn[disabled]:hover {
    box-shadow: none;
    transform: none;
}


/* Warenkorb-Seitenleiste (Desktop) */
.cart-sidebar {
    position: sticky;
    top: calc(var(--header-height) + var(--spacing-lg));
    align-self: flex-start;
    flex-shrink: 0;
    width: 320px;
    max-height: calc(var(--cart-max-height-ratio) * 100vh - var(--spacing-xl));
    z-index: 10;
    display: flex;
    flex-direction: column;
    gap: var(--spacing-md);
}

.cart-header-desktop {
    background-color: var(--color-background-white);
    border: 1px solid var(--color-border);
    border-radius: var(--border-radius-md);
    padding: var(--spacing-md);
    box-shadow: 0 2px 5px var(--color-shadow-light);
}

.cart-header-desktop h2 {
    font-size: 1.8em;
    font-weight: 600;
    color: var(--color-text-dark);
    margin: 0;
}

.cart-header-mobile { display: none; } /* Standardmäßig versteckt */

.cart-body-content {
    background-color: var(--color-background-white);
    border: 1px solid var(--color-border);
    border-radius: var(--border-radius-md);
    box-shadow: 0 2px 8px var(--color-shadow-light);
    padding: var(--spacing-md);
    flex-grow: 1;
    display: flex;
    flex-direction: column;
    overflow-y: hidden;
}

.cart-items-scrollable-wrapper {
    flex-grow: 1;
    overflow-y: auto;
    padding-right: var(--spacing-xs);
    margin-right: calc(-1 * var(--spacing-xs));
    mask-image: linear-gradient(to bottom, black 80%, transparent 100%);
    -webkit-mask-image: linear-gradient(to bottom, black 80%, transparent 100%);
}

#cart-items {
    list-style: none;
    padding: 0;
    margin: 0;
}

.cart-item {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding-bottom: var(--spacing-md);
    margin-bottom: var(--spacing-md);
    border-bottom: 1px solid var(--color-border);
}
.cart-item:last-child {
    border-bottom: none;
    margin-bottom: 0;
    padding-bottom: 0;
}

.cart-item-image {
    width: 50px;
    height: 50px;
    object-fit: cover;
    border-radius: var(--border-radius-sm);
    margin-right: var(--spacing-sm);
    flex-shrink: 0;
}

.cart-item-info {
    flex-grow: 1;
    margin-right: var(--spacing-sm);
}
.cart-item-info h4 {
    margin: 0;
    font-size: 1.05em;
    font-weight: 500;
    color: var(--color-text-dark);
}
.cart-item-info p {
    margin: 4px 0 0;
    font-size: 0.9em;
    font-weight: 600;
    color: var(--color-accent);
}

.cart-item-controls {
    display: flex;
    align-items: center;
    gap: var(--spacing-xs);
    flex-shrink: 0;
}

.cart-item-controls input[type="number"] {
    width: 40px;
    padding: var(--spacing-xs) 0;
    border: 1px solid var(--color-border);
    border-radius: var(--border-radius-sm);
    text-align: center;
    font-size: 0.9em;
    color: var(--color-text-dark);
    -moz-appearance: textfield;
}

.cart-item-controls input::-webkit-outer-spin-button,
.cart-item-controls input::-webkit-inner-spin-button {
    -webkit-appearance: none;
    margin: 0;
}

.cart-item-controls .remove-item-btn {
    background: none;
    border: none;
    color: var(--color-text-light);
    cursor: pointer;
    font-size: 1.4em;
    padding: 0 var(--spacing-xs);
    line-height: 1;
    transition: color 0.2s ease, transform 0.2s ease;
}
.cart-item-controls .remove-item-btn:hover {
    color: var(--color-accent);
    transform: scale(1.1);
}

#cart-total-container {
    border-top: 1px solid var(--color-border);
    padding-top: var(--spacing-md);
    margin-top: auto; /* Drückt den Footer-Teil nach unten */
    display: flex;
    justify-content: space-between;
    align-items: baseline;
    flex-shrink: 0;
}
#cart-total-container span {
    font-size: 1.1em;
    font-weight: 500;
    color: var(--color-text-dark);
}
#cart-total {
    font-size: 1.8em;
    font-weight: 700;
    color: var(--color-accent);
    margin-left: var(--spacing-sm);
}

.checkout-button {
    width: 100%;
    background-color: var(--color-secondary);
    color: var(--color-background-white);
    border: none;
    padding: var(--spacing-sm) var(--spacing-md);
    border-radius: var(--border-radius-md);
    cursor: pointer;
    font-size: 1.05em;
    font-weight: 600;
    margin-top: var(--spacing-md);
    transition: background-color 0.2s ease, box-shadow 0.2s ease, transform 0.2s ease;
    flex-shrink: 0;
}
.checkout-button:hover {
    background-color: #00A656;
    box-shadow: 0 4px 10px var(--color-shadow-light);
    transform: translateY(-2px);
}


/* ==========================================================================
   Responsive Anpassungen
   ========================================================================== */
@media (max-width: 1400px) {
    .site-content-wrapper,
    .google-search-like-nav,
    .google-header-wrapper,
    .footer-content-wrapper,
    .admin-container {
        max-width: 100%;
        padding-left: var(--spacing-md);
        padding-right: var(--spacing-md);
        transform: translateX(0); /* Gilt für mehrere Elemente */
    }
}

@media (max-width: 992px) { /* Tablet / Kleinere Desktops */
    .admin-container {
        flex-direction: column;
        margin-top: calc(var(--header-height) + var(--spacing-md));
        margin-bottom: var(--spacing-md);
    }
    .admin-sidebar {
        width: 100%;
        order: -1;
        margin-bottom: var(--spacing-md);
    }
    .admin-content { padding: var(--spacing-lg); }

    .product-grid {
        grid-template-columns: repeat(2, 1fr);
        gap: var(--spacing-md);
    }

    .footer-container {
        grid-template-columns: repeat(2, 1fr);
        gap: var(--spacing-md);
    }
    .footer-section { margin-bottom: 0; }

    .dashboard-stats {
        grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));
    }
}

@media (max-width: 768px) { /* Mobilgeräte */
    body {
        /* Wichtiger Abstandshalter, damit der fixe Warenkorb nichts verdeckt! */
        padding-bottom: calc(var(--header-height-mobile-collapsed) + var(--spacing-sm));
    }
    
    .site-content-wrapper, .admin-container {
        flex-direction: column;
        margin-top: calc(var(--header-height-mobile-collapsed) + var(--spacing-md));
        transform: none; /* KORREKTUR: Hebt das transform auf, damit position:fixed wieder funktioniert */
    }
    
    main {
        order: 1;
        margin-right: 0;
        margin-bottom: var(--spacing-md);
        box-shadow: none; /* Auf Mobilgeräten oft überflüssig */
    }

    /* Mobile Warenkorb-Neugestaltung als Bottom-Drawer */
    .cart-sidebar {
        position: fixed;
        bottom: 0;
        left: 0;
        right: 0;
        width: 100%;
        top: auto;
        max-height: calc(var(--cart-max-height-ratio) * 100vh);
        border-radius: var(--border-radius-md) var(--border-radius-md) 0 0;
        box-shadow: 0 -4px 15px var(--color-shadow-medium);
        transform: translateY(calc(100% - var(--header-height-mobile-collapsed))); 
        transition: transform 0.3s ease-in-out;
        z-index: 100;
        background-color: var(--color-background-white);
        gap: 0;
    }
    .cart-sidebar.is-expanded {
        transform: translateY(0); /* Komplett sichtbar */
    }
    .cart-sidebar.is-collapsed {
        overflow-y: hidden; /* Verhindert Scrollen im geschlossenen Zustand */
    }
    .cart-sidebar.is-collapsed .cart-body-content { 
        display: none; /* Inhalt ausblenden, wenn zugeklappt */
    }

    .cart-header-desktop { display: none; }
    .cart-header-mobile {
        display: flex;
        justify-content: space-between;
        align-items: center;
        background-color: var(--color-primary);
        color: white;
        padding: var(--spacing-sm) var(--spacing-md);
        border-radius: var(--border-radius-md) var(--border-radius-md) 0 0;
        cursor: pointer;
        font-weight: 600;
        font-size: 1.1em;
        position: relative;
        z-index: 101;
    }

    .cart-toggle-button {
        background: none;
        border: none;
        color: white;
        font-size: 1.2em;
        cursor: pointer;
        line-height: 1;
        display: flex;
        align-items: center;
        gap: var(--spacing-xs);
    }

    .cart-body-content {
        max-height: calc(var(--cart-max-height-ratio) * 100vh - var(--header-height-mobile-collapsed));
        background-color: transparent;
        border: none;
        border-radius: 0;
        box-shadow: none;
        padding: var(--spacing-md);
    }

    .footer-container {
        grid-template-columns: 1fr;
        gap: var(--spacing-md);
    }
    .footer-section { margin-bottom: var(--spacing-md); }
    .footer-section:last-child { margin-bottom: 0; }
}

@media (max-width: 500px) { /* Kleinere Mobilgeräte */
    .site-content-wrapper, .admin-container {
        margin-top: calc(var(--header-height-mobile-collapsed) + var(--spacing-sm));
        padding: 0 var(--spacing-sm);
    }
    main { padding: var(--spacing-md); }

    .product-grid { grid-template-columns: 1fr; }
    .product-item img { height: 160px; }
    .product-controls { flex-direction: column; }
    .product-controls .add-to-cart-btn { width: 100%; }
}

==================================================
DATEINAME: src/assets/style/disclaimer.css
--------------------------------------------------
/* src/assets/style/disclaimer.css */

.disclaimer-modal {
    display: flex;
    position: fixed;
    z-index: 2000; /* Muss über allem anderen liegen */
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    overflow: hidden; /* Verhindert Scrollbars für das Modal-Overlay selbst */
    background-color: rgba(0,0,0,0.8); /* Starker Overlay */
    justify-content: center;
    align-items: center;
    backdrop-filter: blur(5px); /* Optional: Unscharfer Hintergrund */
    animation: fadeIn 0.5s ease-out;
}

.disclaimer-modal-content {
    background-color: var(--color-background-white);
    margin: var(--spacing-md); /* Mindestabstand zum Rand */
    padding: var(--spacing-xl) var(--spacing-lg);
    border: 1px solid var(--color-border);
    border-radius: var(--border-radius-md);
    max-width: 650px; /* Breite anpassen */
    width: 90%; /* Standardbreite */
    box-shadow: 0 12px 40px rgba(0,0,0,0.5); /* Tieferer Schatten */
    text-align: center;
    position: relative;
    animation: zoomIn 0.4s cubic-bezier(0.68, -0.55, 0.27, 1.55);
    display: flex; /* Für interne Ausrichtung */
    flex-direction: column;
    gap: var(--spacing-sm);
    box-sizing: border-box; /* Padding und Border in Breite/Höhe berücksichtigen */
}

@keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
}

@keyframes zoomIn {
    from { transform: scale(0.8); opacity: 0; }
    to { transform: scale(1); opacity: 1; }
}

.disclaimer-modal-content h2 {
    color: var(--color-primary); /* Blau, nicht grelles Rot */
    font-size: 2.5em; /* Größer und klarer */
    margin-bottom: var(--spacing-lg);
    border-bottom: 1px solid var(--color-border);
    padding-bottom: var(--spacing-sm);
    font-weight: 700;
    line-height: 1.2;
}

.disclaimer-modal-content p {
    font-size: 1.05em;
    color: var(--color-text-dark);
    margin-bottom: var(--spacing-sm); /* Etwas mehr Abstand */
    line-height: 1.6;
}

.disclaimer-modal-content p strong {
    color: var(--color-accent); /* Orange-Akzent für Wichtigkeit */
    font-weight: 700;
}

.disclaimer-modal-content ul {
    list-style: disc inside; /* Punkt ist jetzt innerhalb */
    text-align: left;
    margin: var(--spacing-sm) var(--spacing-md) var(--spacing-lg) var(--spacing-lg);
    padding: 0;
    color: var(--color-text-medium);
    border-left: 3px solid var(--color-primary-lightest); /* Dezente Abgrenzung */
    padding-left: var(--spacing-md);
}
.disclaimer-modal-content ul li {
    margin-bottom: var(--spacing-xs);
    font-size: 1em;
    line-height: 1.4;
}
.disclaimer-modal-content ul li strong {
    color: var(--color-text-dark); /* Auch hier akzentuierter Text */
    font-weight: 600;
}
.disclaimer-modal-content ul li a {
    color: var(--color-primary); /* Link-Farbe */
    text-decoration: underline;
    transition: color 0.2s ease;
}
.disclaimer-modal-content ul li a:hover {
    color: var(--color-accent);
}

.disclaimer-button-wrapper {
    margin-top: var(--spacing-lg);
}

.disclaimer-accept-btn {
    background-color: #EF4444; /* Bleibt Rot während Countdown */
    color: white;
    padding: var(--spacing-md) var(--spacing-xl); /* Größerer Button */
    border: none;
    border-radius: var(--border-radius-md);
    cursor: not-allowed;
    font-size: 1.2em; /* Größere Schrift */
    font-weight: 700;
    width: 100%;
    max-width: 350px;
    margin-left: auto;
    margin-right: auto;
    display: block;
    transition: background-color 0.3s ease, transform 0.2s ease, box-shadow 0.3s ease, opacity 0.3s ease;
    box-shadow: 0 5px 15px rgba(0,0,0,0.3); /* Kräftigerer Schatten */
}

.disclaimer-accept-btn[disabled] {
    opacity: 0.8; /* Leicht gedimmt, wenn disabled */
    cursor: not-allowed;
    background-color: #EF4444; /* Bleibt rot im disabled Zustand */
    box-shadow: 0 3px 10px rgba(0,0,0,0.2); /* Weniger Schatten */
    transform: translateY(0); /* Keine Verschiebung */
}

.disclaimer-accept-btn:not([disabled]) {
    background-color: var(--color-secondary); /* Akzeptiert: Grün wie Action-Buttons */
    cursor: pointer;
}
.disclaimer-accept-btn:not([disabled]):hover {
    background-color: #00A656; /* Dunkleres Grün */
    transform: translateY(-3px);
    box-shadow: 0 8px 20px rgba(0,0,0,0.4);
}

.disclaimer-bottom-note {
    font-size: 0.9em;
    color: var(--color-text-light);
    margin-top: var(--spacing-sm);
    margin-bottom: 0;
}

/* Responsive Anpassungen */
@media (max-width: 768px) {
    .disclaimer-modal-content {
        padding: var(--spacing-lg) var(--spacing-sm);
    }
    .disclaimer-modal-content h2 {
        font-size: 2em;
        margin-bottom: var(--spacing-md);
    }
    .disclaimer-modal-content p {
        font-size: 1em;
    }
    .disclaimer-modal-content ul {
        margin: var(--spacing-xs) var(--spacing-sm) var(--spacing-lg) var(--spacing-sm);
        padding-left: var(--spacing-sm);
    }
    .disclaimer-accept-btn {
        max-width: 300px;
        font-size: 1.1em;
        padding: var(--spacing-sm) var(--spacing-md);
    }
    .disclaimer-bottom-note {
        font-size: 0.75em;
    }
}
@media (max-width: 500px) {
    .disclaimer-modal-content {
        padding: var(--spacing-md) var(--spacing-xs);
    }
    .disclaimer-modal-content h2 {
        font-size: 1.6em;
        margin-bottom: var(--spacing-sm);
        padding-bottom: var(--spacing-xs);
    }
    .disclaimer-modal-content p {
        font-size: 0.95em;
        margin-bottom: var(--spacing-xs);
    }
    .disclaimer-modal-content ul {
        margin: var(--spacing-xs) 0 var(--spacing-md) 0;
        padding-left: var(--spacing-md);
    }
    .disclaimer-modal-content ul li {
        font-size: 0.9em;
    }
    .disclaimer-accept-btn {
        max-width: 100%;
        font-size: 1em;
        padding: var(--spacing-sm) var(--spacing-sm);
    }
}

==================================================
DATEINAME: src/assets/style/footer.css
--------------------------------------------------
/* Footer-Bereich (schwebender Block) */
.main-footer {
    padding: var(--spacing-lg) 0 0;
    width: 100%;
    display: flex;
    justify-content: center;
    background-color: var(--color-background-light);
    margin-top: var(--spacing-xl);
    position: relative;
    z-index: 10;
}

.footer-content-wrapper {
    background-color: var(--color-background-white);
    max-width: var(--content-max-width); /* KONSISTENT mit Main-Content */
    width: 100%;
    margin: 0 auto var(--spacing-md) auto;
    border-radius: var(--border-radius-md);
    box-shadow: 0 4px 15px var(--color-shadow-light);
    padding: var(--spacing-xl);
    box-sizing: border-box;
    color: var(--color-text-dark);
    font-family: var(--font-family-base);
    /* GEÄNDERT: Verschiebung um 20px nach links entfernt */
    transform: translateX(0);
}

/* Inhaltliche Gliederung des Footers mit CSS Grid für Symmetrie */
.footer-container {
    display: grid;
    grid-template-columns: 1.5fr repeat(3, 1fr);
    gap: var(--spacing-lg);
    padding-bottom: var(--spacing-md);
    border-bottom: 1px solid var(--color-border);
    margin-bottom: var(--spacing-md);
}

.footer-section {
    text-align: left;
}

.footer-section h3 {
    color: var(--color-text-dark);
    margin-bottom: var(--spacing-sm);
    font-size: 1.15em;
    font-weight: 600;
}

.footer-section p {
    margin-bottom: var(--spacing-xs);
    line-height: 1.5;
    font-size: 0.9em;
    font-weight: 400;
    color: var(--color-text-medium);
}

.footer-section ul {
    list-style: none;
    padding: 0;
    margin: 0;
}

.footer-section ul li {
    margin-bottom: var(--spacing-xs);
}

.footer-section ul li a {
    color: var(--color-text-medium);
    text-decoration: none;
    font-size: 0.9em;
    transition: color 0.3s ease;
    font-weight: 400;
}

.footer-section ul li a:hover {
    color: var(--color-primary);
}

/* Social Media Icons im Footer */
.social-icons {
    display: flex;
    gap: var(--spacing-sm);
    margin-top: var(--spacing-md);
    justify-content: flex-start;
}

.social-icons img {
    width: 28px;
    height: 28px;
    filter: grayscale(80%) brightness(120%);
    transition: filter 0.3s ease, transform 0.2s ease;
}

.social-icons a:hover img {
    filter: none;
    transform: translateY(-2px) scale(1.05);
}

/* Unterer Bereich des Footers (Copyright, etc.) */
.footer-bottom {
    text-align: center;
    color: var(--color-text-light);
    font-size: 0.8em;
    font-weight: 400;
    padding-top: var(--spacing-sm);
}

==================================================
DATEINAME: src/assets/style/header.css
--------------------------------------------------
/* Header-Bereich (Sticky Navigation Bar) */
header {
    width: 100%;
    height: var(--header-height); /* Definiert die Grundhöhe des Desktop Headers */
    padding: 0 var(--spacing-md);
    background-color: transparent;
    display: flex;
    justify-content: center;
    align-items: center;
    box-shadow: none;
    position: fixed;
    top: 0;
    left: 0;
    z-index: 1000;
    transition: box-shadow 0.3s ease, background-color 0.3s ease, height 0.3s ease;
    box-sizing: border-box;
}
header.header-scrolled {
    background-color: transparent; /* KEINE ÄNDERUNG im Desktop Modus */
    box-shadow: none;
}


/* Haupt-Wrapper im Header */
.google-header-wrapper {
    display: flex;
    justify-content: space-between; /* Elemente verteilen */
    align-items: center;
    width: 100%;
    max-width: var(--content-max-width);
    position: relative; /* Für absolute Positionierung, falls benötigt */
    height: 52px; /* Setzt die feste Höhe der Header-Box */
    background-color: var(--color-background-white);
    border: 1px solid var(--color-border);
    border-radius: var(--border-radius-lg);
    box-shadow: 0 2px 8px var(--color-shadow-light);
    padding: var(--spacing-sm) var(--spacing-md);
    box-sizing: border-box; /* Sicherstellen, dass Padding berücksichtigt wird */
}

header.header-scrolled .google-header-wrapper { /* Bei Scrollen dezenter */
    border-color: var(--color-border);
    box-shadow: 0 1px 5px var(--color-shadow-light);
}

/* Logo (Bild) */
.site-logo-link {
    display: flex;
    align-items: center;
    height: 100%; /* Passt die Link-Höhe an den Header an */
    padding: 0; /* Kein Padding, Bild wird kontrolliert */
    margin-right: var(--spacing-lg); /* Abstand zur Nav */
    text-decoration: none;
    order: 0; /* Desktop-Reihenfolge: Logo -> Nav -> Spenden */
}
.site-logo-image {
    height: 46px; /* Feste Höhe für das Logo */
    width: auto; /* Breite proportional */
    object-fit: contain;
    transition: transform 0.2s ease;
}
.site-logo-link:hover .site-logo-image {
    transform: scale(1.05); /* Leichte Hover-Animation */
}


/* Navigationsoptionen (Home, Bestellen, etc.) - Desktop Version */
.nav-options {
    list-style: none;
    margin: 0;
    padding: 0;
    display: flex;
    gap: var(--spacing-lg);
    order: 1; /* Desktop-Reihenfolge */
    flex-grow: 1; /* Füllt den Platz zwischen Logo und Button */
    justify-content: center; /* Zentriert die Nav-Links im verfügbaren Raum */
}
.nav-options li a {
    text-decoration: none;
    color: var(--color-text-medium);
    font-size: var(--font-size-base);
    padding: var(--spacing-xs) 0;
    transition: color 0.3s ease;
    font-weight: 500;
}
.nav-options li a:hover, .nav-options li a.active {
    color: var(--color-primary);
    position: relative;
}
.nav-options li a.active::after {
    content: '';
    position: absolute;
    bottom: -5px;
    left: 0;
    width: 100%;
    height: 2px;
    background-color: var(--color-primary);
    border-radius: 2px;
}

/* Spenden Button (Allgemein) */
.cart-button { /* Allgemeine Klasse für alle Buttons */
    background-color: var(--color-primary);
    color: var(--color-background-white);
    text-decoration: none;
    padding: var(--spacing-sm) var(--spacing-md);
    border-radius: var(--border-radius-lg);
    font-size: 0.9em;
    font-weight: 600;
    border: none;
    cursor: pointer;
    transition: background-color 0.3s ease, box-shadow 0.3s ease, transform 0.2s ease;
    white-space: nowrap;
    display: inline-flex;
    align-items: center;
    gap: var(--spacing-xs);
    flex-shrink: 0; /* Verhindert, dass der Button schrumpft */
}
.cart-button:hover {
    background-color: #2F5AA9;
    box-shadow: 0 4px 10px var(--color-shadow-light);
    transform: translateY(-2px);
}

.donate-button { /* Spezielle Klasse für den Spendenbutton */
    order: 2; /* Desktop-Reihenfolge: Ganz rechts */
}


/* --- MOBILE ANPASSUNGEN (ab 768px oder kleiner) --- */
@media (max-width: 768px) {
    header {
        height: var(--header-height-mobile-collapsed); /* Feste Höhe für mobile Top-Leiste */
        background-color: var(--color-background-white);
        box-shadow: 0 2px 10px var(--color-shadow-medium);
        display: flex; /* Der Header selbst wird wieder ein Flex-Container */
        justify-content: center; /* Inhalt zentrieren */
        align-items: center; /* Vertikal zentrieren */
        padding: 0 var(--spacing-md); /* Passt Padding für mobile an */
        flex-direction: row; /* Wichtig für korrekten mobilen Header */
    }
    header.header-scrolled {
        background-color: var(--color-background-white);
        box-shadow: 0 2px 10px var(--color-shadow-medium);
    }

    /* Google Header Wrapper wird zur mobilen Top-Bar */
    .google-header-wrapper {
        position: relative; /* Wichtig für absolute Menüpositionierung */
        width: 100%;
        max-width: none; /* Keine feste Max-Breite mehr */
        height: var(--header-height-mobile-collapsed); /* Feste Höhe */
        padding: 0; /* Keine extra Padding, um inneren Inhalt zu kontrollieren */
        border: none;
        box-shadow: none;
        background-color: transparent; /* Farbe wird vom Header genommen */
        border-radius: 0;
        justify-content: flex-start; /* Für Logo & Toggle auf einer Linie */
        align-items: stretch;
        flex-wrap: nowrap; /* Kein Umbruch in der Top-Bar */
        display: flex; /* Macht es zum flex Container für Menü/Logo/Spenden */
        gap: var(--spacing-sm);
    }
    .google-header-wrapper.nav-expanded {
        border-bottom-left-radius: 0;
        border-bottom-right-radius: 0;
        box-shadow: none;
    }

    /* Logo Bild auf Mobile */
    .site-logo-link {
        order: 1; /* Zwischen Hamburger und Spenden-Button */
        flex-grow: 1; /* Nimmt restlichen Platz ein */
        text-align: center;
        justify-content: center;
        height: auto;
    }
    .site-logo-image {
        height: 50px; /* Kleiner auf Mobile */
    }

    /* Hamburger-Menü Toggle Button */
    .menu-toggle {
        display: block !important;
        order: 0; /* Ganz links */
        background: none;
        border: none;
        padding: var(--spacing-xs);
        cursor: pointer;
        z-index: 1001; /* Über dem Spenden Button */
        flex-shrink: 0; /* Verhindert schrumpfen */
    }
    .hamburger {
        display: block;
        width: 25px;
        height: 3px;
        background-color: var(--color-text-dark);
        position: relative;
        transition: all 0.3s ease-in-out;
    }
    .hamburger::before, .hamburger::after {
        content: '';
        display: block;
        width: 25px;
        height: 3px;
        background-color: var(--color-text-dark);
        position: absolute;
        transition: all 0.3s ease-in-out;
    }
    .hamburger::before { top: -8px; }
    .hamburger::after { bottom: -8px; }

    /* Animation für Hamburger zu X */
    .menu-toggle.is-active .hamburger { background-color: transparent; }
    .menu-toggle.is-active .hamburger::before { top: 0; transform: rotate(45deg); }
    .menu-toggle.is-active .hamburger::after { bottom: 0; transform: rotate(-45deg); }


    /* Mobile Navigationsbereich (der ausklappt) */
    .google-search-like-nav {
        position: fixed; /* Fixed, damit es über dem Content bleibt beim Scrollen */
        top: var(--header-height-mobile-collapsed); /* Positioniert direkt unter der Top-Leiste */
        left: 0; /* Ganze Breite des Viewports */
        right: 0;
        width: 100%; /* Um 100% Breite zu gewährleisten, ignorieren Sie margin/padding des Body */
        max-width: none;
        background-color: var(--color-background-white);
        border: none; /* Kein Border oben mehr */
        border-bottom-left-radius: var(--border-radius-md); /* Nur unten Links/Rechts */
        border-bottom-right-radius: var(--border-radius-md);
        box-shadow: 0 8px 15px var(--color-shadow-medium);
        overflow: hidden;
        max-height: 0; /* Initial versteckt */
        transition: max-height 0.4s ease-out;
        flex-direction: column; /* Vertikal gestapelt */
        align-items: stretch; /* Volle Breite für Links */
        padding: 0;
        pointer-events: none;
        z-index: 998; /* Unter Donate Button, über dem Content */
    }
    .google-search-like-nav.is-open {
        max-height: calc(100vh - var(--header-height-mobile-collapsed) - var(--spacing-md)); /* Dynamische Höhe basierend auf Viewport */
        padding: var(--spacing-sm) var(--spacing-md) var(--spacing-md) var(--spacing-md);
        pointer-events: auto;
        overflow-y: auto; /* Scrollbar für lange Menüs */
    }
    .nav-options { /* Die eigentliche Link-Liste im mobilen Menü */
        flex-direction: column;
        width: 100%;
        padding: 0;
        margin: 0;
    }
    .nav-options li {
        width: 100%;
        text-align: left;
        margin-bottom: var(--spacing-xs);
    }
    .nav-options li a {
        display: block;
        padding: var(--spacing-sm) var(--spacing-md);
        font-size: 1.1em;
        font-weight: 500;
        color: var(--color-text-dark);
        border-radius: var(--border-radius-sm);
        transition: background-color 0.2s ease, color 0.2s ease, transform 0.2s ease;
    }
    .nav-options li a:hover, .nav-options li a.active {
        background-color: var(--color-background-light);
        color: var(--color-primary);
        transform: translateX(5px);
    }
    .nav-options li a.active::after {
        display: none;
    }

    /* Spendenbutton für Mobile (immer oben rechts sichtbar) */
    .donate-button { /* Jetzt ein einzelner Button */
        display: flex !important; /* MUSS flex sein für das Icon etc. */
        order: 2; /* Rechts vom Logo */
        align-self: center;
        margin-left: auto; /* Schiebt ihn nach ganz rechts */
        font-size: 0.85em;
        padding: var(--spacing-xs) var(--spacing-sm);
        height: auto;
        flex-shrink: 0;
        background-color: var(--color-secondary); /* GRÜN: Der mobile Spendenbutton ist ein Akzent! */
    }
    .donate-button:hover { /* Angepasster Hover für den grünen Spendenbutton */
        background-color: #00A656;
        box-shadow: 0 4px 10px var(--color-shadow-light);
        transform: translateY(-2px);
    }
    .donate-button.donate-button-mobile { display: none; } /* Die alte Klasse entfernen */
    .donate-button.donate-button-desktop { display: none; } /* Alte Klasse für Desktop, bleibt none */


    .site-content-wrapper {
        margin-top: calc(var(--header-height-mobile-collapsed) + var(--spacing-md));
        /* Margin muss vom fixed header beachtet werden, dieser offset bleibt gleich */
        padding-left: var(--spacing-md); /* Feste padding Werte für Mobile-Seiten */
        padding-right: var(--spacing-md);
    }

    .admin-container {
        margin-top: calc(var(--header-height-mobile-collapsed) + var(--spacing-md));
    }
}

/* Kleinste Mobilgeräte */
@media (max-width: 500px) {
    /* Header padding im Wrapper wurde bereits gesetzt */
    .google-header-wrapper {
        padding: var(--spacing-sm) var(--spacing-xs); /* Geringeres Padding in der Top-Bar */
        height: var(--header-height-mobile-collapsed);
    }
    .site-logo-image {
        height: 30px; /* Noch kleiner auf kleinsten Bildschirmen */
    }
    .donate-button {
        font-size: 0.8em;
        padding: var(--spacing-xs) var(--spacing-xs);
    }
    .menu-toggle .hamburger, .menu-toggle .hamburger::before, .menu-toggle .hamburger::after {
        width: 22px;
        height: 2px;
    }
    .menu-toggle .hamburger::before { top: -6px; }
    .menu-toggle .hamburger::after { bottom: -6px; }

    /* Wenn das Menü offen ist, scrollt der Body, nicht die nav itself */
    .google-search-like-nav.is-open {
        max-height: calc(100vh - var(--header-height-mobile-collapsed) - var(--spacing-sm)); /* Passt dynamische Höhe an */
        padding: var(--spacing-sm) var(--spacing-sm) var(--spacing-sm) var(--spacing-sm); /* Geringeres Padding */
        left: var(--spacing-sm);
        right: var(--spacing-sm);
    }
    .nav-options li a {
        font-size: 1em;
        padding: var(--spacing-xs);
    }

    .site-content-wrapper {
        margin-top: calc(var(--header-height-mobile-collapsed) + var(--spacing-sm));
        padding-left: var(--spacing-sm);
        padding-right: var(--spacing-sm);
    }

    .admin-container {
        margin-top: calc(var(--header-height-mobile-collapsed) + var(--spacing-sm));
        padding-left: var(--spacing-sm);
        padding-right: var(--spacing-sm);
    }
}

==================================================
DATEINAME: src/assets/style/home.css
--------------------------------------------------
/* src/assets/style/home.css */

/* Allgemeine Stile für Home-Sektionen */
.home-section {
    padding: var(--spacing-xl) 0;
    margin-bottom: var(--spacing-lg);
    opacity: 0; /* Standardmäßig unsichtbar für Animation */
    transform: translateY(20px); /* Leicht nach unten verschoben für Slide-Up */
    transition: opacity 0.8s ease-out, transform 0.8s ease-out;
    position: relative;
    z-index: 1; /* Sicherstellen, dass Inhalte über Hintergrund liegen */
}

.home-section.is-visible {
    opacity: 1;
    transform: translateY(0);
}

.home-section:nth-of-type(even) {
    background-color: var(--color-background-light); /* Abwechselnder Hintergrund */
}

.home-section-content {
    max-width: var(--content-max-width);
    margin: 0 auto;
    padding: 0 var(--spacing-md);
    box-sizing: border-box;
    text-align: center;
}

.home-section h2 {
    font-size: 2.8em;
    color: var(--color-primary);
    margin-bottom: var(--spacing-lg);
    font-weight: 700;
    text-shadow: 1px 1px 2px var(--color-shadow-light);
}

.home-section h3 {
    font-size: 2em;
    color: var(--color-text-dark);
    margin-bottom: var(--spacing-md);
    font-weight: 600;
}

.home-section p {
    font-size: 1.1em;
    color: var(--color-text-medium);
    line-height: var(--line-height-base);
    max-width: 800px;
    margin: 0 auto var(--spacing-md) auto;
}

/* Hero Sektion */
.hero-section {
    /* Standard-Hintergrundbild für größere Bildschirme (Desktop First) */
    background: url('/-hero-banner.jpeg') no-repeat center bottom; 
    background-size: cover; /* GEÄNDERT: 'cover' füllt immer den Bereich aus, ohne das Bild zu stretchen */
    background-attachment: fixed;
    position: relative;
    display: flex;
    align-items: center;
    justify-content: center;
    min-height: 100vh;
    padding-top: 0;
    padding-bottom: var(--spacing-xl);
    margin-bottom: 0;
    overflow: hidden;
    width: auto;
    flex-shrink: 0;

    /* Übergang zum Inhalt darunter (Linear-Gradient Maske) */
    mask-image: linear-gradient(to bottom, black 90%, transparent 100%);
    -webkit-mask-image: linear-gradient(to bottom, black 90%, transparent 100%);
}

/* Semi-transparenter Overlay für bessere Lesbarkeit der Schrift */
.hero-section::before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.25);
    z-index: 1;
}

.hero-content {
    max-width: 900px;
    text-align: center;
    position: relative;
    z-index: 2;
    color: var(--color-background-white);
    padding: 0 var(--spacing-md);
}

.hero-content h1 {
    font-size: 4.5em;
    margin-bottom: var(--spacing-md);
    font-weight: 800;
    line-height: 1.1;
    text-shadow: 0 4px 10px rgba(0, 0, 0, 0.8);
    animation: fadeInUp 1s ease-out forwards 0.5s;
    opacity: 0;
    transform: translateY(30px);
}

.hero-content p {
    font-size: 1.6em;
    margin-bottom: var(--spacing-lg);
    font-weight: 400;
    text-shadow: 0 2px 8px rgba(0, 0, 0, 0.7);
    animation: fadeInUp 1s ease-out forwards 0.8s;
    opacity: 0;
    transform: translateY(30px);
}

.hero-button {
    display: inline-block;
    background-color: var(--color-secondary);
    color: var(--color-background-white);
    padding: var(--spacing-sm) var(--spacing-lg);
    border-radius: var(--border-radius-lg);
    text-decoration: none;
    font-size: 1.2em;
    font-weight: 600;
    transition: background-color 0.3s ease, transform 0.2s ease, box-shadow 0.3s ease;
    animation: fadeInUp 1s ease-out forwards 1.1s;
    opacity: 0;
    transform: translateY(30px);
    box-shadow: 0 6px 20px rgba(0, 0, 0, 0.4);
}

.hero-button:hover {
    background-color: #00A656;
    transform: translateY(-3px) scale(1.02);
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.5);
}

/* Stil für den Missions-Hinweis */
.mission-highlight {
    color: var(--color-secondary);
    font-weight: 700;
    font-size: 1.2em;
    margin-top: var(--spacing-md);
    display: block;
    text-shadow: 0 1px 3px rgba(0,0,0,0.1);
}

.hero-content .mission-highlight {
    color: var(--color-accent);
    text-shadow: 0 2px 8px rgba(0, 0, 0, 0.8);
    animation: fadeInUp 1s ease-out forwards 1.4s;
    opacity: 0;
    transform: translateY(30px);
    font-size: 1.6em;
}


/* Feature Sektion */
.features-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
    gap: var(--spacing-lg);
    margin-top: var(--spacing-xl);
}

.feature-item {
    background-color: var(--color-background-white);
    padding: var(--spacing-md);
    border-radius: var(--border-radius-md);
    box-shadow: 0 4px 12px var(--color-shadow-light);
    transition: transform 0.3s ease, box-shadow 0.3s ease;
    text-align: center;
    border: 1px solid var(--color-border);
}

.feature-item:hover {
    transform: translateY(-5px);
    box-shadow: 0 8px 20px var(--color-shadow-medium);
}

.feature-item img {
    width: 80px;
    height: 80px;
    object-fit: contain;
    margin-bottom: var(--spacing-md);
    filter: drop-shadow(0 4px 8px rgba(0,0,0,0.1));
}

.feature-item h3 {
    color: var(--color-primary);
    font-size: 1.5em;
    margin-bottom: var(--spacing-sm);
}

.feature-item p {
    font-size: 0.95em;
    color: var(--color-text-medium);
}

/* Testimonial Sektion */
.testimonials-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: var(--spacing-lg);
    margin-top: var(--spacing-xl);
}

.testimonial-card {
    background-color: var(--color-background-white);
    padding: var(--spacing-lg);
    border-radius: var(--border-radius-md);
    box-shadow: 0 4px 12px var(--color-shadow-light);
    text-align: left;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    min-height: 200px;
    border: 1px solid var(--color-border);
    transition: transform 0.3s ease, box-shadow 0.3s ease;
}

.testimonial-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 8px 20px var(--color-shadow-medium);
}

.testimonial-quote {
    font-style: italic;
    color: var(--color-text-dark);
    margin-bottom: var(--spacing-md);
    font-size: 1.05em;
}

.testimonial-author {
    display: flex;
    align-items: center;
    margin-top: auto;
}

.testimonial-author img {
    width: 50px;
    height: 50px;
    border-radius: 50%;
    object-fit: cover;
    margin-right: var(--spacing-sm);
    border: 2px solid var(--color-primary);
    box-shadow: 0 2px 5px rgba(0,0,0,0.1);
}

.author-info strong {
    display: block;
    color: var(--color-primary);
    font-weight: 600;
}

.author-info span {
    font-size: 0.9em;
    color: var(--color-text-medium);
}

/* Produkt Teaser Sektion */
/* ENTFERNT: Alle .product-teaser-* Regeln, da sie nicht mehr verwendet werden */


/* Call to Action Sektion */
.cta-section {
    background-color: var(--color-primary);
    color: var(--color-background-white);
    text-shadow: 0 1px 3px rgba(0, 0, 0, 0.2);
    padding: var(--spacing-xl) 0;
    text-align: center;
}

.cta-section h2 {
    color: var(--color-background-white);
}

.cta-section p {
    color: #e0e0e0;
}

.cta-button {
    display: inline-block;
    background-color: var(--color-accent);
    color: var(--color-background-white);
    padding: var(--spacing-sm) var(--spacing-lg);
    border-radius: var(--border-radius-lg);
    text-decoration: none;
    font-size: 1.2em;
    font-weight: 600;
    transition: background-color 0.3s ease, transform 0.2s ease, box-shadow 0.3s ease;
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
    margin-top: var(--spacing-md);
}

.cta-button:hover {
    background-color: #e67e22; /* Dunklerer Akzent-Farbton */
    transform: translateY(-3px) scale(1.02);
    box-shadow: 0 6px 20px rgba(0, 0, 0, 0.3);
}

/* Animation Keyframes (wenn nicht von Scroll-JS gesteuert) */
@keyframes fadeInUp {
    from {
        opacity: 0;
        transform: translateY(30px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}


/* Responsive Anpassungen für die Home-Seite */
@media (max-width: 992px) {
    .hero-section {
        background-size: cover; /* Auch auf Tablets immer 'cover' */
        background-position: center bottom;
        min-height: 90vh;
    }
    .hero-content h1 { font-size: 3.5em; }
    .hero-content p { font-size: 1.4em; }
    .hero-content .mission-highlight { font-size: 1.4em; }
    .home-section-content { padding: 0 var(--spacing-sm); }
    .home-page-content-wrapper {
        padding: 0 var(--spacing-sm);
        transform: translateX(0);
        margin-top: var(--spacing-lg);
    }
}

@media (max-width: 768px) {
    .hero-section {
        /* HINTERGRUND ÄNDERT SICH AUF MOBILE */
        background: url('/-hero-banner-mobile.png') no-repeat center bottom;
        background-size: cover; /* GEÄNDERT: 'cover' statt Prozentwerte */
        background-position: center bottom;
        min-height: 80vh;
        padding-top: calc(var(--header-height) + var(--spacing-lg));
        padding-bottom: var(--spacing-lg);
    }
    .hero-content h1 { font-size: 2.8em; }
    .hero-content p { font-size: 1.2em; }
    .hero-content .mission-highlight { font-size: 1.2em; }
    .home-section { padding: var(--spacing-lg) 0; }
    .home-section h2 { font-size: 1.8em; }
    .home-section p { font-size: 1em; }
}

@media (max-width: 500px) { /* Small Mobile */
    .hero-section {
        background-size: cover; /* GEÄNDERT: 'cover' statt Prozentwerte */
        background-position: center bottom;
        min-height: 70vh;
        padding-top: calc(var(--header-height) + var(--spacing-md));
        padding-bottom: var(--spacing-md);
    }
    .hero-content h1 { font-size: 2.2em; }
    .hero-content p { font-size: 1em; }
    .hero-content .mission-highlight { font-size: 1.1em; }
    .hero-button { padding: var(--spacing-xs) var(--spacing-md); font-size: 1em; }
    .home-section h2 { font-size: 1.6em; }
    .home-page-content-wrapper {
        margin: var(--spacing-lg) auto var(--spacing-md) auto;
        padding: 0 var(--spacing-xs);
    }
}

==================================================
DATEINAME: src/assets/style/layout.css
--------------------------------------------------
/* Hauptinhaltsbereich & umgebender Container */
.site-content-wrapper {
    display: flex;
    flex: 1;
    width: 100%;
    max-width: var(--content-max-width); /* Verwende die Variable */
    margin: 0 auto; /* Zentriert den Inhalts-Wrapper */
    padding: 0 var(--spacing-md);
    box-sizing: border-box; /* Stellt sicher, dass max-width padding beinhaltet */
    /* GEÄNDERT: Abstand oben nur noch var(--spacing-lg) nach dem Header */
    margin-top: var(--spacing-lg); 
    margin-bottom: var(--spacing-lg);

    transform: translateX(0); /* Verschiebung entfernt für Bündigkeit */
}

/* Hauptinhaltsbereich für Shop-Produkte */
main {
    flex: 1;
    background-color: transparent; /* Angepasst, um den Hintergrund der Seite durchscheinen zu lassen */
    border-radius: 0; /* Kein abgerundeter Rahmen */
    box-shadow: none; /* Kein Schatten */
    border: none; /* Kein Rahmen */
    padding: var(--spacing-xl); /* Padding hier, da .site-content-wrapper nur äußeres Padding hat */
    box-sizing: border-box;
    position: relative;
    z-index: 1;
    min-height: 400px;
    margin-right: var(--spacing-lg); /* Behält den Abstand zum Warenkorb bei */
    display: flex; /* Macht main auch zu einem Flex-Container, um Inhalte zu kontrollieren */
    flex-direction: column; /* Inhalte in Spalte anordnen */
}

==================================================
DATEINAME: src/assets/style/main.css
--------------------------------------------------
/* main.css */
@import '/.variables.css';
@import '/.base.css';
@import '/.header.css';
@import '/.layout.css';

@import '/.shop.css';
@import '/.footer.css';
@import '/.modal.css';
@import '/.alerts.css';
@import '/.admin.css';
@import '/.home.css';
@import '/.success.css';
@import '/.disclaimer.css';
@import '/.responsive.css';

@import '/.cart.css';

==================================================
DATEINAME: src/assets/style/modal.css
--------------------------------------------------
/* Popup Modal (for Checkout) */
.modal {
    display: none;
    position: fixed;
    z-index: 1001;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    overflow: auto;
    background-color: rgba(0,0,0,0.5);
    justify-content: center;
    align-items: center;
    animation: fadeIn 0.3s ease-out;
}

.modal-content {
    background-color: var(--color-background-white);
    margin: auto;
    padding: var(--spacing-xl);
    border: 1px solid var(--color-border);
    border-radius: var(--border-radius-md);
    width: 90%;
    max-width: 650px;
    box-shadow: 0 10px 30px var(--color-shadow-medium);
    position: relative; /* Wichtig für die Positionierung des Loaders */
    animation-name: animatetop;
    animation-duration: 0.4s;
    max-height: 90vh;
    overflow-y: auto;
    display: flex; /* NEU: Um den Inhalt bei Überlagerung richtig zu verwalten */
    flex-direction: column; /* NEU: Um den Inhalt bei Überlagerung richtig zu verwalten */
    justify-content: flex-start; /* NEU */
    align-items: stretch; /* NEU */
}

@keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
}

@keyframes animatetop {
    from {top: -70px; opacity: 0}
    to {top: 0; opacity: 1}
}

.close-button {
    color: var(--color-text-light);
    font-size: 32px;
    font-weight: normal;
    position: absolute;
    top: var(--spacing-sm);
    right: var(--spacing-md);
    line-height: 1;
    transition: color 0.2s ease;
    z-index: 1002; /* Über dem Loader */
}

.close-button:hover,
.close-button:focus {
    color: var(--color-text-dark);
    text-decoration: none;
    cursor: pointer;
}

.modal-content h3 {
    text-align: center;
    margin-bottom: var(--spacing-lg);
    color: var(--color-text-dark);
    font-size: 2em;
    font-weight: 600;
}

.form-group {
    margin-bottom: var(--spacing-md);
}

.form-group label {
    display: block;
    margin-bottom: var(--spacing-xs);
    font-weight: 500;
    color: var(--color-text-dark);
    font-size: 0.95em;
}

.form-group input[type="text"],
.form-group input[type="number"],
.form-group input[type="email"],
.form-group select,
.form-group textarea,
.form-group input[type="datetime-local"] {
    width: 100%;
    padding: var(--spacing-sm);
    border: 1px solid var(--color-border);
    border-radius: var(--border-radius-sm);
    font-size: 1em;
    box-sizing: border-box;
    color: var(--color-text-dark);
    transition: border-color 0.2s ease, box-shadow 0.2s ease;
}

.form-group input:focus,
.form-group select:focus,
.form-group textarea:focus {
    outline: none;
    border-color: var(--color-primary);
    box-shadow: 0 0 0 3px rgba(52, 104, 192, 0.2);
}

.form-group .payment-options-wrapper {
    display: flex;
    gap: var(--spacing-md);
    margin-top: var(--spacing-sm);
    margin-bottom: var(--spacing-md);
    flex-wrap: wrap;
}

/* Wichtig: label-Wrapper für Radio-Button */
.form-group .radio-option {
    display: flex;
    align-items: center;
    cursor: pointer;
    padding: var(--spacing-sm) var(--spacing-md);
    border: 1px solid var(--color-border);
    border-radius: var(--border-radius-sm);
    transition: all 0.2s ease, transform 0.1s ease; /* transition für Klick-Animation erweitert */
    font-size: 1em;
    background-color: var(--color-background-white);
    color: var(--color-text-medium);
    flex-grow: 1;
}
/* Klick-Animation */
.form-group .radio-option:active {
    transform: scale(0.98);
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
}

.form-group .radio-option input[type="radio"] {
    margin-right: var(--spacing-xs);
    transform: scale(1.1);
    accent-color: var(--color-primary);
    flex-shrink: 0;
    pointer-events: none; /* Klick-Event geht an das Eltern-Label */
}

.form-group .radio-option.prefer-payment {
    border-color: var(--color-primary);
    box-shadow: 0 2px 5px var(--color-shadow-light);
    font-weight: 600;
    color: var(--color-primary);
}
.form-group .radio-option.prefer-payment input[type="radio"] {
    accent-color: var(--color-primary);
}
.form-group .radio-option.prefer-payment:hover {
    background-color: var(--color-background-light);
    box-shadow: 0 4px 8px var(--color-shadow-medium);
    transform: translateY(-1px);
}
.form-group .radio-option.prefer-payment input[type="radio"]:checked + label {
    color: var(--color-primary);
}


.form-group .radio-option.discourage-payment {
    border-color: var(--color-border);
    opacity: 0.8;
    font-weight: 400;
    color: var(--color-text-medium);
}
.form-group .radio-option.discourage-payment input[type="radio"] {
    accent-color: var(--color-text-light);
}
.form-group .radio-option.discourage-payment:hover {
    background-color: #f7f7f7;
}
.form-group .radio-option.discourage-payment input[type="radio"]:checked + label {
    color: var(--color-text-dark);
}

.payment-info-text {
    font-size: 0.85em;
    color: var(--color-text-medium);
    margin-top: calc(-1 * var(--spacing-md) / 2);
    margin-bottom: var(--spacing-md);
    line-height: 1.4;
    text-align: left;
    border-left: 3px solid var(--color-primary);
    padding-left: var(--spacing-sm);
    background-color: var(--color-background-light);
    border-radius: var(--border-radius-sm);
    padding-top: var(--spacing-xs);
    padding-bottom: var(--spacing-xs);
}
.payment-info-text strong {
    color: var(--color-primary);
}


#checkout-submit-button {
    background-color: var(--color-primary);
    color: var(--color-background-white);
    border: none;
    padding: var(--spacing-md) var(--spacing-lg);
    border-radius: var(--border-radius-md);
    cursor: pointer;
    font-size: 1.1em;
    font-weight: 600;
    width: 100%;
    margin-top: var(--spacing-lg);
    transition: background-color 0.2s ease, box-shadow 0.2s ease, transform 0.2s ease;
}

#checkout-submit-button:hover {
    background-color: #2F5AA9;
    box-shadow: 0 4px 10px var(--color-shadow-light);
    transform: translateY(-2px);
}

/* NEU: Stile für die Ladeanimation */
.loading-overlay {
    position: absolute; /* Überlagert das Formular innerhalb des Modals */
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(255, 255, 255, 0.9); /* Weißer, leicht transparenter Hintergrund */
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    gap: var(--spacing-md);
    border-radius: var(--border-radius-md); /* Passt zum Modal-Content-Radius */
    z-index: 10; /* Liegt über dem Formularinhalt, unter dem Close-Button */
    color: var(--color-primary);
    font-weight: 500;
}

.spinner {
    border: 4px solid var(--color-border);
    border-top: 4px solid var(--color-primary); /* Farbe für die drehende Kante */
    border-radius: 50%;
    width: 40px;
    height: 40px;
    animation: spin 1s linear infinite; /* Animationsdefinition */
}

@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}

/* Responsive Anpassungen für kleine Bildschirme */
@media (max-width: 500px) {
    .form-group .payment-options-wrapper {
        flex-direction: column;
    }
}

==================================================
DATEINAME: src/assets/style/responsive.css
--------------------------------------------------
/* Responsive Anpassungen */
@media (max-width: 1400px) {
    .site-content-wrapper,
    .google-search-like-nav,
    .google-header-wrapper,
    .footer-content-wrapper,
    .admin-container {
        max-width: 100%;
        padding-left: var(--spacing-md);
        padding-right: var(--spacing-md);
    }

    .google-search-like-nav,
    .site-content-wrapper,
    .footer-content-wrapper {
        transform: translateX(0);
    }
}

@media (max-width: 992px) { /* Tablet/Smaller Desktop (Dies betrifft noch den Desktop-Mode von Header) */
    .admin-container {
        flex-direction: column;
        padding: 0 var(--spacing-sm);
        margin-top: calc(var(--header-height) + var(--spacing-md));
        margin-bottom: var(--spacing-md);
    }
    .admin-sidebar {
        width: 100%;
        order: -1;
        margin-bottom: var(--spacing-md);
    }
    .admin-content {
        padding: var(--spacing-lg);
    }
    .product-grid {
        grid-template-columns: repeat(2, 1fr);
        gap: var(--spacing-md);
    }
    .product-item img {
        height: 200px;
    }
    .footer-content-wrapper {
        padding: var(--spacing-lg) var(--spacing-md);
        transform: translateX(0);
    }
    .footer-container {
        grid-template-columns: repeat(2, 1fr);
        gap: var(--spacing-md);
    }
    .footer-section {
        margin-bottom: 0;
    }
    .dashboard-stats {
        grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));
    }
    .google-header-wrapper {
        transform: translateX(0);
    }
}

@media (max-width: 768px) {
    /* Header-bezogene Anpassungen in header.css! */

    /* NEU: Wichtiger Abstandshalter für den Body, damit der fixe Warenkorb nichts verdeckt! */
    body {
        padding-bottom: calc(var(--header-height-mobile-collapsed) + var(--spacing-sm));
    }
    
    .site-content-wrapper {
        flex-direction: column;
        margin-top: calc(var(--header-height-mobile-collapsed) + var(--spacing-md));
        padding: 0 var(--spacing-md);
        transform: translateX(0);
    }
    main {
        order: 1;
        margin-right: 0;
        margin-bottom: var(--spacing-md);
        padding: var(--spacing-md);
        border-radius: 0;
        box-shadow: none;
    }

    /* NEU: Komplette Neugestaltung des mobilen Warenkorbs */
    .cart-sidebar {
        position: fixed; /* Fixiert am Viewport */
        bottom: 0;
        left: 0;
        right: 0;
        width: 100%;
        max-height: calc(var(--cart-max-height-ratio) * 100vh); /* Nimmt max. 2/3 des Bildschirms ein */
        top: auto; /* `top` wird nicht mehr benötigt */
        border-radius: var(--border-radius-md) var(--border-radius-md) 0 0;
        box-shadow: 0 -4px 15px var(--color-shadow-medium);
        /* Standardmäßig zusammengeklappt, sodass nur der Header sichtbar ist */
        transform: translateY(calc(100% - var(--header-height-mobile-collapsed))); 
        transition: transform 0.3s ease-in-out;
        z-index: 100;
        display: flex;
        flex-direction: column;
        background-color: var(--color-background-white); /* Hintergrund für den ganzen Container */
        padding: 0;
        border: none;
        gap: 0;
    }
    .cart-sidebar.is-expanded {
        transform: translateY(0); /* Komplett sichtbar im aufgeklappten Zustand */
    }
    .cart-sidebar.is-collapsed {
        overflow-y: hidden; /* Verhindert Scrollen im geschlossenen Zustand */
    }

    .cart-header-desktop { display: none; }
    .cart-header-mobile { display: flex; } /* Sichtbar auf Mobile */

    .cart-body-content {
        max-height: calc(var(--cart-max-height-ratio) * 100vh - var(--header-height-mobile-collapsed));
        overflow-y: hidden; /* Der Container selbst scrollt nicht */
        flex-grow: 1;
        display: flex;
        flex-direction: column;
        padding: var(--spacing-md);
        /* Unnötige Stile entfernt, da der Wrapper (.cart-sidebar) das Styling übernimmt */
        background-color: transparent;
        border: none;
        border-radius: 0;
        box-shadow: none;
    }
    
    /* Der Inhalt wird ausgeblendet, wenn der Warenkorb zu ist */
    .cart-sidebar.is-collapsed .cart-body-content { 
        display: none; 
    }

    /* Diese Stile stellen sicher, dass der Inhalt innerhalb des Body scrollbar ist */
    .cart-items-scrollable-wrapper {
        flex-grow: 1; 
        overflow-y: auto;
    }
    #cart-total-container, .checkout-button { 
        flex-shrink: 0; 
    }

    .admin-container {
        margin-top: calc(var(--header-height-mobile-collapsed) + var(--spacing-md));
        padding: 0 var(--spacing-md);
    }
    .admin-sidebar {
        width: 100%; order: -1; margin-bottom: var(--spacing-md);
    }
    .admin-content { padding: var(--spacing-lg); }

    .footer-container {
        grid-template-columns: 1fr;
        gap: var(--spacing-md);
    }
    .footer-section { margin-bottom: var(--spacing-md); }
    .footer-section:last-child { margin-bottom: 0; }
}

@media (max-width: 500px) {
    main { padding: var(--spacing-md); }
    .site-content-wrapper, .admin-container {
        margin-top: calc(var(--header-height-mobile-collapsed) + var(--spacing-sm));
        padding: 0 var(--spacing-sm);
    }
    .footer-content-wrapper {
        margin: 0 var(--spacing-sm) var(--spacing-sm) var(--spacing-sm);
        padding: var(--spacing-md);
    }
    .product-grid { grid-template-columns: 1fr; }
    .product-item img { height: 160px; }
    .product-controls { flex-direction: column; }
    .product-controls .add-to-cart-btn { width: 100%; }
} 

==================================================
DATEINAME: src/assets/style/shop.css
--------------------------------------------------
/* Spezifische Shop-Stile für Produktliste im Main */
.category-section {
    margin-bottom: var(--spacing-xl);
}

.category-section h2 {
    border-bottom: 1px solid var(--color-border);
    padding-bottom: var(--spacing-sm);
    margin-bottom: var(--spacing-lg);
    color: var(--color-text-dark);
    font-size: 2em;
    font-weight: 600;
}

.product-grid {
    display: grid;
    grid-template-columns: repeat(3, 1fr); /* Immer 3 Spalten auf Desktop */
    gap: var(--spacing-lg);
}

.product-item {
    background: var(--color-background-white);
    border: 1px solid var(--color-border);
    border-radius: var(--border-radius-md);
    padding: var(--spacing-md); /* Mehr Padding für luftigeres Design */
    text-align: center;
    box-shadow: 0 4px 12px var(--color-shadow-light);
    transition: transform 0.2s ease, box-shadow 0.2s ease;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
}

.product-item:hover {
    transform: translateY(-5px);
    box-shadow: 0 6px 20px var(--color-shadow-medium);
}

/* NEU: Container für Bild und überlappenden Titel */
.product-image-container {
    position: relative;
    /* Platz für den überlappenden Titel (15px) + extra Abstand */
    margin-bottom: calc(var(--spacing-md) + 15px);
}

.product-item img {
    max-width: 100%;
    width: 100%;
    /* GEÄNDERT: Höhe für besseres Seitenverhältnis */
    height: 200px;
    /* GEÄNDERT: 'cover' füllt den Bereich schön aus */
    object-fit: cover;
    /* GEÄNDERT: Größerer Radius, passt zum äußeren Container */
    border-radius: var(--border-radius-md);
    /* ENTFERNT: margin, background, padding und mask-image */
    display: block; /* Verhindert untere Lücke */
}

.product-item h3 {
    /* GEÄNDERT: Komplette Neupositionierung und Design als "Pille" */
    position: absolute;
    bottom: -15px; /* Hängt über den unteren Rand des Bildes */
    left: 50%;
    transform: translateX(-50%);

    background-color: var(--color-background-white);
    padding: var(--spacing-xs) var(--spacing-md);
    border-radius: var(--border-radius-lg); /* Pillenform */
    box-shadow: 0 3px 8px var(--color-shadow-medium); /* Subtiler Schatten */
    
    font-size: 1.4em; /* Etwas größer und präsenter */
    white-space: nowrap; /* Verhindert Umbruch des Titels */
    
    margin: 0; /* Alte Marge entfernen */
    color: var(--color-text-dark);
    font-weight: 600;
    line-height: 1.3;
}

.product-quantity-price-line {
    margin-bottom: var(--spacing-md); /* Mehr Abstand zu den Controls */
    line-height: 1.4;
    text-align: center;
    color: var(--color-text-medium);
    font-size: 0.95em;
    font-weight: 400;
}

.product-quantity-price-line .product-price-value {
    font-size: 1.4em;
    font-weight: 700;
    color: var(--color-accent);
    margin-left: 4px;
    white-space: nowrap;
}


.product-controls {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: var(--spacing-sm);
    margin-top: var(--spacing-sm);
}

.product-controls input[type="number"] {
    width: 50px;
    /* GEÄNDERT: Padding angepasst für quadratischeren Look */
    padding: var(--spacing-sm);
    border: 1px solid var(--color-border);
    /* GEÄNDERT: Radius erhöht für weichere Ecken */
    border-radius: var(--border-radius-md);
    text-align: center;
    font-size: 1em; /* Größere Ziffer */
    color: var(--color-text-dark);
    -moz-appearance: textfield;
}

.product-controls input[type="number"]::-webkit-outer-spin-button,
.product-controls input[type="number"]::-webkit-inner-spin-button {
    -webkit-appearance: none;
    margin: 0;
}

.product-controls .add-to-cart-btn {
    background-color: var(--color-primary);
    color: var(--color-background-white);
    border: none;
    /* GEÄNDERT: Padding für höheres Aussehen wie im Bild */
    padding: var(--spacing-sm) var(--spacing-lg);
    border-radius: var(--border-radius-lg);
    cursor: pointer;
    font-size: 1em; /* Schrift etwas größer */
    font-weight: 600;
    transition: background-color 0.2s ease, box-shadow 0.2s ease, transform 0.2s ease;
    display: inline-flex;
    align-items: center;
    gap: var(--spacing-xs);
}

.product-controls .add-to-cart-btn:hover {
    background-color: #2F5AA9;
    box-shadow: 0 4px 10px var(--color-shadow-light);
    transform: translateY(-2px);
}

/* NEU: Stile für den deaktivierten "Ausverkauft"-Button */
.product-controls .add-to-cart-btn[disabled] {
    background-color: var(--color-background-white); /* Weißer Hintergrund */
    color: var(--color-text-light); /* Grauer Text */
    border: 1px solid var(--color-border); /* Graue Border */
    box-shadow: none; /* Kein Schatten */
    cursor: not-allowed; /* Zeigt an, dass nicht geklickt werden kann */
    transform: translateY(0); /* Keine Animation */
    pointer-events: none; /* Verhindert Interaktion auf dem Button */
}

/* Hover-Effekt für deaktivierten Button, um sicherzustellen, dass er nicht reagiert */
.product-controls .add-to-cart-btn[disabled]:hover {
    background-color: var(--color-background-white); /* Bleibt weiß */
    color: var(--color-text-light); /* Bleibt grau */
    box-shadow: none; /* Bleibt ohne Schatten */
    transform: translateY(0); /* Keine Animation */
}

==================================================
DATEINAME: src/assets/style/success.css
--------------------------------------------------
/* src/assets/style/success.css */

/* Layout Container, nicht das <main>-Element selbst */
.success-page-wrapper {
    /* Behält die Layout-Regeln bei */
    width: 100%;
    margin: 0 auto; /* Zentrieren innerhalb von main, wenn main keinen bestimmten Margin hat */
    padding: 0; /* Padding wird von inneren Elementen gesetzt */
}

/* Header des Erfolgsseite */
.success-header {
    text-align: center;
    padding: var(--spacing-xl) var(--spacing-md) var(--spacing-lg) var(--spacing-md);
    background-color: var(--color-background-white);
    border-bottom: 1px solid var(--color-border);
    box-shadow: 0 2px 10px var(--color-shadow-light);
    border-radius: var(--border-radius-md);
    width: 100%;
    max-width: var(--content-max-width);
    margin: var(--spacing-lg) auto var(--spacing-xl) auto; /* Margin angepasst für bündige Ausrichtung */
    box-sizing: border-box;
}

.success-header h1 {
    font-size: 3.5em;
    color: var(--color-primary);
    margin-bottom: var(--spacing-sm);
    font-weight: 800;
    line-height: 1.1;
    text-shadow: 1px 1px 3px rgba(0,0,0,0.05);
}

/* Anpassung des standard alert, für Header alerts */
.success-header .alert {
    max-width: 800px;
    margin-left: auto;
    margin-right: auto;
    border-radius: var(--border-radius-sm);
    padding: var(--spacing-md);
    font-size: 1.05em;
    font-weight: 500;
    display: flex; /* Für Icon/Gap falls Standard-Alerts Icons haben */
    align-items: center;
    gap: var(--spacing-xs);
    border: none; /* Alerts haben ihre eigenen Border, nicht extra Border-Bottom vom Header */
    margin-top: var(--spacing-md);
    box-shadow: 0 2px 5px rgba(0,0,0,0.1);
}
.success-header .alert.success {
    background-color: #D4EDDA; /* Klassisches Success-Grün, wie im alerts.css */
    color: #155724;
    border-color: #C3E6CB;
}
.success-header .alert.error {
    background-color: #F8D7DA; /* Klassisches Error-Rot */
    color: #721C24;
    border-color: #F5C6CB;
}

/* Fallback-Alerts für fehlende Daten */
.fallback-alert {
    margin-top: var(--spacing-xl) !important; /* Extra Abstand, wenn dies die Hauptnachricht ist */
    background-color: #FFF3CD; /* Warmes Orange/Gelb als Warnung */
    color: #856404;
    border: 1px solid #FFEEDB;
    padding: var(--spacing-lg);
    border-left: 5px solid #FFC107; /* Deutliche Akzentleiste */
    text-align: left; /* Text linksbündig */
    font-size: 1.1em;
    line-height: 1.5;
}
.fallback-details-alert {
    background-color: #FEEBEB;
    color: #CC0000;
    border: 1px solid #FF5050;
    padding: var(--spacing-md);
    margin-top: var(--spacing-lg); /* Abstand zum Titel */
    border-radius: var(--border-radius-sm);
    text-align: left;
    font-size: 1em;
}
.fallback-details-alert p {
    margin-bottom: var(--spacing-xs);
    line-height: 1.5;
    color: inherit;
}
.fallback-details-alert p:last-child {
    margin-bottom: 0;
}
.fallback-details-alert strong {
    color: inherit;
}
.fallback-details-alert a {
    color: #CC0000;
    text-decoration: underline;
}


/* Container für die flexiblen Sektionen */
.success-sections-container {
    display: flex;
    flex-direction: column;
    gap: var(--spacing-lg);
    width: 100%;
    max-width: var(--content-max-width);
    margin: 0 auto var(--spacing-xl) auto;
    padding: 0 var(--spacing-md);
    box-sizing: border-box;
}

/* Basis-Karten-Stil für alle Informationsboxen */
.success-info-card,
.success-order-details-card,
.success-mission-card {
    background-color: var(--color-background-white);
    border: 1px solid var(--color-border);
    border-radius: var(--border-radius-md);
    box-shadow: 0 6px 18px var(--color-shadow-light);
    padding: var(--spacing-xl);
    display: flex;
    flex-direction: column;
    align-items: stretch;
    transition: all 0.3s ease-out;
}

/* Überschriften-Stile innerhalb der Karten */
.success-sections-container h2 {
    font-size: 2.2em;
    color: var(--color-primary);
    margin-top: 0;
    margin-bottom: var(--spacing-lg);
    padding-bottom: var(--spacing-sm);
    font-weight: 700;
    line-height: 1.2;
    text-shadow: 1px 1px 2px rgba(0,0,0,0.02);
    border-bottom: 1px solid var(--color-border);
}

.success-sections-container h3 {
    font-size: 1.6em;
    color: var(--color-text-dark);
    margin-top: var(--spacing-xl);
    margin-bottom: var(--spacing-sm);
    font-weight: 600;
}

.success-sections-container p {
    font-size: 1.05em;
    color: var(--color-text-medium);
    line-height: 1.7;
    margin-bottom: var(--spacing-sm);
}

.success-sections-container strong {
    font-weight: 700;
    color: var(--color-text-dark);
}

/* Erster Block: Zahlung & Kontakt / QR-Code (2 Spalten auf Desktop) */
.success-info-card-group {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
    gap: var(--spacing-lg);
    box-shadow: 0 8px 20px var(--color-shadow-medium);
    border-radius: var(--border-radius-md);
    overflow: hidden;
}
/* Einzelne Karten im Gruppen-Grid */
.success-info-card {
    border: none;
    box-shadow: none;
    border-radius: 0;
    padding: var(--spacing-lg) var(--spacing-xl);
    justify-content: flex-start;
    align-items: flex-start;
}

/* Visuelle Trennung im Grid */
.success-info-card:first-child {
    border-top-left-radius: var(--border-radius-md);
    border-bottom-left-radius: var(--border-radius-md);
}
.success-info-card:last-child {
    border-top-right-radius: var(--border-radius-md);
    border-bottom-right-radius: var(--border-radius-md);
}

/* Spezifische Hintergründe */
.success-info-card.payment-info {
    background-color: var(--color-background-light);
    color: var(--color-text-dark);
}
.success-info-card.whatsapp-qr {
    background-color: #E0FFEE;
    color: var(--color-text-dark);
}
.success-info-card.whatsapp-qr h2 {
    color: var(--color-secondary);
}
.success-info-card.whatsapp-qr p {
    color: var(--color-text-dark);
    line-height: 1.6;
}

/* Details Zahlungsinformationen (BANK TRANSFER) */
.payment-details .details-intro {
    font-size: 1.05em;
    margin-bottom: var(--spacing-lg);
    color: var(--color-text-dark);
    line-height: 1.6;
}
.payment-details .highlight-total {
    font-size: 1.2em;
    color: var(--color-accent);
    font-weight: 700;
}

/* NEU: Liste für Bankdetails */
.bank-details-list {
    list-style: none;
    padding: 0;
    margin: 0 0 var(--spacing-lg) 0;
    background-color: var(--color-background-white);
    border: 1px solid var(--color-border);
    border-radius: var(--border-radius-sm);
    box-shadow: 0 2px 6px rgba(0,0,0,0.05);
    overflow: hidden;
}

.bank-details-list .detail-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: var(--spacing-sm) var(--spacing-md);
    border-bottom: 1px solid var(--color-border);
    font-size: 0.95em;
    color: var(--color-text-medium);
    transition: background-color 0.15s ease;
    cursor: pointer;
}
.bank-details-list .detail-item:last-child {
    border-bottom: none;
}
.bank-details-list .detail-item:hover {
    background-color: var(--color-background-light);
}

.bank-details-list .detail-item .detail-label {
    font-weight: 500;
    color: var(--color-text-dark);
    white-space: nowrap;
    margin-right: var(--spacing-md);
}

.bank-details-list .detail-item .detail-value {
    font-family: 'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, monospace;
    font-size: 1em;
    color: var(--color-primary-dark);
    font-weight: 600;
    flex-grow: 1;
    text-align: right;
    user-select: all;
    overflow-wrap: break-word;
    word-break: break-all;
}

.bank-details-list .detail-item .detail-value.reference-number {
    color: var(--color-accent);
    font-size: 1.05em;
    font-weight: 700;
}

/* Optional: Visuelles Feedback beim Kopieren */
.bank-details-list .detail-item.copied {
    background-color: var(--color-secondary-light);
    box-shadow: inset 0 0 5px var(--color-secondary);
}


/* Cash On Pickup Details */
.payment-details.cash-on-pickup .details-intro {
    font-size: 1.05em;
    margin-bottom: var(--spacing-sm);
    color: var(--color-text-dark);
}
.payment-details.cash-on-pickup .highlight-total {
    font-size: 1.2em;
    color: var(--color-accent);
    font-weight: 700;
}


/* Verarbeitungshinweis am Ende des Payment Details Blocks */
.payment-details .processing-note {
    font-size: 0.9em;
    color: var(--color-text-medium);
    margin-top: var(--spacing-md);
    line-height: 1.5;
    border-top: 1px solid var(--color-border);
    padding-top: var(--spacing-md);
}

/* Abholung Details */
.pickup-details {
    margin-top: var(--spacing-xl);
}
.pickup-details p {
    margin-bottom: var(--spacing-xs);
    font-size: 1.05em;
}
.pickup-details p strong {
    color: var(--color-primary);
}
.pickup-datetime, .pickup-location {
    font-size: 1.1em !important;
    font-weight: 600;
    color: var(--color-text-dark) !important;
}


/* WhatsApp QR-Code Block - KOMPLETT NEU STRUKTURIERT */
.success-info-card.whatsapp-qr {
    text-align: center;
    background-color: var(--color-secondary-light); /* Angenehmes Hellgrün */
    padding-bottom: var(--spacing-lg); /* Etwas weniger padding unten */
}
.success-info-card.whatsapp-qr h2 {
    color: var(--color-secondary-dark); /* Grüner Titel */
    border-bottom-color: var(--color-secondary-light);
    margin-bottom: var(--spacing-md);
    line-height: 1.3;
}
.whatsapp-intro {
    font-size: 1em;
    color: var(--color-text-medium); /* Weniger prominent */
    line-height: 1.6;
    margin-bottom: var(--spacing-xl); /* Deutlicher Abstand zum QR-Code */
    max-width: 400px; /* Begrenzte Breite für bessere Lesbarkeit */
    margin-left: auto;
    margin-right: auto;
}

.qr-code-section { /* Neuer Wrapper für QR-Code und Button */
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: var(--spacing-xl); /* Abstand zwischen QR und Button */
    flex-grow: 1; /* Nimmt restlichen Platz ein, Button schiebt sich nach unten */
    justify-content: space-between;
}

.qr-code-container {
    padding: var(--spacing-md); /* Inneres Padding im QR-Bereich */
    background-color: var(--color-background-white);
    border: 1px solid var(--color-border);
    border-radius: var(--border-radius-md);
    box-shadow: 0 6px 15px rgba(0,0,0,0.1);
    display: inline-block; /* Für korrekte Zentrierung der Box */
}
.qr-code-img {
    width: 200px; /* Größerer QR-Code für bessere Scannbarkeit */
    height: 200px;
    object-fit: contain;
    margin-bottom: 0; /* Keine eigene Margin */
    border: none; /* Entfernen der inneren Border */
    border-radius: var(--border-radius-sm); /* Leichte Rundung */
    padding: 0;
    box-shadow: none;
}
.whatsapp-button {
    background-color: #25D366;
    color: var(--color-background-white);
    text-decoration: none;
    padding: var(--spacing-md) var(--spacing-xl);
    border-radius: var(--border-radius-lg);
    font-weight: 700;
    font-size: 1.2em; /* Größerer Button Text */
    transition: background-color 0.3s ease, transform 0.2s ease, box-shadow 0.3s ease;
    width: auto;
    min-width: 250px; /* Mindestbreite für den Button */
    display: inline-flex;
    justify-content: center; /* Zentriert Inhalt */
    align-items: center;
    gap: var(--spacing-sm);
    margin-top: auto; /* Nach unten schieben, falls vertikaler Platz */
    box-shadow: 0 6px 15px rgba(0, 0, 0, 0.25); /* Deutlicherer Schatten */
}
.whatsapp-button:hover {
    background-color: #1FAF59;
    transform: translateY(-4px) scale(1.02); /* Stärkerer Hover-Effekt */
    box-shadow: 0 8px 20px rgba(0, 0, 0, 0.35);
}
.whatsapp-icon { /* WhatsApp Icon für den Button */
    width: 24px; /* Größeres Icon */
    height: 24px;
    margin-right: var(--spacing-xs);
    display: inline-block;
    vertical-align: middle;
}


/* Bestellzusammenfassungstabelle */
.success-order-details-card {
    position: relative;
    padding: var(--spacing-xl) var(--spacing-lg);
}
.success-order-details-card h2 {
    color: var(--color-text-dark);
    border-bottom: 1px solid var(--color-border);
    display: flex;
    justify-content: space-between;
    align-items: center;
    flex-wrap: wrap;
    margin-bottom: var(--spacing-lg);
}


.edit-order-link {
    margin-left: var(--spacing-sm);
    display: inline-flex;
    align-items: center;
    vertical-align: middle;
    color: var(--color-primary);
    transition: color 0.2s ease, transform 0.2s ease;
    cursor: pointer;
    line-height: 1;
    font-size: 0.9em;
    font-weight: 500;
    text-decoration: none;
}
.edit-order-link:hover {
    color: var(--color-accent);
    transform: scale(1.05);
}
.edit-order-link .edit-icon {
    width: 22px;
    height: 22px;
    margin-left: var(--spacing-xs);
    stroke-width: 2px;
    flex-shrink: 0;
}

.success-order-details-card table {
    width: 100%;
    border-collapse: separate;
    border-spacing: 0;
    margin-top: var(--spacing-lg);
    box-shadow: 0 2px 5px var(--color-shadow-light);
    border-radius: var(--border-radius-sm);
    overflow: hidden;
    border: 1px solid var(--color-border);
}
.success-order-details-card th, .success-order-details-card td {
    padding: var(--spacing-sm) var(--spacing-md);
    text-align: left;
    font-size: 0.95em;
    border-bottom: 1px solid var(--color-border);
    border-right: 1px solid var(--color-border);
}
.success-order-details-card tr:last-child td {
    border-bottom: none;
}
.success-order-details-card th:last-child,
.success-order-details-card td:last-child {
    border-right: none;
}


.success-order-details-card th {
    background-color: var(--color-primary-lightest);
    font-weight: 600;
    color: var(--color-primary-dark);
}
.success-order-details-card td {
    color: var(--color-text-dark);
}
.success-order-details-card tfoot td {
    font-weight: 700;
    color: var(--color-text-dark);
    background-color: var(--color-background-light);
    font-size: 1em;
}
.success-order-details-card tr:nth-child(even) {
    background-color: #FDFEFE;
}

/* Missions-Karten-Styling */
.success-mission-card {
    text-align: center;
    padding: var(--spacing-xl);
    background-color: var(--color-background-light);
    border-color: var(--color-secondary);
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
}
.success-mission-card h2 {
    color: var(--color-secondary);
    border-bottom: 1px solid var(--color-secondary-light);
    font-size: 2.5em;
    margin-bottom: var(--spacing-lg);
}
.mission-links {
    margin-top: var(--spacing-xl);
    display: flex;
    gap: var(--spacing-md);
    justify-content: center;
    flex-wrap: wrap;
}
.mission-links .hero-button {
    margin: 0;
    font-size: 1.1em;
    padding: var(--spacing-md) var(--spacing-lg);
    box-shadow: 0 3px 10px rgba(0,0,0,0.1);
}
.mission-links .hero-button:first-child {
    background-color: var(--color-secondary);
}
.mission-links .hero-button:first-child:hover {
    background-color: #00A656;
}
.mission-links .hero-button:last-child {
    background-color: var(--color-primary);
}
.mission-links .hero-button:last-child:hover {
    background-color: #2F5AA9;
}


/* Responsive Anpassungen */
@media (max-width: 1024px) {
    .success-info-card-group {
        grid-template-columns: 1fr;
        box-shadow: none;
    }
    .success-info-card {
        border-radius: var(--border-radius-md);
        margin-bottom: var(--spacing-lg);
        border: 1px solid var(--color-border);
        box-shadow: 0 4px 10px var(--color-shadow-light);
    }
    .success-info-card:first-child, .success-info-card:last-child {
        border-radius: var(--border-radius-md);
    }
    .success-info-card.payment-info, .success-info-card.whatsapp-qr {
        padding-top: var(--spacing-xl); /* Behält Header Padding bei */
        padding-bottom: var(--spacing-lg); /* Etwas weniger für gestapelte Elemente */
    }
    .success-info-card.whatsapp-qr .whatsapp-intro {
        margin-left: auto;
        margin-right: auto;
    }
}


@media (max-width: 768px) {
    .success-header h1 {
        font-size: 2.8em;
    }
    .success-sections-container h2 {
        font-size: 1.8em;
    }
    .success-info-card,
    .success-order-details-card,
    .success-mission-card {
        padding: var(--spacing-lg);
    }
    .edit-order-link {
        font-size: 0.85em;
    }
    .edit-order-link .edit-icon {
        width: 18px;
        height: 18px;
    }
    .mission-links {
        flex-direction: column;
        align-items: center;
    }
    .mission-links .hero-button {
        width: 100%;
        max-width: 280px;
    }

    .bank-details-list .detail-item {
        flex-direction: column;
        align-items: flex-start;
        padding: var(--spacing-sm);
    }
    .bank-details-list .detail-item .detail-label {
        width: 100%;
        margin-bottom: var(--spacing-xs);
    }
    .bank-details-list .detail-item .detail-value {
        width: 100%;
        text-align: left;
    }
    .qr-code-section {
        gap: var(--spacing-lg); /* Abstand zwischen QR und Button verringern */
    }

}
@media (max-width: 500px) {
    .success-header {
        padding: var(--spacing-lg) var(--spacing-sm);
        margin-bottom: var(--spacing-md);
    }
    .success-header h1 {
        font-size: 2em;
    }
    .success-header .alert {
        padding: var(--spacing-sm);
        font-size: 0.95em;
    }

    .success-sections-container {
        padding: 0 var(--spacing-sm);
        gap: var(--spacing-md);
        margin-bottom: var(--spacing-md);
    }

    .success-sections-container h2 {
        font-size: 1.5em;
        margin-bottom: var(--spacing-md);
    }
    .success-sections-container h3 {
        font-size: 1.2em;
        margin-top: var(--spacing-lg);
        margin-bottom: var(--spacing-xs);
    }
    .success-sections-container p {
        font-size: 0.95em;
    }
    .success-info-card,
    .success-order-details-card,
    .success-mission-card {
        padding: var(--spacing-md);
    }

    .payment-amount {
        font-size: 1.2em;
    }
    .payment-details {
        padding: var(--spacing-xs);
    }

    .qr-code-container { /* Anpassung für Container auf sehr kleinen Screens */
        padding: var(--spacing-xs);
    }
    .qr-code-img {
        width: 140px; /* Etwas kleiner für sehr kleine Screens */
        height: 140px;
        margin-bottom: var(--spacing-lg); /* Mehr Abstand für sehr kleine Screens */
    }
    .whatsapp-button {
        font-size: 1em;
        padding: var(--spacing-sm) var(--spacing-md);
        gap: var(--spacing-xs);
    }
    .whatsapp-button .whatsapp-icon {
        width: 18px;
        height: 18px;
        margin-right: var(--spacing-xs);
    }
    .edit-order-link {
        font-size: 0.8em;
    }
    .edit-order-link .edit-icon {
        width: 16px;
        height: 16px;
    }
    .success-order-details-card th, .success-order-details-card td {
        padding: var(--spacing-xs);
        font-size: 0.8em;
    }
    .success-order-details-card tfoot td {
        font-size: 0.9em;
    }

    .success-mission-card h2 {
        font-size: 1.8em;
        margin-bottom: var(--spacing-md);
    }
    .mission-links {
        gap: var(--spacing-sm);
    }
    .mission-links .hero-button {
        font-size: 0.95em;
        padding: var(--spacing-sm) var(--spacing-md);
        max-width: 200px;
    }
}

==================================================
DATEINAME: src/assets/style/variables.css
--------------------------------------------------
/* main.css */
@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');

/* CSS Custom Properties (Variablen) für Konsistenz */
:root {
    /* Farben */
    --color-primary: #3468C0; /* Ein modernes, etwas gedämpfteres Blau */
    --color-primary-dark: #2F5AA9; /* Dunklerer Ton für Text */
    --color-primary-lightest: #EDF3FB; /* Sehr helles Blau */
    --color-secondary: #00BF63; /* Ein frischeres Grün für Aktionen */
    --color-secondary-light: #E0FFEE; /* Leichtes Grün für Hintergründe */
    --color-secondary-dark: #00A656; /* Dunkleres Grün für Text */
    --color-accent: #FF8B13; /* Ein wärmerer, weniger aggressiver Akzent für Preise/Wichtiges */
    --color-background-light: #F8FAFC; /* Sehr helles Grau, moderner als #f0f2f5 */
    --color-background-white: #FFFFFF;
    --color-text-dark: #2C3E50; /* Dunklerer Text für bessere Lesbarkeit */
    --color-text-medium: #627D98; /* Mittlerer Grauton für Beschreibungen */
    --color-text-light: #A0B3C8; /* Helles Grau für Hilfstexte */
    --color-border: #E0E6ED; /* Hellerer Rand */
    --color-shadow-light: rgba(0, 0, 0, 0.05);
    --color-shadow-medium: rgba(0, 0, 0, 0.1);

    /* Typografie */
    --font-family-base: 'Inter', Arial, sans-serif;
    --font-size-base: 16px;
    --line-height-base: 1.6;

    /* Abstände */
    --spacing-xs: 8px;
    --spacing-sm: 12px;
    --spacing-md: 20px;
    --spacing-lg: 30px;
    --spacing-xl: 40px;

    /* Radien */
    --border-radius-sm: 8px;
    --border-radius-md: 12px;
    --border-radius-lg: 24px;

    /* Header Höhe */
    --header-height: 70px;
    --header-height-mobile-collapsed: 60px; /* NEU: Höhe des mobilen Warenkorb-Headers, wenn zusammengeklappt */

    /* Warenkorb Höhe (2/3 der Viewport-Höhe) */
    --cart-max-height-ratio: 0.66;

    /* NEU: Maximale Breite für Hauptinhalts-Wrapper und Header/Footer */
    --content-max-width: 1300px;
}

==================================================
DATEINAME: src/api/cart_process.php
--------------------------------------------------
<?php
// api/cart_process.php

if (session_status() == PHP_SESSION_NONE) {
    session_start();
}

header('Content-Type: application/json');

// Benötigte Konfiguration und Funktionen laden
require_once __DIR__ . '/../config/config.php';
require_once ROOT_PATH . 'include/db.php'; // Stellt getDbConnection() und $pdo bereit

$response = ['success' => false, 'message' => ''];

try {
    $pdo = getDbConnection(); // Sicherstellen, dass die Verbindung besteht

    if (!isset($_SESSION['cart'])) {
        $_SESSION['cart'] = [];
    }

    if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['action'])) {
        $action = $_POST['action'];
        $productId = isset($_POST['product_id']) ? (int)$_POST['product_id'] : 0;
        $quantity = isset($_POST['quantity']) ? (int)$_POST['quantity'] : 1;

        if ($productId <= 0) {
            throw new Exception("Ungültige Produkt-ID.");
        }

        // Produktinformationen aus der Datenbank abrufen, einschließlich image_url und description
        $stmt = $pdo->prepare("SELECT product_id, name, description, price, stock_quantity, image_url FROM products WHERE product_id = :product_id AND is_active = TRUE");
        $stmt->execute([':product_id' => $productId]);
        $product = $stmt->fetch();

        if (!$product) {
            throw new Exception("Produkt nicht gefunden oder nicht aktiv.");
        }

        $availableStock = $product['stock_quantity'];

        switch ($action) {
            case 'add':
                // Prüfen, ob das Produkt bereits im Warenkorb ist
                $currentCartQuantity = isset($_SESSION['cart'][$productId]) ? $_SESSION['cart'][$productId]['quantity'] : 0;
                $newQuantity = $currentCartQuantity + $quantity;

                if ($newQuantity > $availableStock) {
                    $response['message'] = "Nicht genügend Lagerbestand. Maximal verfügbar: " . $availableStock;
                    echo json_encode($response);
                    exit();
                }

                $_SESSION['cart'][$productId] = [
                    'id' => $productId,
                    'name' => $product['name'],
                    'price' => $product['price'],
                    'quantity' => $newQuantity,
                    'stock' => $availableStock, // Lagerbestand für clientseitige Validierung
                    'image_url' => $product['image_url'], // Bild-URL im Warenkorb speichern
                    'description' => $product['description'] // Beschreibung im Warenkorb speichern (für Alt-Text)
                ];
                $response['success'] = true;
                $response['message'] = "Produkt erfolgreich hinzugefügt.";
                break;

            case 'update':
                if (!isset($_SESSION['cart'][$productId])) {
                    throw new Exception("Produkt nicht im Warenkorb.");
                }

                if ($quantity <= 0) {
                    // Wenn Menge 0 oder weniger ist, entfernen
                    unset($_SESSION['cart'][$productId]);
                    $response['success'] = true;
                    $response['message'] = "Produkt aus dem Warenkorb entfernt.";
                } else {
                    if ($quantity > $availableStock) {
                        $response['message'] = "Nicht genügend Lagerbestand. Maximal verfügbar: " . $availableStock;
                        echo json_encode($response);
                        exit();
                    }
                    $_SESSION['cart'][$productId]['quantity'] = $quantity;
                    $response['success'] = true;
                    $response['message'] = "Menge aktualisiert.";
                }
                break;

            case 'remove':
                if (!isset($_SESSION['cart'][$productId])) {
                    throw new Exception("Produkt nicht im Warenkorb.");
                }
                unset($_SESSION['cart'][$productId]);
                $response['success'] = true;
                $response['message'] = "Produkt aus dem Warenkorb entfernt.";
                break;

            default:
                throw new Exception("Unbekannte Aktion.");
        }
    } else {
        throw new Exception("Ungültige Anfrage.");
    }

} catch (Exception $e) {
    error_log("Warenkorb-Fehler: " . $e->getMessage());
    $response['message'] = $e->getMessage();
}

$response['cart'] = $_SESSION['cart'];
echo json_encode($response);

==================================================
DATEINAME: src/api/checkout_process.php
--------------------------------------------------
<?php
// api/checkout_process.php

if (session_status() == PHP_SESSION_NONE) {
    session_start();
}

header('Content-Type: application/json');

// Benötigte Konfiguration und Funktionen laden
require_once __DIR__ . '/../config/config.php';
require_once ROOT_PATH . 'include/db.php'; // Stellt getDbConnection() und $pdo bereit
require_once ROOT_PATH . 'include/email.php'; // Stellt sendAppEmail() bereit

/**
 * Formatiert einen Betrag in Euro mit spezifischen Regeln für Nachkommastellen.
 * Zeigt zwei Nachkommastellen nur an, wenn sie nicht .00 sind.
 *
 * @param float $amount Der zu formatierende Betrag.
 * @return string Der formatierte Betrag mit Euro-Symbol.
 */
function formatEuroCurrency(float $amount): string {
    // Überprüfen, ob der Betrag ganze Zahlen hat (keine Nachkommastellen oder .00)
    if (fmod($amount, 1.0) == 0) {
        return number_format($amount, 0, ',', '.') . ' €';
    } else {
        // Andernfalls mit zwei Nachkommastellen formatieren
        return number_format($amount, 2, ',', '.') . ' €';
    }
}


$response = ['success' => false, 'message' => ''];

try {
    $pdo = getDbConnection(); // Sicherstellen, dass die Verbindung besteht
    $pdo->beginTransaction(); // Transaktion starten

    if (empty($_SESSION['cart'])) {
        throw new Exception("Ihr Warenkorb ist leer. Keine Bestellung möglich.");
    }

    // Eingabedaten validieren und bereinigen
    $firstName = trim($_POST['firstName'] ?? '');
    $lastName = trim($_POST['lastName'] ?? '');
    $email = filter_var(trim($_POST['email'] ?? ''), FILTER_VALIDATE_EMAIL);
    $phone = trim($_POST['phone'] ?? '');
    $paymentMethod = $_POST['paymentMethod'] ?? ''; // 'bank_transfer' oder 'cash'
    $pickupDateId = (int)($_POST['pickupDate'] ?? 0);
    $cartTotalFromClient = (float)($_POST['cart_total'] ?? 0);

    if (empty($firstName) || empty($lastName) || !$email || empty($paymentMethod) || $pickupDateId <= 0) {
        throw new Exception("Bitte füllen Sie alle erforderlichen Felder aus.");
    }
    if (!in_array($paymentMethod, ['bank_transfer', 'cash'])) {
        throw new Exception("Ungültige Zahlungsmethode ausgewählt.");
    }

    // 1. Abholtermin überprüfen
    $stmtPickup = $pdo->prepare("SELECT pickup_datetime, location FROM pickup_dates WHERE pickup_date_id = :id AND is_active = TRUE AND pickup_datetime >= NOW()");
    $stmtPickup->execute([':id' => $pickupDateId]);
    $pickupDateInfo = $stmtPickup->fetch();

    if (!$pickupDateInfo) {
        throw new Exception("Der ausgewählte Abholtermin ist ungültig oder nicht mehr verfügbar.");
    }

    // 2. Benutzer finden oder erstellen
    $userId = null;
    $stmtUser = $pdo->prepare("SELECT user_id FROM users WHERE email = :email");
    $stmtUser->execute([':email' => $email]);
    $existingUser = $stmtUser->fetch();

    if ($existingUser) {
        $userId = $existingUser['user_id'];
        // Optional: Update user info if different
        $stmtUpdateUser = $pdo->prepare("UPDATE users SET first_name = :first_name, last_name = :last_name, phone_number = :phone_number, updated_at = CURRENT_TIMESTAMP WHERE user_id = :user_id");
        $stmtUpdateUser->execute([
            ':first_name' => $firstName,
            ':last_name' => $lastName,
            ':phone_number' => $phone,
            ':user_id' => $userId
        ]);
    } else {
        // Neuen Benutzer anlegen (vereinfacht, kein Passwort oder Registrierungsprozess hier)
        $stmtInsertUser = $pdo->prepare("INSERT INTO users (username, email, password_hash, first_name, last_name, phone_number) VALUES (:username, :email, :password_hash, :first_name, :last_name, :phone_number)");
        // Generiere einen einfachen Hash für Guest-User oder verwende Platzhalter
        $dummyPasswordHash = password_hash(uniqid(), PASSWORD_DEFAULT);
        $stmtInsertUser->execute([
            ':username' => $email, // Oder einen generischen Usernamen
            ':email' => $email,
            ':password_hash' => $dummyPasswordHash,
            ':first_name' => $firstName,
            ':last_name' => $lastName,
            ':phone_number' => $phone
        ]);
        $userId = $pdo->lastInsertId();
    }

    // 3. Warenkorb-Gesamtbetrag serverseitig neu berechnen und Lagerbestand prüfen
    $calculatedTotalAmount = 0;
    $orderItems = [];
    $productsToUpdateStock = [];

    // Kopie des Warenkorbs für die Success-Seite, da $_SESSION['cart'] gleich geleert wird
    $cart_snapshot_for_success_page = $_SESSION['cart'];

    foreach ($cart_snapshot_for_success_page as $productId => $item) {
        $stmtProduct = $pdo->prepare("SELECT product_id, name, description, price, stock_quantity FROM products WHERE product_id = :product_id AND is_active = TRUE");
        $stmtProduct->execute([':product_id' => $productId]);
        $dbProduct = $stmtProduct->fetch();

        if (!$dbProduct) {
            throw new Exception("Produkt '{$item['name']}' nicht gefunden oder nicht mehr verfügbar.");
        }

        if ($item['quantity'] > $dbProduct['stock_quantity']) {
            throw new Exception("Nicht genügend Lagerbestand für Produkt '{$dbProduct['name']}'. Verfügbar: {$dbProduct['stock_quantity']}, Bestellt: {$item['quantity']}.");
        }

        $calculatedTotalAmount += $dbProduct['price'] * $item['quantity'];
        $orderItems[] = [
            'product_id' => $productId,
            'quantity' => $item['quantity'],
            'price_at_order' => $dbProduct['price'],
            'name' => $dbProduct['name'] // Produktname für die E-Mail
        ];
        $productsToUpdateStock[$productId] = $dbProduct['stock_quantity'] - $item['quantity'];
    }

    // Optional: Überprüfung, ob der vom Client übermittelte Gesamtbetrag dem serverseitig berechneten entspricht
    // Eine geringe Toleranz für Floating-Point-Ungenauigkeiten könnte hier sinnvoll sein.
    if (abs($calculatedTotalAmount - $cartTotalFromClient) > 0.01) {
        error_log("Client-Total ($cartTotalFromClient) does not match server-total ($calculatedTotalAmount) for user $userId. Possible manipulation or rounding error.");
        // Entscheiden, ob die Bestellung abgebrochen oder der server-berechnete Betrag verwendet wird.
        // Für dieses Beispiel verwenden wir den server-berechneten Betrag.
    }


    // 4. Bestellung in die 'orders'-Tabelle einfügen
    $stmtOrder = $pdo->prepare("INSERT INTO orders (user_id, pickup_date_id, total_amount, status, payment_method) VALUES (:user_id, :pickup_date_id, :total_amount, 'pending', :payment_method)");
    $stmtOrder->execute([
        ':user_id' => $userId,
        ':pickup_date_id' => $pickupDateId,
        ':total_amount' => $calculatedTotalAmount,
        ':payment_method' => $paymentMethod
    ]);
    $orderId = $pdo->lastInsertId();

    // 5. Artikel in 'order_items' einfügen und Lagerbestand aktualisieren
    $stmtOrderItem = $pdo->prepare("INSERT INTO order_items (order_id, product_id, quantity, price_at_order) VALUES (:order_id, :product_id, :quantity, :price_at_order)");
    $stmtUpdateStock = $pdo->prepare("UPDATE products SET stock_quantity = :new_stock WHERE product_id = :product_id");

    foreach ($orderItems as $item) {
        $stmtOrderItem->execute([
            ':order_id' => $orderId,
            ':product_id' => $item['product_id'],
            ':quantity' => $item['quantity'],
            ':price_at_order' => $item['price_at_order']
        ]);
        // Lagerbestand aktualisieren
        $stmtUpdateStock->execute([
            ':new_stock' => $productsToUpdateStock[$item['product_id']],
            ':product_id' => $item['product_id']
        ]);
    }

    // 6. Zahlungsinformationen in 'payments' einfügen
    $paymentStatus = ($paymentMethod === 'cash') ? 'pending' : 'pending'; // Für Überweisung auch 'pending' bis zum Geldeingang
    $transactionId = null;

    if ($paymentMethod === 'bank_transfer') {
        // Generiere Transaktions-ID: Nachname + 4-stellige Zufallszahl
        $randomNumber = str_pad(mt_rand(0, 9999), 4, '0', STR_PAD_LEFT);
        $transactionId = strtoupper(substr($lastName, 0, 5)) . '-' . $randomNumber; // Erste 5 Buchstaben des Nachnamens + Zufallszahl
    }


    $stmtPayment = $pdo->prepare("INSERT INTO payments (order_id, amount, payment_method, transaction_id, status, notes) VALUES (:order_id, :amount, :payment_method, :transaction_id, :status, :notes)");
    $stmtPayment->execute([
        ':order_id' => $orderId,
        ':amount' => $calculatedTotalAmount,
        ':payment_method' => $paymentMethod,
        ':transaction_id' => $transactionId,
        ':status' => $paymentStatus,
        ':notes' => ($paymentMethod === 'cash') ? 'Barzahlung bei Abholung' : 'Überweisung erwartet'
    ]);

    // Transaktion committen
    $pdo->commit();

    // WARNUNG: $_SESSION['cart'] MUSS nach dem Committen der DB und VOR dem setzen der Success-Seite Daten geleert werden!
    // Andernfalls würde die Success-Seite den Warenkorb wieder befüllen, wenn die Session vor dem Redirect leert.
    // Aber für unser Frontend wird der Warenkorb ja per reload gelehrt. Wichtig ist, DASS er geleert wird.
    $_SESSION['cart'] = [];


    // --- Daten für die Success-Seite in der Session speichern (NEU) ---
    $_SESSION['last_order_id'] = $orderId;
    $_SESSION['last_order_details'] = [
        'order_id' => $orderId,
        'user_id' => $userId,
        'total_amount' => $calculatedTotalAmount,
        'order_date' => date('Y-m-d H:i:s'), // Aktuelles Datum und Uhrzeit
        'payment_method' => $paymentMethod, // Muss aus dem Formular kommen
        'items' => $orderItems, // Bereits definierte Items
    ];
    $_SESSION['last_pickup_info'] = $pickupDateInfo; // Aus der Datenbank abgerufen
    $_SESSION['last_payment_info'] = [
        'payment_method' => $paymentMethod,
        'transaction_id' => $transactionId,
        'amount' => $calculatedTotalAmount, // Hier die Gesamtsumme der Bestellung verwenden
    ];
    $_SESSION['customer_info'] = [
        'first_name' => $firstName,
        'last_name' => $lastName,
        'email' => $email,
        'phone' => $phone
    ];
    // --- Ende der Success-Seiten-Daten (NEU) ---

    // 7. Bestätigungs-E-Mail senden
    $emailSubject = "Ihre Bestellung Nr. {$orderId} bei " . MAIL_FROM_NAME;
    $emailBody = "
        <p>Hallo {$firstName} {$lastName},</p>
        <p>Vielen Dank für Ihre Bestellung! Ihre Bestellung mit der Nummer <strong>" . htmlspecialchars($orderId) . "</strong> wurde erfolgreich aufgenommen.</p>
        <p><strong>Bestelldetails:</strong></p>
        <table style='width: 100%; border-collapse: collapse; margin-bottom: 20px;'>
            <thead>
                <tr>
                    <th style='border: 1px solid #ddd; padding: 8px; text-align: left;'>Produkt</th>
                    <th style='border: 1px solid #ddd; padding: 8px; text-align: right;'>Menge</th>
                    <th style='border: 1px solid #ddd; padding: 8px; text-align: right;'>Einzelpreis</th>
                    <th style='border: 1px solid #ddd; padding: 8px; text-align: right;'>Gesamt</th>
                </tr>
            </thead>
            <tbody>";
    foreach ($orderItems as $item) {
        $emailBody .= "
                <tr>
                    <td style='border: 1px solid #ddd; padding: 8px; text-align: left;'>".htmlspecialchars($item['name'])."</td>
                    <td style='border: 1px solid #ddd; padding: 8px; text-align: right;'>{$item['quantity']}</td>
                    <td style='border: 1px solid #ddd; padding: 8px; text-align: right;'>".formatEuroCurrency($item['price_at_order'])."</td>
                    <td style='border: 1px solid #ddd; padding: 8px; text-align: right;'>".formatEuroCurrency($item['quantity'] * $item['price_at_order'])."</td>
                </tr>";
    }
    $emailBody .= "
            </tbody>
            <tfoot>
                <tr>
                    <td colspan='3' style='border: 1px solid #ddd; padding: 8px; text-align: right; font-weight: bold;'>Gesamtsumme:</td>
                    <td style='border: 1px solid #ddd; padding: 8px; text-align: right; font-weight: bold;'>".formatEuroCurrency($calculatedTotalAmount)."</td>
                </tr>
            </tfoot>
        </table>
        <p><strong>Zahlungsmethode:</strong> ";
    if ($paymentMethod === 'bank_transfer') {
        $emailBody .= "Überweisung. Bitte überweisen Sie den Betrag von <strong>" . formatEuroCurrency($calculatedTotalAmount) . "</strong> auf unser Konto. <br>
                       Verwendungszweck: <strong>" . htmlspecialchars($transactionId) . "</strong>.<br>
                       Kontoinhaber: [Ihr Name/Firmenname]<br>
                       IBAN: [Ihre IBAN]<br>
                       BIC: [Ihre BIC]";
    } else {
        $emailBody .= "Barzahlung bei Abholung.";
    }
    $emailBody .= "</p>
        <p><strong>Abholung:</strong> Ihre Bestellung ist zur Abholung bereit am <strong>" . (new DateTime($pickupDateInfo['pickup_datetime']))->format('d.m.Y H:i') . " Uhr</strong> an folgender Adresse: <strong>" . htmlspecialchars($pickupDateInfo['location']) . "</strong>.</p>
        <p>Wir freuen uns auf Sie!</p>
        <p>Mit freundlichen Grüssen,<br>Ihr Team von " . MAIL_FROM_NAME . "</p>";

    $emailSent = sendAppEmail($email, $emailSubject, $emailBody, $orderId);

    // $_SESSION['checkout_success_message'] = "Ihre Bestellung Nr. {$orderId} wurde erfolgreich aufgegeben. Eine Bestätigungs-E-Mail wurde an Ihre Adresse gesendet."; // Diese Meldung ist redundant wenn der Success-Inhalt alle Infos hat
    $_SESSION['checkout_email_status_message'] = "";
    if ($emailSent !== true) {
        error_log("Fehler beim Senden der Bestätigungs-E-Mail für Bestellung {$orderId} an {$email}: " . $emailSent);
        $_SESSION['checkout_email_status_message'] = "ACHTUNG: Die Bestätigungs-E-Mail konnte jedoch nicht gesendet werden. Bitte überprüfen Sie Ihren Spam-Ordner oder kontaktieren Sie uns unter info@früch.de.";
    }


    $response['success'] = true;

} catch (Exception $e) {
    if ($pdo->inTransaction()) {
        $pdo->rollBack();
    }
    error_log("Bestellfehler: " . $e->getMessage());
    $response['message'] = "Fehler bei der Bestellabwicklung: " . $e->getMessage();
}

echo json_encode($response);

==================================================
DATEINAME: src/include/asset_handler.php
--------------------------------------------------
<?php
// include/asset_handler.php

/**
 * Behandelt Anfragen für statische Assets, die mit einem Unterstrich (_), Bindestrich (-) oder Punkt (.) beginnen.
 * Diese Datei darf KEINE weiteren PHP-Dateien einbinden, da sie sehr früh im Request-Zyklus geladen wird.
 *
 * @param string $page_name Der bereinigte Seitenname aus der URL (das erste Segment nach dem Root).
 * @return void
 */
function handleAssetRequest(string $page_name): void
{
    // ROOT_PATH muss bereits definiert sein (z.B. in config/config.php)
    // Wenn config/config.php nicht geladen ist, würde ROOT_PATH hier einen Fehler verursachen.
    // Daher muss config/config.php VOR asset_handler.php geladen werden.
    if (!defined('ROOT_PATH')) {
        // Dies sollte nicht passieren, wenn index.php korrekt ist.
        // Aber als Fallback oder Debug-Hinweis.
        error_log("ROOT_PATH not defined before asset_handler.php. Check index.php load order.");
        http_response_code(500);
        echo "Server configuration error.";
        exit();
    }

    $assets_folder_base_path = ROOT_PATH . 'assets/';
    $file_name_without_prefix = '';
    $target_folder_path = '';

    // 1. Überprüfen, ob eine Asset-Anfrage vorliegt (beginnt mit '_', '-' oder '.')
    if (str_starts_with($page_name, '_')) {
        $file_name_without_prefix = substr($page_name, 1);
        // Wenn es sich um eine JS-Datei handelt, den Pfad anpassen
        if (str_ends_with($file_name_without_prefix, '.js')) {
            $target_folder_path = $assets_folder_base_path . 'js/';
        } else {
            $target_folder_path = $assets_folder_base_path; // Für '_' direkt im assets-Root
        }
    } elseif (str_starts_with($page_name, '-')) {
        $file_name_without_prefix = substr($page_name, 1);
        $target_folder_path = $assets_folder_base_path . 'img/'; // Für '-' im assets/img-Unterordner
    } elseif (str_starts_with($page_name, '.')) { // Für Punkt-Präfix
        $file_name_without_prefix = substr($page_name, 1);
        $target_folder_path = $assets_folder_base_path . 'style/'; // Für '.' im assets/style-Unterordner
    } else {
        // Keine Asset-Anfrage, die von dieser Funktion behandelt wird
        // Das Skript wird in index.php fortgesetzt.
        return;
    }

    $file_path = $target_folder_path . $file_name_without_prefix;

    // Prüfen, ob die Datei existiert
    if (!file_exists($file_path)) {
        http_response_code(404);
        echo "Asset not found.";
        exit();
    }

    // MIME-Typ basierend auf der Dateierweiterung setzen
    $file_extension = pathinfo($file_path, PATHINFO_EXTENSION);

    switch ($file_extension) {
        case 'css':
            header('Content-Type: text/css');
            break;
        case 'js':
            header('Content-Type: application/javascript');
            break;
        case 'ico':
            header('Content-Type: image/x-icon');
            break;
        case 'png':
            header('Content-Type: image/png');
            break;
        case 'jpg':
        case 'jpeg':
            header('Content-Type: image/jpeg');
            break;
        case 'gif':
            header('Content-Type: image/gif');
            break;
        case 'svg':
            header('Content-Type: image/svg+xml');
            break;
        case 'webp':
            header('Content-Type: image/webp');
            break;
        case 'avif':
            header('Content-Type: image/avif');
            break;
        default:
            header('Content-Type: application/octet-stream');
            break;
    }

    // Datei an den Browser senden
    readfile($file_path);
    exit(); // Wichtig: Beende das Skript nach dem Senden des Assets
}
?>

==================================================
DATEINAME: src/include/db.php
--------------------------------------------------
<?php
// include/db.php

/**
 * Datenbank-Verbindungslogik.
 *
 * Bindet die sensible Konfiguration ein und stellt eine Datenbankverbindung her.
 */


// Sensible Konfiguration einbinden
// ROOT_PATH muss in config/config.php definiert sein, um den Pfad korrekt aufzulösen
require_once ROOT_PATH . 'config/sensitive_config.php';

// Globale Variable für die Datenbankverbindung
// Alternativ könnte man eine Funktion erstellen, die die Verbindung zurückgibt
global $pdo;

try {
    // 1. Diagnose: Verfügbare PDO-Treiber prüfen
    $availableDrivers = PDO::getAvailableDrivers();
    if (!in_array('mariadb', $availableDrivers) && !in_array('mysql', $availableDrivers)) {
        $driverErrorMsg = "Der 'mariadb' oder 'mysql' PDO-Treiber wurde nicht gefunden. Verfügbare Treiber: " . implode(', ', $availableDrivers);
        error_log("Database Connection Error: " . $driverErrorMsg);
        die("Datenbankverbindung fehlgeschlagen: " . $driverErrorMsg);
    }
    
    // 2. DSN-Präfix anpassen, falls 'mariadb' nicht direkt unterstützt wird, aber 'mysql' vorhanden ist
    $dbDriver = 'mariadb';
    if (!in_array('mariadb', $availableDrivers) && in_array('mysql', $availableDrivers)) {
        $dbDriver = 'mysql'; // Fallback auf 'mysql' als DSN-Präfix, da MariaDB oft den 'mysql'-Treiber verwendet
        error_log("Info: 'mariadb' PDO-Treiber nicht direkt gefunden, verwende 'mysql' als DSN-Präfix.");
    }

    $dsn = "$dbDriver:host=" . DB_HOST . ";dbname=" . DB_NAME . ";charset=" . DB_CHARSET;
    $pdo = new PDO($dsn, DB_USER, DB_PASS);
    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
    $pdo->setAttribute(PDO::ATTR_DEFAULT_FETCH_MODE, PDO::FETCH_ASSOC);
} catch (PDOException $e) {
    // Im Falle eines Fehlers die Fehlermeldung ausgeben
    // In einer Produktionsumgebung sollte man diese Fehlermeldung loggen und dem Benutzer eine generische Fehlermeldung zeigen.
    error_log("Database Connection Error: " . $e->getMessage());
    die("Datenbankverbindung fehlgeschlagen: " . $e->getMessage());
}

// Beispiel einer Funktion, die die PDO-Instanz zurückgibt (optional, wenn $pdo global ist)
function getDbConnection(): PDO {
    global $pdo;
    return $pdo;
}
?>

==================================================
DATEINAME: src/include/disclaimer_modal.php
--------------------------------------------------
<?php
// include/disclaimer_modal.php

// Diese Datei enthält nur die PHP-Logik, die entscheidet, ob das Disclaimer-Modal angezeigt werden soll.
// Sie gibt KEIN HTML aus. Das HTML wird von templates/header.php gerendert,
// basierend auf der hier gesetzten Variable $show_disclaimer_modal.

// Prüfen, ob der Disclaimer-Cookie bereits gesetzt ist.
if (!isset($_COOKIE['disclaimer_accepted'])) {
    // Wenn der Cookie NICHT gesetzt ist, bereite das Modal zur Anzeige vor.
    // Wir setzen eine Session-Variable, damit das Modal nur einmal pro Session gerendert wird,
    // selbst wenn der User das Modal offen lässt und andere Seiten aufruft (ohne es zu akzeptieren).
    // Der "disclaimer_accepted" Cookie bleibt das finale Kriterium.
    if (!isset($_SESSION['disclaimer_shown'])) {
        $_SESSION['disclaimer_shown'] = true;
        $show_disclaimer_modal = true;
    } else {
        $show_disclaimer_modal = false;
    }
} else {
    $show_disclaimer_modal = false;
}

// Die Variable $show_disclaimer_modal ist nun im globalen Scope verfügbar
// und kann von templates/header.php abgefragt werden.
?>

==================================================
DATEINAME: src/include/discord.php
--------------------------------------------------
<?php
// src/include/discord.php

/**
 * Holt die vollständige aktuelle URL.
 * @return string Die aktuelle URL.
 */
if (!function_exists('getCurrentURL')) {
    function getCurrentURL() {
        $protocol = (!empty($_SERVER['HTTPS']) && $_SERVER['HTTPS'] !== 'off' || $_SERVER['SERVER_PORT'] == 443) ? "https://" : "http://";
        $host = $_SERVER['HTTP_HOST'];
        $uri = $_SERVER['REQUEST_URI'];
        return $protocol . $host . $uri;
    }
}

/**
 * Extrahiert die Domain aus einer vollständigen URL.
 * @param string $url Die URL, aus der die Domain extrahiert werden soll.
 * @return string Die Domain (z.B. "www.example.com").
 */
if (!function_exists('getDomain')) {
    function getDomain($url) {
        $parsedUrl = parse_url($url);
        return $parsedUrl['host'] ?? '';
    }
}

if (!function_exists('sendDiscordWebhook')) {
    function sendDiscordWebhook($message, $title, $description, $sender, $type) {

        $url = getCurrentURL();
        $domain = getDomain($url);

        // Environment-spezifische Webhook-URLs
        if ($domain === 'www.xn--frch-1ra.de') { // Production URL
            $webhookUrl = 'https://discord.com/api/webhooks/1205814879013961738/e9CVnoC04TTkc2Bfp2ePDp4aLYYUDIcvCpj5jqGS9LBvT9rGSj-FMLoTU50kcfSp-46y';
        } else { // Development/Localhost/Other URL
            $webhookUrl = 'https://discord.com/api/webhooks/1207046107113201754/0DOJTmmiOtbZHchtcfKhfKsrXbGsEkkcQU7w9LOJ3la3V5-2uLJ_Wkb-5_QhPF6AMzQV';
        }

        // Farben für verschiedene Nachrichtentypen definieren
        $colors = [
            'login' => 8454143, // Grün für Login
            'register' => 255, // Blau für Registrierung
            'order' => 65280, // Grün für Bestellungen
            'reorder' => 16754432, // Rot für Reorder
            'move' => 1118481, // Grau für Bewegt
            'error' => 16711680, // Rot für Fehler
            'warning' => 16776960, // Gelb für Warnungen
            'info' => 3447003, // Hellblau für Infos
        ];

        // Prüfen, ob der Nachrichtentyp unterstützt wird
        if (!array_key_exists($type, $colors)) {
            // Fallback auf 'info' oder 'error' wenn unbekannter Typ
            $type = 'info';
            // Optional: Log this unexpected type somewhere
        }

        // Zeitstempel generieren
        $timestamp = date('c');

        // JSON-Daten für die Discord-Nachricht vorbereiten
        $data = [
            'username' => 'Jungeee', // Your bot's username on Discord
            'content' => $message,
            'embeds' => [
                [
                    'title' => $title,
                    'description' => $description,
                    'fields' => [
                        [
                            'name' => 'Absender',
                            'value' => $sender,
                            'inline' => true
                        ],
                        [
                            'name' => 'Umgebung',
                            'value' => ($domain === 'www.xn--frch-1ra.de' ? 'Produktion' : 'Entwicklung/Test'),
                            'inline' => true
                        ],
                        [
                            'name' => 'URL',
                            'value' => $url,
                            'inline' => false
                        ]
                    ],
                    'color' => $colors[$type],
                    'timestamp' => $timestamp
                ]
            ]
        ];

        // JSON in ein String-Format umwandeln
        $jsonData = json_encode($data);

        // HTTP-Anfrage vorbereiten
        $ch = curl_init($webhookUrl);
        curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-type: application/json'));
        curl_setopt($ch, CURLOPT_POST, 1);
        curl_setopt($ch, CURLOPT_POSTFIELDS, $jsonData);
        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1);
        curl_setopt($ch, CURLOPT_HEADER, 0);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);

        // Anfrage ausführen
        $response = curl_exec($ch);

        // Antwort überprüfen (optional, für Debugging)
        if ($response === false) {
            error_log('Fehler beim Senden der Discord-Nachricht: ' . curl_error($ch));
        }

        // CURL-Verbindung schließen
        curl_close($ch);
    }
}

==================================================
DATEINAME: src/include/email.php
--------------------------------------------------
<?php
// include/email.php

/**
 * E-Mail-Funktionen unter Verwendung von PHPMailer.
 *
 * Bindet die sensible Konfiguration ein und stellt eine Funktion zum Senden von E-Mails bereit.
 */

// Diese Zeilen sind gut für die Entwicklung, um PHP-Fehler anzuzeigen.
// In einer Produktionsumgebung sollten diese Zeilen entfernt oder entsprechend angepasst werden,
// um Fehler in Log-Dateien zu schreiben und nicht direkt anzuzeigen.
ini_set('display_errors', 1);
ini_set('display_startup_errors', 1);
error_reporting(E_ALL);

// Sensible Konfiguration einbinden
require_once ROOT_PATH . 'config/sensitive_config.php';
require_once ROOT_PATH . 'include/db.php'; // Stelle sicher, dass die DB-Verbindung hier verfügbar ist

// Composer Autoload einbinden. Dies lädt PHPMailer und andere Bibliotheken.
require_once ROOT_PATH . 'vendor/autoload.php';

use PHPMailer\PHPMailer\PHPMailer;
use PHPMailer\PHPMailer\Exception;

if (!function_exists('sendAppEmail')) {
    /**
     * Sendet eine E-Mail über die konfigurierte SMTP-Verbindung mit einem HTML-Template
     * und protokolliert den Versand in der Datenbank.
     *
     * @param string $to Empfänger-E-Mail-Adresse
     * @param string $subject Betreff der E-Mail
     * @param string $message Der Inhalt der E-Mail (HTML wird erwartet)
     * @param int|null $orderId Optionale Bestell-ID, falls E-Mail zu einer Bestellung gehört
     * @return bool|string True bei Erfolg, Fehlermeldung als String bei Fehler
     */
    function sendAppEmail(string $to, string $subject, string $message, ?int $orderId = null)
    {
        global $pdo; // Datenbankverbindung nutzen
        $mail = new PHPMailer(true);

        $logStatus = 'failed';
        $logErrorMessage = null;

        try {
            // Server-Einstellungen
            $mail->isSMTP();
            $mail->Host       = MAIL_HOST;
            $mail->SMTPAuth   = true;
            $mail->Username   = MAIL_USERNAME;
            $mail->Password   = MAIL_PASSWORD;

            if (defined('MAIL_ENCRYPTION')) {
                switch (strtolower(MAIL_ENCRYPTION)) {
                    case 'ssl':
                        $mail->SMTPSecure = PHPMailer::ENCRYPTION_SMTPS;
                        break;
                    case 'tls':
                    default:
                        $mail->SMTPSecure = PHPMailer::ENCRYPTION_STARTTLS;
                        break;
                }
            } else {
                $mail->SMTPSecure = PHPMailer::ENCRYPTION_STARTTLS;
            }

            $mail->Port       = MAIL_PORT;

            $fromEmail = MAIL_FROM_EMAIL;
            $atPos = strrpos($fromEmail, '@');
            if ($atPos !== false) {
                $usernamePart = substr($fromEmail, 0, $atPos);
                $domainPart = substr($fromEmail, $atPos + 1);
                if (function_exists('idn_to_ascii')) {
                    $punycodeDomain = idn_to_ascii($domainPart, IDNA_NONTRANSITIONAL_TO_ASCII, INTL_IDNA_VARIANT_UTS46);
                    if ($punycodeDomain !== false) {
                        $fromEmail = $usernamePart . '@' . $punycodeDomain;
                    } else {
                        error_log("Warnung: idn_to_ascii konnte die Domain '{$domainPart}' nicht in Punycode umwandeln.");
                    }
                } else {
                    error_log("Warnung: PHP intl Erweiterung nicht geladen. 'From'-Adresse könnte Probleme mit Sonderzeichen verursachen.");
                }
            }

            $mail->setFrom($fromEmail, MAIL_FROM_NAME);
            $mail->addAddress($to);

            // Inhalt
            $mail->CharSet = 'UTF-8';
            $mail->isHTML(true);
            $mail->Subject = $subject;
            $messageWithCss = '
            <!DOCTYPE html>
            <html>
            <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <style>
            body { font-family: Arial, sans-serif; margin: 0; padding: 0; background-color: #f4f4f4; color: #333333; }
            .container { width: 100%; max-width: 600px; margin: 0 auto; padding: 20px; text-align: center; background-color: #ffffff; box-shadow: 0px 2px 5px rgba(0, 0, 0, 0.1); border-radius: 8px; }
            .message-box { border: 1px solid #e0e0e0; padding: 20px; border-radius: 5px; background-color: #ffffff; text-align: left; line-height: 1.6; }
            p { margin-bottom: 1em; }
            </style>
            </head>
            <body>
            <div class="container">
                <div class="message-box">
                    ' . $message . '
                </div>
            </div>
            </body>
            </html>
            ';
            $mail->Body = $messageWithCss;
            $mail->AltBody = strip_tags($message);

            $mail->send();
            $logStatus = 'sent';
            return true;

        } catch (Exception $e) {
            $logErrorMessage = $mail->ErrorInfo;
            error_log("E-Mail konnte nicht gesendet werden. Mailer Error: {$logErrorMessage}");
            return "E-Mail konnte nicht gesendet werden. Mailer Error: {$logErrorMessage}";
        } finally {
            // E-Mail-Versand protokollieren
            if (isset($pdo)) {
                try {
                    $stmtLog = $pdo->prepare("INSERT INTO email_logs (to_email, subject, body_snippet, status, error_message, order_id) VALUES (:to_email, :subject, :body_snippet, :status, :error_message, :order_id)");
                    $stmtLog->execute([
                        ':to_email' => $to,
                        ':subject' => $subject,
                        ':body_snippet' => substr(strip_tags($message), 0, 500) . '...', // Snippet des Inhalts
                        ':status' => $logStatus,
                        ':error_message' => $logErrorMessage,
                        ':order_id' => $orderId
                    ]);
                } catch (PDOException $e) {
                    error_log("Fehler beim Protokollieren der E-Mail in der Datenbank: " . $e->getMessage());
                }
            } else {
                error_log("PDO-Verbindung nicht verfügbar für E-Mail-Protokollierung.");
            }
        }
    }
}

==================================================
DATEINAME: src/include/helpers.php
--------------------------------------------------
<?php
// include/helpers.php

/**
 * Formatiert einen Betrag in Euro mit spezifischen Regeln für Nachkommastellen.
 * Zeigt zwei Nachkommastellen nur an, wenn sie nicht .00 sind.
 *
 * @param float $amount Der zu formatierende Betrag.
 * @return string Der formatierte Betrag mit Euro-Symbol.
 */
if (!function_exists('formatEuroCurrency')) {
    function formatEuroCurrency(float $amount): string {
        // Überprüfen, ob der Betrag ganze Zahlen hat (keine Nachkommastellen oder .00)
        if (fmod($amount, 1.0) == 0) {
            return number_format($amount, 0, ',', '.') . ' €';
        } else {
            // Andernfalls mit zwei Nachkommastellen formatieren
            return number_format($amount, 2, ',', '.') . ' €';
        }
    }
}

==================================================
DATEINAME: src/include/loader.php
--------------------------------------------------
<?php
// include/loader.php
// Dieser Loader bindet alle anderen .php-Dateien im aktuellen Verzeichnis ('include'-Ordner) ein.

$include_dir = __DIR__; // Das aktuelle Verzeichnis (der 'include'-Ordner)

foreach (glob($include_dir . '/*.php') as $filename) {
    // Sicherstellen, dass der Loader sich nicht selbst einbindet
    if (basename($filename) !== 'loader.php') {
        require_once $filename;
    }
}
?>

==================================================
DATEINAME: src/include/startup.php
--------------------------------------------------
<?php
// src/include/startup.php

/**
 * Initialisierungs-Einstellungen für die Anwendung.
 */

// Stellen Sie sicher, dass discord.php geladen ist, bevor wir es hier verwenden
// (loader.php sollte dies bereits tun, aber defensive Programmierung schadet nicht)
if (!function_exists('sendDiscordWebhook')) {
    require_once ROOT_PATH . 'include/discord.php';
}


$is_localhost = (in_array($_SERVER['REMOTE_ADDR'], ['127.0.0.1', '::1']) || strpos($_SERVER['HTTP_HOST'], 'localhost') !== false);

if ($is_localhost) {
    // Auf localhost: detaillierte Fehler anzeigen
    ini_set('display_errors', 1);
    ini_set('display_startup_errors', 1);
    error_reporting(E_ALL);
} else {
    // In einer Live-Umgebung: Fehler nicht anzeigen, aber loggen und an Discord senden
    ini_set('display_errors', 0);
    ini_set('display_startup_errors', 0);
    error_reporting(E_ALL); // Fehler trotzdem loggen und an Custom Handler senden
    ini_set('log_errors', 1); // PHP soll Fehler trotzdem in das Log-File schreiben (zusätzlich zu Discord)
    ini_set('error_log', ROOT_PATH . 'logs/php_errors.log'); // Stelle sicher, dass der logs-Ordner existiert und beschreibbar ist

    // Benutzerdefinierten Fehlerhandler registrieren
    set_error_handler(function($errno, $errstr, $errfile, $errline) {
        // Ignoriere @-Suppressor oder bestimmte Fehlerlevel, falls gewünscht
        if (!(error_reporting() & $errno)) {
            return false; // PHP soll den internen Error-Handler weiter ausführen
        }

        $error_type = "Fehler";
        switch ($errno) {
            case E_ERROR:
            case E_PARSE:
            case E_CORE_ERROR:
            case E_COMPILE_ERROR:
            case E_USER_ERROR:
                $error_type = "Kritischer Fehler";
                break;
            case E_WARNING:
            case E_USER_WARNING:
            case E_COMPILE_WARNING:
            case E_RECOVERABLE_ERROR:
                $error_type = "Warnung";
                break;
            case E_NOTICE:
            case E_USER_NOTICE:
            case E_STRICT:
                $error_type = "Hinweis";
                break;
            case E_DEPRECATED:
            case E_USER_DEPRECATED:
                $error_type = "Veraltet";
                break;
        }

        $title = "PHP " . $error_type . " im Backend";
        $description = "**Meldung:** " . htmlspecialchars($errstr) . "\n"
                     . "**Datei:** `" . htmlspecialchars($errfile) . "`\n"
                     . "**Zeile:** `" . $errline . "`\n"
                     . "**Fehlernummer:** `" . $errno . "`";

        // Sende nur relevante Fehler an Discord (z.B. keine Notices in Prod)
        if ($errno !== E_NOTICE && $errno !== E_USER_NOTICE && $errno !== E_DEPRECATED && $errno !== E_USER_DEPRECATED) {
             sendDiscordWebhook("Ein Problem ist aufgetreten!", $title, $description, "PHP Error Handler", "error");
        }

        // Rückgabe false, damit der PHP-Standardfehlerhandler auch ausgeführt wird,
        // um z.B. das Logging in 'php_errors.log' zu gewährleisten.
        return false;
    });

    // Benutzerdefinierten Exception-Handler registrieren
    set_exception_handler(function($exception) {
        $title = "Unerwartete Exception im Backend";
        $description = "**Meldung:** " . htmlspecialchars($exception->getMessage()) . "\n"
                     . "**Datei:** `" . htmlspecialchars($exception->getFile()) . "`\n"
                     . "**Zeile:** `" . $exception->getLine() . "`\n"
                     . "**Code:** `" . $exception->getCode() . "`";

        sendDiscordWebhook("Ein unerwarteter Fehler ist aufgetreten!", $title, $description, "PHP Exception Handler", "error");

        // Optional: Hier könnte man eine generische Fehlerseite anzeigen
        // error_log("Uncaught exception: " . $exception->getMessage() . " in " . $exception->getFile() . ":" . $exception->getLine());
        // http_response_code(500);
        // echo "Ein unerwarteter Fehler ist aufgetreten.";
    });
}

==================================================
DATEINAME: src/modules/404.php
--------------------------------------------------
    <div class="container">
        <h1>Uups! Seite nicht gefunden (Fehler 404)</h1>
        <p>Es tut uns leid, aber die von Ihnen angeforderte Seite scheint sich auf eine kleine Reise begeben zu haben oder existiert nicht mehr. Keine Sorge, das passiert den Besten!</p>
        <p>Bitte überprüfen Sie die URL noch einmal auf Tippfehler oder versuchen Sie es mit einer der folgenden Optionen:</p>
        <div class="suggestions">
            <h3>Wie geht es weiter?</h3>
            <ul>
                <li>Gehen Sie zurück zur <a href="/">Startseite</a>.</li>
                <li>Kontaktieren Sie uns, wenn Sie weiterhin Probleme haben: <a href="/kontakt">Kontaktformular</a>.</li>
            </ul>
        </div>
    </div>

==================================================
DATEINAME: src/modules/geschichte.php
--------------------------------------------------
Geschichte

==================================================
DATEINAME: src/modules/home.php
--------------------------------------------------
<?php
// modules/home.php

// Hier könnten Sie bei Bedarf dynamische Daten laden, z.B. eine Auswahl von Produkten für den Teaser.
// Für diese Beispielseite werden wir hauptsächlich statische Inhalte verwenden,
// die das Design und die Animationen demonstrieren.

// Beispiel für das Abrufen von 3 aktiven Produkten für den Teaser
global $pdo;
$featured_products = [];
if (isset($pdo)) {
    try {
        // GEÄNDERT: 'stock_quantity' zur Abfrage hinzugefügt
        $stmt = $pdo->prepare("SELECT product_id, name, description, price, image_url, stock_quantity FROM products WHERE is_active = TRUE ORDER BY created_at DESC LIMIT 3");
        $stmt->execute();
        $featured_products = $stmt->fetchAll();
    } catch (PDOException $e) {
        error_log("Fehler beim Laden der Featured Products für die Homepage: " . $e->getMessage());
        // $featured_products bleibt leer
    }
}

// Die Funktion formatEuroCurrency() wird über include/helpers.php geladen und ist global verfügbar.
if (!function_exists('formatEuroCurrency')) {
    function formatEuroCurrency(float $amount): string {
        if (fmod($amount, 1.0) == 0) {
            return number_format($amount, 0, ',', '.') . ' €';
        } else {
            return number_format($amount, 2, ',', '.') . ' €';
        }
    }
}
?>

<div class="home-page-content">

    <!-- Hero Sektion -->
    <section class="hero-section">
        <div class="hero-content">
            <h1>Frische Früchte direkt aus Portugal</h1>
            <p>Erlebe den wahren Geschmack der Natur – saisonal, nachhaltig und mit Liebe geerntet.</p>
            <a href="/shop" class="hero-button">Jetzt bestellen</a>
            <span class="mission-highlight">100% des Gewinnes gehen in die Missionsarbeit!</span>
        </div>
    </section>

    <!-- Über uns / Philosophie Sektion -->
    <section class="home-section" id="about-us">
        <div class="home-section-content">
            <h2>Unsere Mission: Guter Geschmack, Gutes tun</h2>
            <p>Bei Früchte aus Portugal glauben wir an Authentizität und Qualität. Wir bringen dir handverlesene, sonnengereifte Früchte direkt von kleinen Bauernhöfen in Portugal. Ohne Umwege, ohne unnötige Zusätze – einfach purer Genuss.</p>
            <p>Doch wir sind mehr als nur ein ein gutes Geschäft. Unser Projekt verfolgt ein höheres Ziel: <strong>100% des Gewinnes aus jedem Verkauf fließen direkt in die Missionsarbeit.</strong> Mit jedem Bissen einer saftigen Orange oder einer süßen Kiwi unterstützt du wichtige Projekte, die Menschen in Not helfen und Hoffnung schenken. Dein Einkauf hat eine doppelte Wirkung!</p>
            <p>Jede Frucht erzählt eine Geschichte von Sonne, Leidenschaft und traditionellem Anbau, und trägt gleichzeitig dazu bei, die Welt ein kleines Stück besser zu machen. Entdecke den Unterschied, den echte Qualität und ein gutes Herz machen.</p>
        </div>
    </section>

    <!-- Vorteile / Features Sektion -->
    <section class="home-section" id="features">
        <div class="home-section-content">
            <h2>Warum Früchte aus Portugal wählen?</h2>
            <div class="features-grid">
                <div class="feature-item">
                    <img src="/-quality.jpeg" alt="Icon für Qualität">
                    <h3>Unvergleichliche Qualität</h3>
                    <p>Die Früchte werden frisch gepflügt. Somit haben sie viel mehr Zeit in der Sonne verbracht als übliche Früchte.</p>
                </div>
                <div class="feature-item">
                    <img src="/-freshness.jpeg" alt="Icon für Frische">
                    <h3>Garantierte Frische</h3>
                    <p>Direkt vom Baum zu dir – für ein Geschmackserlebnis wie im Urlaub.</p>
                </div>
                <div class="feature-item">
                    <img src="/-mission.jpeg" alt="Icon für Für die Missionsarbeit">
                    <h3>Für die Missionsarbeit</h3>
                    <p>Damit die Früchte zu dir kommen, gibt es viele ehrenamtliche Helfer.</p>
                </div>
            </div>
        </div>
    </section>

    <!-- Produkt Teaser Sektion -->
    <section class="home-section" id="products-teaser">
        <div class="home-section-content">
            <h2>Unsere beliebtesten Früchte</h2>
            <p>Entdecke eine Auswahl unserer exquisiten Produkte, die unsere Kunden lieben.</p>
            <!-- GEÄNDERT: 'product-teaser-grid' wird zu 'product-grid' für Konsistenz -->
            <div class="product-grid">
                <?php if (!empty($featured_products)): ?>
                    <?php foreach ($featured_products as $product):
                        // GEÄNDERT: Komplette Struktur aus shop.php übernommen
                        $is_sold_out = ((int)$product['stock_quantity'] <= 0);
                        $button_text = $is_sold_out ? 'Ausverkauft' : 'In den Warenkorb';
                        $is_disabled = $is_sold_out ? 'disabled' : '';
                        $input_value = $is_sold_out ? '0' : '1';
                    ?>
                        <div class="product-item">
                            <div class="product-image-container">
                                <img src="<?php echo htmlspecialchars($product['image_url'] ?: '/_placeholder.png'); ?>" 
                                     alt="Produktbild von <?php echo htmlspecialchars($product['name']); ?>" 
                                     loading="lazy" decoding="async">
                                <h3><?php echo htmlspecialchars($product['name']); ?></h3>
                            </div>
                            <p class="product-quantity-price-line">
                                <span class="product-unit"><?php echo htmlspecialchars($product['description']); ?> für</span> 
                                <span class="product-price-value"><?php echo formatEuroCurrency($product['price']); ?></span>
                            </p>
                            <div class="product-controls">
                            </div>
                        </div>
                    <?php endforeach; ?>
                <?php else: ?>
                    <p>Derzeit keine Produkte zum Anpreisen verfügbar. Besuchen Sie unseren <a href="/shop">Shop</a>!</p>
                <?php endif; ?>
            </div>
            <div style="margin-top: var(--spacing-xl);">
                <a href="/shop" class="hero-button">Alle Produkte entdecken</a>
            </div>
        </div>
    </section>

    <!-- Call to Action Sektion -->
    <section class="cta-section">
        <div class="home-section-content">
            <h2>Bereit, zu geniessen und zu helfen?</h2>
            <p>Tauche ein in die Welt der unvergleichlichen Geschmäcker und unterstütze gleichzeitig unsere Missionsarbeit. Jeder Einkauf zählt!</p>
            <a href="/shop" class="cta-button">Jetzt reinschauen & Gutes tun</a>
            <span class="mission-highlight" style="color: white; font-size: 1.1em; margin-top: var(--spacing-lg);">100% des Gewinnes gehen in die Missionsarbeit!</span>
        </div>
    </section>

</div>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        // Observer für Scroll-Animationen
        const animateOnScroll = () => {
            const sections = document.querySelectorAll('.home-section');

            const observerOptions = {
                root: null, // viewport
                rootMargin: '0px',
                threshold: 0.1 // 10% der Sektion muss sichtbar sein
            };

            const observer = new IntersectionObserver((entries, observer) => {
                entries.forEach(entry => {
                    if (entry.isIntersecting) {
                        entry.target.classList.add('is-visible');
                        // Optional: Animation nur einmal abspielen, kann aber auch wiederholt werden,
                        // wenn man aus dem Viewport scrollt und wieder hinein.
                        // observer.unobserve(entry.target);
                    } else {
                        // Optional: Elemente wieder verstecken, wenn sie nicht mehr sichtbar sind
                        // entry.target.classList.remove('is-visible');
                    }
                });
            }, observerOptions);

            sections.forEach(section => {
                observer.observe(section);
            });
        };

        animateOnScroll();
    });
</script>

==================================================
DATEINAME: src/modules/kontakt.php
--------------------------------------------------
Kontakt

==================================================
DATEINAME: src/modules/shop.php
--------------------------------------------------
<?php
// modules/shop.php

// Stellt sicher, dass die Session gestartet ist.
if (session_status() == PHP_SESSION_NONE) {
    session_start();
}

// Initialisiert den Warenkorb in der Session, falls nicht vorhanden.
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
}

// Stellt die Datenbankverbindung sicher.
global $pdo;
if (!isset($pdo)) {
    // Fallback, falls die globale Variable nicht gesetzt ist.
    require_once ROOT_PATH . 'include/db.php';
    $pdo = getDbConnection();
}

// Initialisierung von Variablen
$products_by_category = [];
$error_message = '';

try {
    // Ruft alle aktiven Produkte ab und sortiert sie nach Kategorie und Produkt-ID.
    $stmt = $pdo->query(
        "SELECT p.*, c.name as category_name 
         FROM products p 
         JOIN categories c ON p.category_id = c.category_id 
         WHERE p.is_active = TRUE 
         ORDER BY c.category_id ASC, p.product_id ASC"
    );
    $all_products = $stmt->fetchAll();

    // Gruppiert Produkte nach ihrem Kategorienamen.
    foreach ($all_products as $product) {
        $products_by_category[$product['category_name']][] = $product;
    }

} catch (PDOException $e) {
    error_log("Datenbankfehler auf der Shop-Seite: " . $e->getMessage());
    $error_message = "Ein unerwarteter Fehler ist aufgetreten. Bitte versuchen Sie es später erneut.";
}

// Berechnet den initialen Gesamtbetrag und die Artikelanzahl des Warenkorbs.
$cart_total = 0;
$cart_item_count = 0;
foreach ($_SESSION['cart'] as $item) {
    $cart_total += $item['price'] * $item['quantity'];
    $cart_item_count += $item['quantity'];
}
?>

<!-- Wrapper für Hauptinhalt und Seitenleiste -->
<div class="site-content-wrapper">

    <main>
        <?php if ($error_message): ?>
            <div class="alert error"><?php echo htmlspecialchars($error_message); ?></div>
        <?php endif; ?>

        <div class="product-list">
            <?php if (empty($products_by_category)): ?>
                <p>Derzeit sind keine Produkte verfügbar.</p>
            <?php else: ?>
                <?php foreach ($products_by_category as $category_name => $products): ?>
                    <section class="category-section">
                        <h2><?php echo htmlspecialchars($category_name); ?></h2>
                        <div class="product-grid">
                            <?php foreach ($products as $product):
                                // Logik für ausverkaufte Produkte
                                $is_sold_out = ((int)$product['stock_quantity'] <= 0);
                                $button_text = $is_sold_out ? 'Ausverkauft' : 'In den Warenkorb';
                                $is_disabled = $is_sold_out ? 'disabled' : '';
                                $input_value = $is_sold_out ? '0' : '1';
                            ?>
                                <div class="product-item">
                                    <div class="product-image-container">
                                        <img src="<?php echo htmlspecialchars($product['image_url'] ?: '/_placeholder.png'); ?>" 
                                             alt="Produktbild von <?php echo htmlspecialchars($product['name']); ?>" 
                                             loading="lazy" decoding="async">
                                        <h3><?php echo htmlspecialchars($product['name']); ?></h3>
                                    </div>
                                    <p class="product-quantity-price-line">
                                        <span class="product-unit"><?php echo htmlspecialchars($product['description']); ?> für</span> 
                                        <span class="product-price-value"><?php echo formatEuroCurrency($product['price']); ?></span>
                                    </p>
                                    <div class="product-controls">
                                        <input type="number" class="quantity-input" value="<?php echo $input_value; ?>" min="0" 
                                               max="<?php echo (int)$product['stock_quantity']; ?>" 
                                               data-product-id="<?php echo (int)$product['product_id']; ?>" <?php echo $is_disabled; ?>>
                                        <button class="add-to-cart-btn"
                                                data-product-id="<?php echo (int)$product['product_id']; ?>"
                                                data-product-name="<?php echo htmlspecialchars($product['name']); ?>"
                                                data-product-price="<?php echo htmlspecialchars($product['price']); ?>"
                                                data-product-stock="<?php echo (int)$product['stock_quantity']; ?>"
                                                data-product-image="<?php echo htmlspecialchars($product['image_url'] ?: '/_placeholder.png'); ?>"
                                                data-product-description="<?php echo htmlspecialchars($product['description']); ?>"
                                                <?php echo $is_disabled; ?>>
                                            <?php echo $button_text; ?>
                                        </button>
                                    </div>
                                </div>
                            <?php endforeach; ?>
                        </div>
                    </section>
                <?php endforeach; ?>
            <?php endif; ?>
        </div>
    </main>

    <aside class="cart-sidebar">
        <!-- Warenkorb-Header für Desktop -->
        <div class="cart-header-desktop">
            <h2>Ihr Warenkorb</h2>
        </div>

        <!-- Warenkorb-Header für Mobilgeräte (klappbar) -->
        <div class="cart-header-mobile">
            <span class="cart-mobile-summary">
                Warenkorb (<span id="mobile-cart-item-count"><?php echo $cart_item_count; ?></span>) - <span id="mobile-cart-total-summary"><?php echo formatEuroCurrency($cart_total); ?></span>
            </span>
            <button id="cart-toggle-mobile" class="cart-toggle-button" aria-label="Warenkorb ein-/ausklappen">
                <span class="toggle-text">Details</span> <span class="toggle-icon">▼</span>
            </button>
        </div>

        <!-- Hauptinhalt des Warenkorbs -->
        <div class="cart-body-content">
            <div class="cart-items-scrollable-wrapper">
                <ul id="cart-items">
                    <?php if (empty($_SESSION['cart'])): ?>
                        <li id="cart-empty-message">Ihr Warenkorb ist leer.</li>
                    <?php else: ?>
                        <?php foreach ($_SESSION['cart'] as $productId => $item): ?>
                            <li class="cart-item" data-product-id="<?php echo htmlspecialchars($productId); ?>">
                                <img src="<?php echo htmlspecialchars($item['image_url'] ?: '/_placeholder.png'); ?>" 
                                     alt="Bild von <?php echo htmlspecialchars($item['name']); ?>" class="cart-item-image" 
                                     loading="lazy" decoding="async">
                                <div class="cart-item-info">
                                    <h4><?php echo htmlspecialchars($item['name']); ?></h4>
                                    <p><?php echo formatEuroCurrency((float)$item['price'] * (int)$item['quantity']); ?></p>
                                </div>
                                <div class="cart-item-controls">
                                    <input type="number" class="cart-quantity-input" value="<?php echo (int)$item['quantity']; ?>" min="1" 
                                           max="<?php echo (int)$item['stock']; ?>" data-product-id="<?php echo htmlspecialchars($productId); ?>">
                                    <button class="remove-item-btn" data-product-id="<?php echo htmlspecialchars($productId); ?>" aria-label="Artikel entfernen">×</button>
                                </div>
                            </li>
                        <?php endforeach; ?>
                    <?php endif; ?>
                </ul>
            </div>
            <div id="cart-total-container">
                <span>Gesamt:</span> <span id="cart-total"><?php echo formatEuroCurrency($cart_total); ?></span>
            </div>
            <button class="checkout-button" id="open-checkout-modal" <?php echo empty($_SESSION['cart']) ? 'disabled' : ''; ?>>
                Weiter
            </button>
        </div>
    </aside>

</div> <!-- Ende .site-content-wrapper -->

==================================================
DATEINAME: src/modules/success.php
--------------------------------------------------
<?php
// modules/success.php

if (session_status() == PHP_SESSION_NONE) {
    session_start();
}

// Holen der Session-Nachrichten und -Daten
$success_message = $_SESSION['checkout_success_message'] ?? '';
unset($_SESSION['checkout_success_message']);

$email_status_message = $_SESSION['checkout_email_status_message'] ?? '';
unset($_SESSION['checkout_email_status_message']);

$orderId = $_SESSION['last_order_id'] ?? null;
$orderDetails = $_SESSION['last_order_details'] ?? null;
$pickupInfo = $_SESSION['last_pickup_info'] ?? null;
$paymentInfo = $_SESSION['last_payment_info'] ?? null;
$customerInfo = $_SESSION['customer_info'] ?? null;

// Unsetten, um sicherzustellen, dass sie bei erneutem direkten Aufruf leer sind
unset($_SESSION['last_order_id']);
unset($_SESSION['last_order_details']);
unset($_SESSION['last_pickup_info']);
unset($_SESSION['last_payment_info']);
unset($_SESSION['customer_info']);


// Robuste Fallback-Prüfung: Wenn keine vollständigen Daten vorhanden sind, aktiviere den Fallback-Modus
$fallback_mode = false;
if (!$orderId || !$orderDetails || !$pickupInfo || !$paymentInfo || !$customerInfo) {
    error_log("FEHLER: Session-Daten für Bestellbestätigungsseite fehlen. Möglicherweise direkter Aufruf oder Session-Verlust.");
    $fallback_mode = true;
    $error_message_header = "Bestelldetails konnten leider nicht geladen werden.";
    if (empty($orderId)) {
        $error_message_header .= " Es konnte keine Bestellnummer ermittelt werden.";
    } else {
        $error_message_header .= " Ihre Bestellnummer war eventuell: " . htmlspecialchars($orderId) . ".";
    }
    $error_message_header .= " Bitte kontaktieren Sie uns umgehend unter <a href='mailto:info@früch.de'>info@früch.de</a> mit dem Betreff 'Fehlende Bestellbestätigung' (referenziert Bestellung Nr. " . ($orderId ? htmlspecialchars($orderId) : 'N/A') . ").";
}


// Hilfsfunktion zur Formatierung
if (!function_exists('formatEuroCurrency')) {
    function formatEuroCurrency(float $amount): string {
        if (fmod($amount, 1.0) == 0) {
            return number_format($amount, 0, ',', '.') . ' €';
        } else {
            return number_format($amount, 2, ',', '.') . ' €';
        }
    }
}

// Konfigurationsdetails für die Überweisung (idealerweise aus einer Konfigurationsdatei oder DB)
// Für dieses Beispiel als feste Strings, aber in Realität dynamisch holen
$bank_account_holder = "Früchte aus Portugal"; // Oder dein richtiger Name
$bank_iban = "DE12 3456 7890 1234 5678 90"; // Dummy-IBAN, ANPASSEN!
$bank_bic = "DUMMYBICXXX"; // Dummy-BIC, ANPASSEN!
?>

<!-- success-page-wrapper umgibt die Inhalte der Success-Seite innerhalb von <main> -->
<div class="success-page-wrapper">
    <div class="success-header">
        <h1>Ihre Bestellung ist unterwegs!</h1>
        <?php if (!$fallback_mode && !empty($success_message)): ?>
            <div class="alert success">
                <?php echo htmlspecialchars($success_message); ?>
            </div>
        <?php elseif ($fallback_mode): ?>
             <div class="alert error fallback-alert">
                <?php echo $error_message_header; // HTML-Tags hier erlaubt ?>
            </div>
        <?php endif; ?>
    </div>

    <div class="success-sections-container">

        <!-- Erster Block: Zahlung & Kontakt / QR-Code -->
        <section class="success-info-card-group">
            <div class="success-info-card payment-info">
                <h2>Zahlung & Abholung</h2>
                <?php if ($fallback_mode): ?>
                    <div class="alert error fallback-details-alert">
                        <p>Detaillierte Zahlungs- und Abholinformationen sind derzeit nicht verfügbar. Bitte prüfen Sie Ihre E-Mails oder kontaktieren Sie uns.</p>
                        <p>Ihre Bestellnummer war eventuell: <strong><?php echo htmlspecialchars($orderId ?? 'N/A'); ?></strong>.</p>
                    </div>
                <?php else: ?>
                    <h3>Zahlung: <?php echo htmlspecialchars(ucfirst(str_replace('_', ' ', $paymentInfo['payment_method']))); ?></h3>
                    <!-- GEÄNDERT: "Gesamtbetrag" P-Tag entfernt -->
                    <?php if ($paymentInfo['payment_method'] === 'bank_transfer'): ?>
                        <div class="payment-details bank-transfer">
                            <p class="details-intro">Bitte überweisen Sie den Betrag von <strong class="highlight-total"><?php echo formatEuroCurrency($orderDetails['total_amount']); ?></strong> unter Angabe des Verwendungszwecks:</p>
                            <ul class="bank-details-list">
                                <li class="detail-item copy-to-clipboard">
                                    <span class="detail-label">Empfänger:</span>
                                    <span class="detail-value"><?php echo htmlspecialchars($bank_account_holder); ?></span>
                                </li>
                                <li class="detail-item copy-to-clipboard">
                                    <span class="detail-label">Verwendungszweck:</span>
                                    <strong class="detail-value reference-number"><?php echo htmlspecialchars($paymentInfo['transaction_id'] ?? 'N/A'); ?></strong>
                                </li>
                                <li class="detail-item copy-to-clipboard">
                                    <span class="detail-label">IBAN:</span>
                                    <strong class="detail-value iban-value"><?php echo htmlspecialchars($bank_iban); ?></strong>
                                </li>
                                <li class="detail-item copy-to-clipboard">
                                    <span class="detail-label">BIC:</span>
                                    <span class="detail-value bic-value"><?php echo htmlspecialchars($bank_bic); ?></span>
                                </li>
                            </ul>
                            <p class="processing-note">Ihre Bestellung Nr. <strong><?php echo htmlspecialchars($orderDetails['order_id'] ?? 'N/A'); ?></strong> wird nach Zahlungseingang bearbeitet. Eine Versandbestätigung erhalten Sie separat.</p>
                        </div>
                    <?php else: // Barzahlung ?>
                        <div class="payment-details cash-on-pickup">
                            <p class="details-intro">Bezahlen Sie bequem <strong class="highlight-total"><?php echo formatEuroCurrency($orderDetails['total_amount']); ?></strong> bei Abholung Ihrer Bestellung Nr. <strong><?php echo htmlspecialchars($orderDetails['order_id'] ?? 'N/A'); ?></strong>.</p>
                        </div>
                    <?php endif; ?>

                    <h3>Abholung</h3>
                    <div class="pickup-details">
                        <p>Bereit zur Abholung am:</p>
                        <p class="pickup-datetime"><strong><?php echo (new DateTime($pickupInfo['pickup_datetime']))->format('d.m.Y H:i') . ' Uhr'; ?></strong></p>
                        <p class="pickup-location">Ort: <strong><?php echo htmlspecialchars($pickupInfo['location']); ?></strong></p>
                        <?php if (!empty($email_status_message)): ?>
                            <div class="alert error" style="margin-top: var(--spacing-md);">
                                <?php echo htmlspecialchars($email_status_message); ?>
                            </div>
                        <?php endif; ?>
                    </div>
                <?php endif; /* Ende des if (!fallback_mode) für Zahlungs- & Abholdetails */ ?>
            </div>

            <div class="success-info-card whatsapp-qr">
                <h2>Kontakt & Updates</h2>
                <p class="whatsapp-intro">Verpassen Sie keine Neuigkeiten! Treten Sie unserer WhatsApp-Gruppe bei für Echtzeit-Updates zu Ihrer Bestellung, neuen Produkten und wichtigen Abholinformationen.</p>
                <div class="qr-code-section"> <!-- GEÄNDERT: Neue Sektion für QR und Button -->
                    <div class="qr-code-container">
                        <!-- Annahme: QR-Code Bild liegt als /_whatsapp-qr.svg im assets-img-Ordner -->
                        <img src="/-whatsapp-qr.svg" alt="WhatsApp Gruppen QR Code" class="qr-code-img" loading="lazy" decoding="async">
                        <a href="https://chat.whatsapp.com/BaBd04yeoGvDkcGZcRNkTI" target="_blank" class="whatsapp-button hero-button">
                            <!-- SVG Icon ist jetzt direkt hier und kein php-generated HTML -->
                            <svg class="whatsapp-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path fill="currentColor" d="M12.04 2C7.34 2 3.58 5.76 3.58 10.46c0 1.54.4 3.01 1.09 4.31L3.02 21.01l6.19-1.63a8.557 8.557 0 005.15 1.63c4.7 0 8.46-3.76 8.46-8.46S16.74 2 12.04 2zM17 15.6c-.19.34-.84.66-1.16.71-.31.05-.69.04-1.04-.08a10.875 10.875 0 01-5.71-3.69c-.31-.4-.69-.93-.69-1.29s.21-.49.33-.62c.1-.11.23-.29.35-.39.11-.11.16-.1.29.08.13.19.82 2 1.34 2.37.52.37.89.43 1.2.14.33-.3.49-.6.64-.81s.49-1.28.66-1.7.35-.74.45-.71.25.1.5.25c.23.14.93.43 1.08.52.14.1.25.16.27.27-.01.1-.09.33-.18.52z"/></svg>
                            WhatsApp Gruppe beitreten
                        </a>
                    </div>
                </div>
            </div>
        </section>

        <!-- Zweiter Block: Bestellzusammenfassung -->
        <section class="success-order-details-card">
            <h2>Ihre Bestellung #<?php echo htmlspecialchars($orderId ?? 'N/A'); ?></h2>
            <a href="mailto:info@früch.de?subject=Frage%20zu%20Bestellung%20%23<?php echo urlencode($orderId ?? 'N/A'); ?>" class="edit-order-link" aria-label="Bestellung ändern oder nachfragen">
                <span class="edit-order-text">Anfrage / Bearbeiten</span>
                <svg class="edit-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M12 20h9"/><path d="M16.5 3.5a2.121 2.121 0 0 1 3 3L7 19l-4 1 1-4L16.5 3.5z"/></svg>
            </a>
            <?php if ($fallback_mode): ?>
                <div class="alert error fallback-details-alert">
                    <p>Details zur Bestellung können nicht angezeigt werden.</p>
                </div>
            <?php elseif (isset($orderDetails) && !empty($orderDetails['items'])): ?>
                <table>
                    <thead>
                        <tr>
                            <th>Produkt</th>
                            <th>Menge</th>
                            <th>Einzelpreis</th>
                            <th>Summe</th>
                        </tr>
                    </thead>
                    <tbody>
                        <?php foreach ($orderDetails['items'] as $item): ?>
                            <tr>
                                <td><?php echo htmlspecialchars($item['name']); ?></td>
                                <td><?php echo htmlspecialchars($item['quantity']); ?></td>
                                <td><?php echo formatEuroCurrency($item['price_at_order']); ?></td>
                                <td><?php echo formatEuroCurrency($item['quantity'] * $item['price_at_order']); ?></td>
                            </tr>
                        <?php endforeach; ?>
                    </tbody>
                    <tfoot>
                        <tr>
                            <td colspan="3"><strong>Gesamtsumme:</strong></td>
                            <td><strong><?php echo formatEuroCurrency($orderDetails['total_amount']); ?></strong></td>
                        </tr>
                    </tfoot>
                </table>
            <?php else: ?>
                <div class="alert error fallback-details-alert">
                    <p>Bestellartikel konnten nicht geladen werden.</p>
                </div>
            <?php endif; ?>
        </section>

        <!-- Dritter Block: Mission / Projektinformationen -->
        <section class="success-mission-card">
            <h2>Ihre Hilfe macht einen Unterschied!</h2>
            <p>Mit Ihrer Bestellung unterstützen Sie direkt unsere Missionsarbeit in Portugal. <strong>100% des Gewinnes</strong> aus dem Verkauf dieser Früchte fließt in Projekte, die Not lindern und Menschen eine Perspektive geben.</p>
            <p>Jeder Bissen dieser sonnengereiften Früchte hilft, Gutes zu tun und positive Veränderungen in der Welt zu bewirken.</p>
            <p>Vielen Dank für Ihre Großzügigkeit und Ihr Vertrauen in unser Projekt.</p>
            <div class="mission-links">
                <a href="/geschichte" class="hero-button">Mehr über unsere Mission</a>
                <a href="/spenden" class="hero-button">Direkt spenden</a>
            </div>
        </section>
    </div>

</div>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        // Skript für "Copy to clipboard"
        const copyToClipboardElements = document.querySelectorAll('.copy-to-clipboard');
        copyToClipboardElements.forEach(element => {
            element.addEventListener('click', function(event) {
                event.preventDefault(); // Verhindert standardmäßiges Linkverhalten, falls es ein Link ist
                const textToCopy = this.querySelector('.detail-value').innerText.trim();
                navigator.clipboard.writeText(textToCopy).then(() => {
                    const originalText = this.querySelector('.detail-value').innerText;
                    this.querySelector('.detail-value').innerText = 'Kopiert!';
                    this.classList.add('copied');
                    setTimeout(() => {
                        this.querySelector('.detail-value').innerText = originalText;
                        this.classList.remove('copied');
                    }, 1500);
                }).catch(err => {
                    console.error('Fehler beim Kopieren: ', err);
                });
            });
        });
    });
</script>

==================================================
DATEINAME: src/modules/admin/categories.php
--------------------------------------------------
<?php
// modules/admin/categories.php
// Wird von modules/admin/index.php geladen.
// $pdo, formatEuroCurrency, $currentSection, $id, $action, $actionStatus, $actionMessage sind bereits verfügbar.

// POST-Aktionen für Kategorien verarbeiten (Hinzufügen, Bearbeiten, Löschen)
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    try {
        if ($action === 'add' && isset($_POST['add_category'])) {
            $stmt = $pdo->prepare("INSERT INTO categories (name, description) VALUES (:name, :description)");
            $stmt->execute([
                ':name' => $_POST['name'],
                ':description' => $_POST['description']
            ]);
            header('Location: ?section=categories&status=success');
            exit();
        } elseif ($action === 'edit' && $id > 0 && isset($_POST['update_category'])) {
            $stmt = $pdo->prepare("UPDATE categories SET name = :name, description = :description, updated_at = CURRENT_TIMESTAMP WHERE category_id = :id");
            $stmt->execute([
                ':name' => $_POST['name'],
                ':description' => $_POST['description'],
                ':id' => $id
            ]);
            header('Location: ?section=categories&status=success');
            exit();
        } elseif ($action === 'delete' && $id > 0 && isset($_POST['delete_category'])) {
            // Überprüfen, ob Produkte dieser Kategorie zugeordnet sind, bevor gelöscht wird
            $stmtCheck = $pdo->prepare("SELECT COUNT(*) FROM products WHERE category_id = :id");
            $stmtCheck->execute([':id' => $id]);
            if ($stmtCheck->fetchColumn() > 0) {
                throw new Exception("Kategorie kann nicht gelöscht werden, da noch Produkte zugeordnet sind.");
            }
             $stmt = $pdo->prepare("DELETE FROM categories WHERE category_id = :id");
             $stmt->execute([':id' => $id]);
             header('Location: ?section=categories&status=success');
             exit();
        }
    } catch (Exception $e) { // Fange auch die selbstgeworfene Exception
        error_log("Admin-Kategorienaktion Fehler: " . $e->getMessage());
        header('Location: ?section=categories&status=error&msg=' . urlencode($e->getMessage()));
        exit();
    } catch (PDOException $e) {
         error_log("Admin-Kategorienaktion Fehler: " . $e->getMessage());
         header('Location: ?section=categories&status=error&msg=' . urlencode('Datenbankfehler: ' . $e->getMessage()));
         exit();
    }
}

// HTML-Ausgabe für Kategorien
if ($action === 'add' || ($action === 'edit' && $id > 0)) {
    $categoryToEdit = null;
    if ($action === 'edit') {
        $stmtEdit = $pdo->prepare("SELECT * FROM categories WHERE category_id = :id");
        $stmtEdit->execute([':id' => $id]);
        $categoryToEdit = $stmtEdit->fetch();
        if (!$categoryToEdit) {
            echo '<p class="alert error">Kategorie nicht gefunden.</p>';
            return;
        }
    }
    ?>
    <div class="admin-form-container">
        <h3><?php echo ($action === 'add' ? 'Neue Kategorie hinzufügen' : 'Kategorie #' . htmlspecialchars($id) . ' bearbeiten'); ?></h3>
        <form method="POST" action="?section=categories&action=<?php echo $action; ?><?php echo ($action === 'edit' ? '&id=' . $id : ''); ?>">
            <div class="form-group">
                <label for="name">Name:</label>
                <input type="text" id="name" name="name" value="<?php echo htmlspecialchars($categoryToEdit['name'] ?? ''); ?>" required>
            </div>
            <div class="form-group">
                <label for="description">Beschreibung:</label>
                <textarea id="description" name="description"><?php echo htmlspecialchars($categoryToEdit['description'] ?? ''); ?></textarea>
            </div>
            <button type="submit" name="<?php echo ($action === 'add' ? 'add_category' : 'update_category'); ?>"><?php echo ($action === 'add' ? 'Kategorie hinzufügen' : 'Kategorie aktualisieren'); ?></button>
        </form>
    </div>
    <?php
} else {
    $stmt = $pdo->query("SELECT * FROM categories ORDER BY name");
    $categories = $stmt->fetchAll();
    ?>
    <div class="action-buttons">
        <a href="?section=categories&action=add" class="add-btn">Neue Kategorie hinzufügen</a>
    </div>
    <table>
        <thead>
            <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Beschreibung</th>
                <th>Aktionen</th>
            </tr>
        </thead>
        <tbody>
            <?php foreach ($categories as $category): ?>
                <tr>
                    <td><?php echo htmlspecialchars($category['category_id']); ?></td>
                    <td><?php echo htmlspecialchars($category['name']); ?></td>
                    <td><?php echo htmlspecialchars(substr($category['description'], 0, 100)); ?><?php echo (strlen($category['description']) > 100 ? '...' : ''); ?></td>
                    <td class="action-buttons">
                        <a href="?section=categories&action=edit&id=<?php echo $category['category_id']; ?>" class="edit-btn">Bearbeiten</a>
                        <form method="POST" action="?section=categories&action=delete&id=<?php echo $category['category_id']; ?>" onsubmit="return confirm('Sicher? Dies löscht die Kategorie nur, wenn keine Produkte mehr zugeordnet sind!');" style="display:inline;">
                            <button type="submit" name="delete_category" class="delete-btn">Löschen</button>
                        </form>
                    </td>
                </tr>
            <?php endforeach; ?>
        </tbody>
    </table>
    <?php
}

==================================================
DATEINAME: src/modules/admin/customers.php
--------------------------------------------------
<?php
// modules/admin/customers.php
// Wird von modules/admin/index.php geladen.
// $pdo, formatEuroCurrency, $currentSection, $id, $action, $actionStatus, $actionMessage sind bereits verfügbar.

// POST-Aktionen für Kunden verarbeiten (Update)
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    try {
        if ($action === 'edit' && $id > 0 && isset($_POST['update_customer'])) {
            $firstName = $_POST['first_name'];
            $lastName = $_POST['last_name'];
            $email = $_POST['email'];
            $phone = $_POST['phone_number'];
            $stmtUpdate = $pdo->prepare("UPDATE users SET first_name = :first_name, last_name = :last_name, email = :email, phone_number = :phone_number, updated_at = CURRENT_TIMESTAMP WHERE user_id = :id");
            $stmtUpdate->execute([
                ':first_name' => $firstName,
                ':last_name' => $lastName,
                ':email' => $email,
                ':phone_number' => $phone,
                ':id' => $id
            ]);
            header('Location: ?section=customers&status=success');
            exit();
        }
    } catch (Exception $e) {
        error_log("Admin-Kundenaktion Fehler: " . $e->getMessage());
        header('Location: ?section=customers&status=error&msg=' . urlencode($e->getMessage()));
        exit();
    }
}

// HTML-Ausgabe für Kunden
if ($action === 'edit' && $id > 0) {
    $stmtEdit = $pdo->prepare("SELECT * FROM users WHERE user_id = :id");
    $stmtEdit->execute([':id' => $id]);
    $customerToEdit = $stmtEdit->fetch();

    if (!$customerToEdit) {
        echo '<p class="alert error">Kunde nicht gefunden.</p>';
        return;
    }
    ?>
    <div class="admin-form-container">
        <h3>Kunde #<?php echo htmlspecialchars($customerToEdit['user_id']); ?> bearbeiten</h3>
        <form method="POST" action="?section=customers&action=edit&id=<?php echo $customerToEdit['user_id']; ?>">
            <div class="form-group">
                <label for="first_name">Vorname:</label>
                <input type="text" id="first_name" name="first_name" value="<?php echo htmlspecialchars($customerToEdit['first_name']); ?>" required>
            </div>
            <div class="form-group">
                <label for="last_name">Nachname:</label>
                <input type="text" id="last_name" name="last_name" value="<?php echo htmlspecialchars($customerToEdit['last_name']); ?>" required>
            </div>
            <div class="form-group">
                <label for="email">E-Mail:</label>
                <input type="email" id="email" name="email" value="<?php echo htmlspecialchars($customerToEdit['email']); ?>" required>
            </div>
            <div class="form-group">
                <label for="phone_number">Telefon:</label>
                <input type="text" id="phone_number" name="phone_number" value="<?php echo htmlspecialchars($customerToEdit['phone_number']); ?>">
            </div>
            <button type="submit" name="update_customer">Kunden aktualisieren</button>
        </form>
    </div>
    <?php
} else {
    $stmt = $pdo->query("SELECT * FROM users ORDER BY created_at DESC");
    $customers = $stmt->fetchAll();
    ?>
    <table>
        <thead>
            <tr>
                <th>ID</th>
                <th>Name</th>
                <th>E-Mail</th>
                <th>Telefon</th>
                <th>Registriert am</th>
                <th>Aktionen</th>
            </tr>
        </thead>
        <tbody>
            <?php foreach ($customers as $customer): ?>
                <tr>
                    <td><?php echo htmlspecialchars($customer['user_id']); ?></td>
                    <td><?php echo htmlspecialchars($customer['first_name'] . ' ' . $customer['last_name']); ?></td>
                    <td><?php echo htmlspecialchars($customer['email']); ?></td>
                    <td><?php echo htmlspecialchars($customer['phone_number'] ?: 'N/A'); ?></td>
                    <td><?php echo (new DateTime($customer['created_at']))->format('d.m.Y H:i'); ?></td>
                    <td class="action-buttons">
                        <a href="?section=customers&action=edit&id=<?php echo $customer['user_id']; ?>" class="edit-btn">Bearbeiten</a>
                    </td>
                </tr>
            <?php endforeach; ?>
        </tbody>
    </table>
    <?php
}

==================================================
DATEINAME: src/modules/admin/dashboard.php
--------------------------------------------------
<?php
// modules/admin/dashboard.php
// Wird von modules/admin/index.php geladen, daher sind $pdo, formatEuroCurrency etc. bereits verfügbar

// Dashboard-Statistiken abrufen
$totalOrders = $pdo->query("SELECT COUNT(*) FROM orders")->fetchColumn();
$pendingOrders = $pdo->query("SELECT COUNT(*) FROM orders WHERE status = 'pending'")->fetchColumn();
$totalCustomers = $pdo->query("SELECT COUNT(*) FROM users")->fetchColumn();
$totalProducts = $pdo->query("SELECT COUNT(*) FROM products")->fetchColumn();

// Umsatzstatistiken
$totalExpectedIncome = $pdo->query("SELECT SUM(total_amount) FROM orders")->fetchColumn();
// Summe aller abgeschlossenen Zahlungen
$totalReceivedIncome = $pdo->query("SELECT SUM(amount) FROM payments WHERE status = 'completed'")->fetchColumn();
$totalOutstanding = $totalExpectedIncome - $totalReceivedIncome;

?>
<div class="dashboard-stats">
    <div class="stat-card">
        <h3>Gesamtbestellungen</h3>
        <p><?php echo $totalOrders; ?></p>
    </div>
    <div class="stat-card">
        <h3>Offene Bestellungen</h3>
        <p><?php echo $pendingOrders; ?></p>
    </div>
    <div class="stat-card">
        <h3>Registrierte Kunden</h3>
        <p><?php echo $totalCustomers; ?></p>
    </div>
    <div class="stat-card">
        <h3>Verfügbare Produkte</h3>
        <p><?php echo $totalProducts; ?></p>
    </div>
</div>

<h3>Finanzübersicht</h3>
<div class="dashboard-stats">
    <div class="stat-card">
        <h3>Erwarteter Umsatz</h3>
        <p><?php echo formatEuroCurrency($totalExpectedIncome); ?></p>
    </div>
    <div class="stat-card">
        <h3>Eingegangener Umsatz</h3>
        <p><?php echo formatEuroCurrency($totalReceivedIncome); ?></p>
    </div>
    <div class="stat-card <?php echo ($totalOutstanding > 0 ? 'income-negative' : 'income-positive'); ?>">
        <h3>Offener Betrag</h3>
        <p><?php echo formatEuroCurrency($totalOutstanding); ?></p>
    </div>
</div>

<h3>Umsatzentwicklung (Platzhalter für Grafik)</h3>
<div class="chart-container">
    <canvas id="incomeChart" style="display: none;"></canvas>
    <p id="chartFallback">Lade Grafik...</p>
    <pre style="display: none;" id="chartData">
        <?php
        // Beispiel-Daten für eine Grafik (würden normalerweise komplexer abgefragt)
        $monthlySales = $pdo->query("
            SELECT
                DATE_FORMAT(order_date, '%Y-%m') as month,
                SUM(total_amount) as total_ordered
            FROM orders
            GROUP BY month
            ORDER BY month ASC
            LIMIT 12 -- Letzte 12 Monate
        ")->fetchAll();

        $monthlyPayments = $pdo->query("
            SELECT
                DATE_FORMAT(payment_date, '%Y-%m') as month,
                SUM(amount) as total_paid
            FROM payments
            WHERE status = 'completed'
            GROUP BY month
            ORDER BY month ASC
            LIMIT 12
        ")->fetchAll();

        $chartLabels = [];
        $chartOrderedData = [];
        $chartPaidData = [];

        // Monate der letzten 12 Monate generieren
        $period = new DatePeriod(
            new DateTime('-11 months first day of this month'),
            new DateInterval('P1M'),
            new DateTime('first day of next month')
        );

        $allMonths = [];
        foreach ($period as $dt) {
            $allMonths[$dt->format('Y-m')] = 0;
        }

        // Daten zusammenführen
        $mergedSales = $allMonths;
        foreach ($monthlySales as $sale) {
            $mergedSales[$sale['month']] = (float)$sale['total_ordered'];
        }
        $mergedPayments = $allMonths;
        foreach ($monthlyPayments as $payment) {
            $mergedPayments[$payment['month']] = (float)$payment['total_paid'];
        }

        foreach ($mergedSales as $month => $total) {
            $chartLabels[] = (new DateTime($month . '-01'))->format('M Y');
            $chartOrderedData[] = $total;
            $chartPaidData[] = $mergedPayments[$month] ?? 0; // Sicherstellen, dass ein Wert existiert
        }

        echo json_encode([
            'labels' => $chartLabels,
            'ordered' => $chartOrderedData,
            'paid' => $chartPaidData
        ]);
        ?>
    </pre>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const chartDataElement = document.getElementById('chartData');
            const chartFallback = document.getElementById('chartFallback');
            const canvas = document.getElementById('incomeChart');

            if (chartDataElement && canvas) {
                try {
                    const chartConfig = JSON.parse(chartDataElement.textContent);

                    if (chartConfig.labels && chartConfig.labels.length > 0) {
                        chartFallback.style.display = 'none';
                        canvas.style.display = 'block';

                        const ctx = canvas.getContext('2d');
                        new Chart(ctx, {
                            type: 'bar',
                            data: {
                                labels: chartConfig.labels,
                                datasets: [
                                    {
                                        label: 'Erwarteter Umsatz',
                                        data: chartConfig.ordered,
                                        backgroundColor: 'rgba(52, 104, 192, 0.7)', // var(--color-primary)
                                        borderColor: 'rgba(52, 104, 192, 1)',
                                        borderWidth: 1
                                    },
                                    {
                                        label: 'Eingegangener Umsatz',
                                        data: chartConfig.paid,
                                        backgroundColor: 'rgba(0, 191, 99, 0.7)', // var(--color-secondary)
                                        borderColor: 'rgba(0, 191, 99, 1)',
                                        borderWidth: 1
                                    }
                                ]
                            },
                            options: {
                                responsive: true,
                                maintainAspectRatio: false,
                                scales: {
                                    y: {
                                        beginAtZero: true,
                                        title: {
                                            display: true,
                                            text: 'Betrag (€)'
                                        }
                                    },
                                    x: {
                                        title: {
                                            display: true,
                                            text: 'Monat'
                                        }
                                    }
                                }
                            }
                        });
                    } else {
                        chartFallback.textContent = 'Keine Umsatzdaten für die Darstellung verfügbar.';
                    }
                } catch (e) {
                    console.error("Fehler beim Parsen der Chart-Daten oder Initialisieren von Chart.js:", e);
                    chartFallback.textContent = 'Fehler beim Laden der Grafikdaten.';
                }
            } else {
                chartFallback.textContent = 'Chart-Container oder Daten nicht gefunden.';
            }
        });
    </script>
</div>

==================================================
DATEINAME: src/modules/admin/email_logs.php
--------------------------------------------------
<?php
// modules/admin/email_logs.php
// Wird von modules/admin/index.php geladen.
// $pdo, formatEuroCurrency, $currentSection, $id, $action, $actionStatus, $actionMessage sind bereits verfügbar.

// HTML-Ausgabe für E-Mail-Logs
$stmt = $pdo->query("SELECT * FROM email_logs ORDER BY sent_at DESC");
$emailLogs = $stmt->fetchAll();
?>
<table>
    <thead>
        <tr>
            <th>ID</th>
            <th>An E-Mail</th>
            <th>Betreff</th>
            <th>Status</th>
            <th>Versendet am</th>
            <th>Fehlermeldung</th>
            <th>Bestell-ID</th>
        </tr>
    </thead>
    <tbody>
        <?php foreach ($emailLogs as $log): ?>
            <tr>
                <td><?php echo htmlspecialchars($log['log_id']); ?></td>
                <td><?php echo htmlspecialchars($log['to_email']); ?></td>
                <td><?php echo htmlspecialchars($log['subject']); ?></td>
                <td><?php echo htmlspecialchars(ucfirst($log['status'])); ?></td>
                <td><?php echo (new DateTime($log['sent_at']))->format('d.m.Y H:i'); ?></td>
                <td><?php echo htmlspecialchars($log['error_message'] ?: 'N/A'); ?></td>
                <td><?php echo ($log['order_id'] ? '<a href="?section=orders&action=edit&id=' . htmlspecialchars($log['order_id']) . '">' . htmlspecialchars($log['order_id']) . '</a>' : 'N/A'); ?></td>
            </tr>
        <?php endforeach; ?>
    </tbody>
</table>

==================================================
DATEINAME: src/modules/admin/index.php
--------------------------------------------------
<?php
// modules/admin/index.php
// Dies ist der Admin-Router

// Da index.php bereits session_start() aufgerufen hat, ist es hier nicht nötig,
// aber wir überprüfen vorsichtshalber.
if (session_status() == PHP_SESSION_NONE) {
    session_start();
}

// Benötigte Konfiguration und Funktionen laden (ROOT_PATH kommt von der Haupt-index.php)
require_once ROOT_PATH . 'config/sensitive_config.php';
require_once ROOT_PATH . 'include/db.php';
require_once ROOT_PATH . 'include/email.php'; // Für mögliche E-Mail-Funktionen im Admin
require_once ROOT_PATH . 'include/helpers.php'; // Für formatEuroCurrency

global $pdo; // Sicherstellen, dass $pdo verfügbar ist
if (!isset($pdo)) {
    $pdo = getDbConnection();
}

// --- GLOBALE VARIABLEN FÜR ADMIN-KONTEXT ---
$isAdminLoggedIn = (isset($_SESSION['admin_logged_in']) && $_SESSION['admin_logged_in'] === true);
$loginError = '';
$currentSection = $_GET['section'] ?? 'dashboard';
$actionStatus = $_GET['status'] ?? ''; // Für Erfolgs-/Fehlermeldungen nach Aktionen
$actionMessage = $_GET['msg'] ?? ''; // Zusätzliche Nachricht bei Fehlern
$id = (int)($_GET['id'] ?? 0); // Allgemeine ID für Aktionen
$action = $_GET['action'] ?? '';


// --- VORVERARBEITUNG VON POST- UND GET-ANFRAGEN (VOR JEDER HTML-AUSGABE) ---

// 1. Logout-Logik (GET-Anfrage)
if ($action === 'logout') {
    session_destroy();
    header('Location: /admin'); // Redirect zur Login-Seite
    exit();
}

// 2. Login-Logik (POST-Anfrage)
if (isset($_POST['admin_password']) && !$isAdminLoggedIn) {
    if ($_POST['admin_password'] === ADMIN_PASSWORD) {
        $_SESSION['admin_logged_in'] = true;
        header('Location: /admin'); // Redirect nach erfolgreichem Login, um POST-Daten zu vermeiden
        exit();
    } else {
        $loginError = 'Falsches Passwort.';
    }
}

// Wenn nicht eingeloggt, zeige Login-Formular und beende
if (!$isAdminLoggedIn) {
    ?>
    <!DOCTYPE html>
    <html lang="de">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Admin Login</title>
        <link rel="stylesheet" href="/.main.css"> <!-- Lade dein Haupt-CSS -->
        <style>
            /* Spezifische Login-Stile, falls sie nicht im Haupt-CSS sind */
            body { font-family: 'Inter', Arial, sans-serif; background-color: #f0f2f5; display: flex; justify-content: center; align-items: center; min-height: 100vh; margin: 0; }
            .login-container { background-color: #fff; padding: 30px; border-radius: 8px; box-shadow: 0 4px 10px rgba(0,0,0,0.1); text-align: center; width: 350px; }
            .login-container h2 { margin-bottom: 25px; color: #333; }
            .login-container input[type="password"] { width: calc(100% - 24px); padding: 12px; margin-bottom: 20px; border: 1px solid #ddd; border-radius: 6px; font-size: 1em; }
            .login-container button { background-color: #4285f4; color: white; padding: 12px 25px; border: none; border-radius: 6px; cursor: pointer; font-size: 1em; transition: background-color 0.2s ease; }
            .login-container button:hover { background-color: #357ae8; }
            .login-container .error { color: #e44d26; margin-bottom: 15px; }
        </style>
    </head>
    <body>
        <div class="login-container">
            <h2>Admin Login</h2>
            <?php if ($loginError): ?>
                <p class="error"><?php echo htmlspecialchars($loginError); ?></p>
            <?php endif; ?>
            <form method="POST">
                <input type="password" name="admin_password" placeholder="Passwort" required>
                <button type="submit">Login</button>
            </form>
        </div>
    </body>
    </html>
    <?php
    exit(); // Beende Skript, wenn nicht eingeloggt
}

// --- Wenn eingeloggt, lade den Admin-Header und die spezifische Sektion ---
// Admin Header (sidebar und oberer Teil des Contents)
require_once ROOT_PATH . 'templates/header.php'; // Normaler Header des Shops

// Admin-Layout-Wrapper öffnen
echo '<div class="admin-container">';
echo '<div class="admin-sidebar">';
echo '<h2>Admin Panel</h2>';
echo '<ul>';
// Links für die Navigation
$adminNavItems = [
    'dashboard' => 'Dashboard',
    'orders' => 'Bestellungen',
    'customers' => 'Kunden',
    'payments' => 'Zahlungen',
    'products' => 'Produkte',
    'categories' => 'Kategorien',
    'pickup_dates' => 'Abholtermine',
    'email_logs' => 'E-Mail Logs',
];
foreach ($adminNavItems as $key => $label) {
    $activeClass = ($currentSection == $key) ? 'active' : '';
    echo '<li><a href="?section=' . htmlspecialchars($key) . '" class="' . $activeClass . '">' . htmlspecialchars($label) . '</a></li>';
}
echo '<li><a href="?action=logout">Logout</a></li>';
echo '</ul>';
echo '</div>'; // .admin-sidebar schließen

echo '<div class="admin-content">';
echo '<h1>' . ucfirst(str_replace('_', ' ', $currentSection)) . ' Verwaltung</h1>';

// Erfolgs-/Fehlermeldungen anzeigen
if ($actionStatus === 'success'): ?>
    <div class="alert success"><?php echo htmlspecialchars($actionMessage ?: 'Aktion erfolgreich ausgeführt.'); ?></div>
<?php elseif ($actionStatus === 'error'): ?>
    <div class="alert error"><?php echo htmlspecialchars($actionMessage ?: 'Fehler bei der Aktion.'); ?></div>
<?php endif;

// Lade die spezifische Admin-Sektion
$adminSectionPath = ROOT_PATH . 'modules/admin/' . $currentSection . '.php';

if (file_exists($adminSectionPath)) {
    require_once $adminSectionPath;
} else {
    echo '<p class="alert error">Admin-Sektion nicht gefunden.</p>';
}

echo '</div>'; // .admin-content schließen
echo '</div>'; // .admin-container schließen

// Footer laden
require_once ROOT_PATH . 'templates/footer.php';
?>

==================================================
DATEINAME: src/modules/admin/orders.php
--------------------------------------------------
<?php
// modules/admin/orders.php
// Wird von modules/admin/index.php geladen.
// $pdo, formatEuroCurrency, $currentSection, $id, $action, $actionStatus, $actionMessage sind bereits verfügbar.

// POST-Aktionen für Bestellungen verarbeiten (Status-Update)
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    try {
        if ($action === 'edit' && $id > 0 && isset($_POST['update_order'])) {
            $newStatus = $_POST['status'];

            // Alten Status abrufen
            $stmtOldStatus = $pdo->prepare("SELECT o.status, u.email, u.first_name, u.last_name FROM orders o JOIN users u ON o.user_id = u.user_id WHERE o.order_id = :id");
            $stmtOldStatus->execute([':id' => $id]);
            $oldOrderInfo = $stmtOldStatus->fetch();

            if ($oldOrderInfo && $oldOrderInfo['status'] !== $newStatus) { // Nur senden, wenn Status sich wirklich ändert
                $stmtUpdate = $pdo->prepare("UPDATE orders SET status = :status WHERE order_id = :id");
                $stmtUpdate->execute([':status' => $newStatus, ':id' => $id]);

                // E-Mail an den Kunden senden
                $customerEmail = $oldOrderInfo['email'];
                $customerName = $oldOrderInfo['first_name'] . ' ' . $oldOrderInfo['last_name'];
                $emailSubject = "Status Ihrer Bestellung #{$id} bei " . MAIL_FROM_NAME . " aktualisiert";
                $emailBody = "
                    <p>Hallo {$customerName},</p>
                    <p>der Status Ihrer Bestellung mit der Nummer <strong>#{$id}</strong> wurde aktualisiert.</p>
                    <p>Alter Status: <strong>" . htmlspecialchars(ucfirst($oldOrderInfo['status'])) . "</strong></p>
                    <p>Neuer Status: <strong>" . htmlspecialchars(ucfirst($newStatus)) . "</strong></p>
                    <p>Sie können den aktuellen Status Ihrer Bestellungen jederzeit in Ihrem Kundenkonto einsehen.</p>
                    <p>Vielen Dank für Ihr Vertrauen!</p>
                    <p>Mit freundlichen Grüssen,<br>Ihr Team von " . MAIL_FROM_NAME . "</p>";

                sendAppEmail($customerEmail, $emailSubject, $emailBody, $id);
                header('Location: ?section=orders&status=success&msg=' . urlencode('Bestellstatus erfolgreich aktualisiert. Eine E-Mail wurde an den Kunden gesendet.'));
            } else {
                header('Location: ?section=orders&status=success&msg=' . urlencode('Bestellstatus war bereits aktuell. Keine Änderung vorgenommen.'));
            }
            exit();
        }
    } catch (Exception $e) {
        error_log("Admin-Bestellaktion Fehler: " . $e->getMessage());
        header('Location: ?section=orders&status=error&msg=' . urlencode($e->getMessage()));
        exit();
    }
}

// HTML-Ausgabe für Bestellungen
if ($action === 'edit' && $id > 0) {
    $stmtEdit = $pdo->prepare("SELECT o.*, u.first_name, u.last_name, u.email, u.phone_number, pd.pickup_datetime, pd.location FROM orders o JOIN users u ON o.user_id = u.user_id LEFT JOIN pickup_dates pd ON o.pickup_date_id = pd.pickup_date_id WHERE o.order_id = :id");
    $stmtEdit->execute([':id' => $id]);
    $orderToEdit = $stmtEdit->fetch();

    if (!$orderToEdit) {
         echo '<p class="alert error">Bestellung nicht gefunden.</p>';
         return;
    }

    // Bestelldetails abrufen
    $stmtItems = $pdo->prepare("SELECT oi.*, p.name as product_name FROM order_items oi JOIN products p ON oi.product_id = p.product_id WHERE oi.order_id = :order_id");
    $stmtItems->execute([':order_id' => $id]);
    $orderItems = $stmtItems->fetchAll();

    // Zahlungen für diese Bestellung abrufen
    $stmtPayments = $pdo->prepare("SELECT * FROM payments WHERE order_id = :order_id ORDER BY payment_date ASC");
    $stmtPayments->execute([':order_id' => $id]);
    $orderPayments = $stmtPayments->fetchAll();

    $totalPaid = 0;
    foreach($orderPayments as $payment) {
        if ($payment['status'] === 'completed') { // Nur abgeschlossene Zahlungen zählen
            $totalPaid += $payment['amount'];
        }
    }
    $outstandingAmount = $orderToEdit['total_amount'] - $totalPaid;

    ?>
    <div class="admin-form-container">
        <h3>Bestellung #<?php echo htmlspecialchars($orderToEdit['order_id']); ?> Details</h3>
        <p><strong>Kunde:</strong> <?php echo htmlspecialchars($orderToEdit['first_name'] . ' ' . $orderToEdit['last_name']); ?> (<?php echo htmlspecialchars($orderToEdit['email']); ?>)</p>
        <p><strong>Gesamtbestellwert:</strong> <?php echo formatEuroCurrency($orderToEdit['total_amount']); ?></p>
        <p><strong>Gesamt bezahlt:</strong> <?php echo formatEuroCurrency($totalPaid); ?></p>
        <p><strong>Offener Betrag:</strong> <span style="color: <?php echo ($outstandingAmount > 0 ? '#dc3545' : '#28a745'); ?>; font-weight: bold;"><?php echo formatEuroCurrency($outstandingAmount); ?></span></p>
        <p><strong>Zahlungsmethode:</strong> <?php echo htmlspecialchars(ucfirst(str_replace('_', ' ', $orderToEdit['payment_method']))); ?></p>
        <p><strong>Abholung:</strong> <?php echo ($orderToEdit['pickup_datetime'] ? (new DateTime($orderToEdit['pickup_datetime']))->format('d.m.Y H:i') . ' Uhr - ' . htmlspecialchars($orderToEdit['location']) : 'N/A'); ?></p>

        <h4>Bestellte Artikel:</h4>
        <table>
            <thead>
                <tr>
                    <th>Produkt</th>
                    <th>Menge</th>
                    <th>Einzelpreis bei Bestellung</th>
                    <th>Summe</th>
                </tr>
            </thead>
            <tbody>
                <?php foreach ($orderItems as $item): ?>
                    <tr>
                        <td><?php echo htmlspecialchars($item['product_name']); ?></td>
                        <td><?php echo htmlspecialchars($item['quantity']); ?></td>
                        <td><?php echo formatEuroCurrency($item['price_at_order']); ?></td>
                        <td><?php echo formatEuroCurrency($item['quantity'] * $item['price_at_order']); ?></td>
                    </tr>
                <?php endforeach; ?>
            </tbody>
        </table>

        <h4>Zahlungen für diese Bestellung:</h4>
        <?php if (empty($orderPayments)): ?>
            <p>Keine Zahlungen für diese Bestellung erfasst.</p>
        <?php else: ?>
            <table>
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Betrag</th>
                        <th>Datum</th>
                        <th>Methode</th>
                        <th>Transaktions ID</th>
                        <th>Status</th>
                        <th>Aktionen</th>
                    </tr>
                </thead>
                <tbody>
                    <?php foreach ($orderPayments as $payment): ?>
                        <tr>
                            <td><?php echo htmlspecialchars($payment['payment_id']); ?></td>
                            <td><?php echo formatEuroCurrency($payment['amount']); ?></td>
                            <td><?php echo (new DateTime($payment['payment_date']))->format('d.m.Y H:i'); ?></td>
                            <td><?php echo htmlspecialchars(ucfirst(str_replace('_', ' ', $payment['payment_method']))); ?></td>
                            <td><?php echo htmlspecialchars($payment['transaction_id'] ?: 'N/A'); ?></td>
                            <td><?php echo htmlspecialchars(ucfirst($payment['status'])); ?></td>
                            <td class="action-buttons">
                                <a href="?section=payments&action=edit&id=<?php echo $payment['payment_id']; ?>" class="edit-btn">Bearbeiten</a>
                                <form method="POST" action="?section=payments&action=delete&id=<?php echo $payment['payment_id']; ?>&return_to_order_id=<?php echo $orderToEdit['order_id']; ?>" onsubmit="return confirm('Sicher? Diese Zahlung löschen?');" style="display:inline;">
                                    <button type="submit" name="delete_payment" class="delete-btn">Löschen</button>
                                </form>
                            </td>
                        </tr>
                    <?php endforeach; ?>
                </tbody>
            </table>
        <?php endif; ?>
        <div class="action-buttons" style="margin-top: 15px;">
            <a href="?section=payments&action=add&order_id=<?php echo $orderToEdit['order_id']; ?>" class="add-btn">Neue Zahlung hinzufügen</a>
        </div>


        <h4 style="margin-top: 30px;">Bestellstatus ändern:</h4>
        <form method="POST" action="?section=orders&action=edit&id=<?php echo $orderToEdit['order_id']; ?>">
            <div class="form-group">
                <label for="order_status">Status:</label>
                <select id="order_status" name="status" required>
                    <option value="pending" <?php echo ($orderToEdit['status'] == 'pending' ? 'selected' : ''); ?>>Ausstehend</option>
                    <option value="confirmed" <?php echo ($orderToEdit['status'] == 'confirmed' ? 'selected' : ''); ?>>Bestätigt</option>
                    <option value="completed" <?php echo ($orderToEdit['status'] == 'completed' ? 'selected' : ''); ?>>Abgeschlossen</option>
                    <option value="cancelled" <?php echo ($orderToEdit['status'] == 'cancelled' ? 'selected' : ''); ?>>Storniert</option>
                </select>
            </div>
            <button type="submit" name="update_order">Status aktualisieren</button>
        </form>
    </div>
    <?php
} else {
    $stmt = $pdo->query("SELECT o.*, u.first_name, u.last_name, pd.pickup_datetime, pd.location FROM orders o JOIN users u ON o.user_id = u.user_id LEFT JOIN pickup_dates pd ON o.pickup_date_id = pd.pickup_date_id ORDER BY o.order_date DESC");
    $orders = $stmt->fetchAll();
    ?>
    <table>
        <thead>
            <tr>
                <th>ID</th>
                <th>Kunde</th>
                <th>Datum</th>
                <th>Betrag</th>
                <th>Status</th>
                <th>Zahlung</th>
                <th>Aktionen</th>
            </tr>
        </thead>
        <tbody>
            <?php foreach ($orders as $order): ?>
                <tr>
                    <td><?php echo htmlspecialchars($order['order_id']); ?></td>
                    <td><?php echo htmlspecialchars($order['first_name'] . ' ' . $order['last_name']); ?></td>
                    <td><?php echo (new DateTime($order['order_date']))->format('d.m.Y H:i'); ?></td>
                    <td><?php echo formatEuroCurrency($order['total_amount']); ?></td>
                    <td><?php echo htmlspecialchars(ucfirst($order['status'])); ?></td>
                    <td><?php echo htmlspecialchars(ucfirst(str_replace('_', ' ', $order['payment_method']))); ?></td>
                    <td class="action-buttons">
                        <a href="?section=orders&action=edit&id=<?php echo $order['order_id']; ?>" class="edit-btn">Details/Bearbeiten</a>
                    </td>
                </tr>
            <?php endforeach; ?>
        </tbody>
    </table>
    <?php
}

==================================================
DATEINAME: src/modules/admin/payments.php
--------------------------------------------------
<?php
// modules/admin/payments.php
// Wird von modules/admin/index.php geladen.
// $pdo, formatEuroCurrency, $currentSection, $id, $action, $actionStatus, $actionMessage sind bereits verfügbar.

// POST-Aktionen für Zahlungen verarbeiten (Hinzufügen, Bearbeiten, Löschen)
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    try {
        if ($action === 'add' && isset($_POST['add_payment'])) {
            $order_id = (int)$_POST['order_id'];
            $payment_date = $_POST['payment_date'];
            $amount = (float)$_POST['amount'];
            $payment_method = $_POST['payment_method'];
            $transaction_id = $_POST['transaction_id'] ?: null;
            $status = $_POST['status'];
            $notes = $_POST['notes'] ?: null;

            // Überprüfen, ob die Bestell-ID existiert
            $stmtOrderCheck = $pdo->prepare("SELECT COUNT(*) FROM orders WHERE order_id = :order_id");
            $stmtOrderCheck->execute([':order_id' => $order_id]);
            if ($stmtOrderCheck->fetchColumn() == 0) {
                throw new Exception("Bestell-ID existiert nicht.");
            }

            $stmt = $pdo->prepare("INSERT INTO payments (order_id, payment_date, amount, payment_method, transaction_id, status, notes) VALUES (:order_id, :payment_date, :amount, :payment_method, :transaction_id, :status, :notes)");
            $stmt->execute([
                ':order_id' => $order_id,
                ':payment_date' => $payment_date,
                ':amount' => $amount,
                ':payment_method' => $payment_method,
                ':transaction_id' => $transaction_id,
                ':status' => $status,
                ':notes' => $notes
            ]);

            // E-Mail an den Kunden senden, wenn Zahlung abgeschlossen
            if ($status === 'completed') {
                $stmtOrderUser = $pdo->prepare("SELECT u.email, u.first_name, u.last_name, o.total_amount FROM orders o JOIN users u ON o.user_id = u.user_id WHERE o.order_id = :order_id");
                $stmtOrderUser->execute([':order_id' => $order_id]);
                $orderUserInfo = $stmtOrderUser->fetch();

                if ($orderUserInfo) {
                    $customerEmail = $orderUserInfo['email'];
                    $customerName = $orderUserInfo['first_name'] . ' ' . $orderUserInfo['last_name'];
                    $emailSubject = "Zahlung für Bestellung #{$order_id} bei " . MAIL_FROM_NAME . " eingegangen";
                    $emailBody = "
                        <p>Hallo {$customerName},</p>
                        <p>wir freuen uns, Ihnen mitteilen zu können, dass Ihre Zahlung von <strong>" . formatEuroCurrency($amount) . "</strong> für die Bestellung <strong>#{$order_id}</strong> erfolgreich bearbeitet und als 'Abgeschlossen' markiert wurde.</p>
                        <p>Gesamtbetrag der Bestellung: <strong>" . formatEuroCurrency($orderUserInfo['total_amount']) . "</strong></p>
                        <p>Wir bedanken uns für Ihre Bestellung!</p>
                        <p>Mit freundlichen Grüssen,<br>Ihr Team von " . MAIL_FROM_NAME . "</p>";

                    sendAppEmail($customerEmail, $emailSubject, $emailBody, $order_id);
                }
            }

            // Redirect zurück zur Zahlungsliste oder zur Bestelldetailseite, wenn von dort gekommen
            if (isset($_POST['return_to_order_id']) && (int)$_POST['return_to_order_id'] === $order_id) {
                 header('Location: ?section=orders&action=edit&id=' . $order_id . '&status=success&msg=' . urlencode('Zahlung erfolgreich hinzugefügt.'));
            } else {
                header('Location: ?section=payments&status=success');
            }
            exit();
        } elseif ($action === 'edit' && $id > 0 && isset($_POST['update_payment'])) {
            // Alten Zahlungsstatus abrufen und User-Info holen
            $stmtOldPayment = $pdo->prepare("SELECT p.status, p.order_id, u.email, u.first_name, u.last_name, o.total_amount FROM payments p JOIN orders o ON p.order_id = o.order_id JOIN users u ON o.user_id = u.user_id WHERE p.payment_id = :id");
            $stmtOldPayment->execute([':id' => $id]);
            $oldPaymentInfo = $stmtOldPayment->fetch();

            $payment_date = $_POST['payment_date'];
            $amount = (float)$_POST['amount'];
            $payment_method = $_POST['payment_method'];
            $transaction_id = $_POST['transaction_id'] ?: null;
            $status = $_POST['status'];
            $notes = $_POST['notes'] ?: null;

            $stmtUpdate = $pdo->prepare("UPDATE payments SET payment_date = :payment_date, amount = :amount, payment_method = :payment_method, transaction_id = :transaction_id, status = :status, notes = :notes WHERE payment_id = :id");
            $stmtUpdate->execute([
                ':payment_date' => $payment_date,
                ':amount' => $amount,
                ':payment_method' => $payment_method,
                ':transaction_id' => $transaction_id,
                ':status' => $status,
                ':notes' => $notes,
                ':id' => $id
            ]);

            // E-Mail an den Kunden senden, wenn der Status sich geändert hat (besonders wichtig bei 'completed')
            if ($oldPaymentInfo && $oldPaymentInfo['status'] !== $status) {
                $customerEmail = $oldPaymentInfo['email'];
                $customerName = $oldPaymentInfo['first_name'] . ' ' . $oldPaymentInfo['last_name'];
                $orderId = $oldPaymentInfo['order_id'];
                $emailSubject = "Status Ihrer Zahlung #{$id} für Bestellung #{$orderId} bei " . MAIL_FROM_NAME . " aktualisiert";
                $emailBody = "
                    <p>Hallo {$customerName},</p>
                    <p>der Status Ihrer Zahlung mit der ID <strong>#{$id}</strong> für die Bestellung <strong>#{$orderId}</strong> wurde aktualisiert.</p>
                    <p>Alter Status: <strong>" . htmlspecialchars(ucfirst($oldPaymentInfo['status'])) . "</strong></p>
                    <p>Neuer Status: <strong>" . htmlspecialchars(ucfirst($status)) . "</strong></p>
                    <p>Betrag der Zahlung: <strong>" . formatEuroCurrency($amount) . "</strong></p>
                    <p>Bei Rückfragen stehen wir Ihnen gerne zur Verfügung.</p>
                    <p>Mit freundlichen Grüssen,<br>Ihr Team von " . MAIL_FROM_NAME . "</p>";

                sendAppEmail($customerEmail, $emailSubject, $emailBody, $orderId);
            }

            header('Location: ?section=payments&status=success');
            exit();
        } elseif ($action === 'delete' && $id > 0 && isset($_POST['delete_payment'])) {
             $stmt = $pdo->prepare("DELETE FROM payments WHERE payment_id = :id");
             $stmt->execute([':id' => $id]);
             // Optional: E-Mail senden, dass Zahlung storniert/gelöscht wurde.
             header('Location: ?section=payments&status=success');
             exit();
        }
    } catch (Exception $e) {
        error_log("Admin-Zahlungsaktion Fehler: " . $e->getMessage());
        header('Location: ?section=' . $currentSection . '&status=error&msg=' . urlencode($e->getMessage()));
        exit();
    }
}

// HTML-Ausgabe für Zahlungen
$orderIdFromGet = (int)($_GET['order_id'] ?? 0); // Optional, wenn von Bestellseite verlinkt

if ($action === 'add' || ($action === 'edit' && $id > 0)) {
    $paymentToEdit = null;
    if ($action === 'edit') {
        $stmtEdit = $pdo->prepare("SELECT * FROM payments WHERE payment_id = :id");
        $stmtEdit->execute([':id' => $id]);
        $paymentToEdit = $stmtEdit->fetch();
        if (!$paymentToEdit) {
            echo '<p class="alert error">Zahlung nicht gefunden.</p>';
            return;
        }
    }

    // Hole Bestelldetails, falls eine order_id vorhanden ist (für Anzeige)
    $orderInfo = null;
    $targetOrderId = $orderIdFromGet ?: ($paymentToEdit['order_id'] ?? 0);
    if ($targetOrderId > 0) {
        $stmtOrder = $pdo->prepare("SELECT o.order_id, o.total_amount, u.first_name, u.last_name FROM orders o JOIN users u ON o.user_id = u.user_id WHERE o.order_id = :order_id");
        $stmtOrder->execute([':order_id' => $targetOrderId]);
        $orderInfo = $stmtOrder->fetch();
    }

    ?>
    <div class="admin-form-container">
        <h3><?php echo ($action === 'add' ? 'Neue Zahlung hinzufügen' : 'Zahlung #' . htmlspecialchars($id) . ' bearbeiten'); ?></h3>
        <?php if ($orderInfo): ?>
            <p><strong>Bestellung:</strong> #<?php echo htmlspecialchars($orderInfo['order_id']); ?> (Kunde: <?php echo htmlspecialchars($orderInfo['first_name'] . ' ' . $orderInfo['last_name']); ?>, Gesamt: <?php echo formatEuroCurrency($orderInfo['total_amount']); ?>)</p>
        <?php elseif ($action === 'add'): ?>
            <div class="form-group">
                <label for="order_id">Bestell-ID:</label>
                <input type="number" id="order_id" name="order_id" value="<?php echo htmlspecialchars($orderIdFromGet); ?>" required min="1">
            </div>
        <?php endif; ?>

        <form method="POST" action="?section=payments&action=<?php echo $action; ?><?php echo ($action === 'edit' ? '&id=' . $id : ''); ?>">
            <?php if ($orderInfo): // Wenn von Bestellung aus hinzugefügt wird, die Order-ID übergeben ?>
                <input type="hidden" name="order_id" value="<?php echo htmlspecialchars($orderInfo['order_id']); ?>">
                <input type="hidden" name="return_to_order_id" value="<?php echo htmlspecialchars($orderInfo['order_id']); ?>">
            <?php elseif ($action === 'add' && $orderIdFromGet): // Wenn direkt auf Payments-Seite hinzugefügt wird und order_id in GET ?>
                <input type="hidden" name="order_id" value="<?php echo htmlspecialchars($orderIdFromGet); ?>">
                <input type="hidden" name="return_to_order_id" value="<?php echo htmlspecialchars($orderIdFromGet); ?>">
            <?php endif; ?>

            <div class="form-group">
                <label for="payment_date">Zahlungsdatum & Uhrzeit:</label>
                <input type="datetime-local" id="payment_date" name="payment_date" value="<?php echo (new DateTime($paymentToEdit['payment_date'] ?? 'now'))->format('Y-m-d\TH:i'); ?>" required>
            </div>
            <div class="form-group">
                <label for="amount">Betrag (€):</label>
                <input type="number" id="amount" name="amount" step="0.01" min="0" value="<?php echo htmlspecialchars($paymentToEdit['amount'] ?? ''); ?>" required>
            </div>
            <div class="form-group">
                <label for="payment_method">Zahlungsmethode:</label>
                <select id="payment_method" name="payment_method" required>
                    <option value="bank_transfer" <?php echo (isset($paymentToEdit['payment_method']) && $paymentToEdit['payment_method'] == 'bank_transfer' ? 'selected' : ''); ?>>Überweisung</option>
                    <option value="cash" <?php echo (isset($paymentToEdit['payment_method']) && $paymentToEdit['payment_method'] == 'cash' ? 'selected' : ''); ?>>Barzahlung</option>
                </select>
            </div>
            <div class="form-group">
                <label for="transaction_id">Transaktions ID (optional):</label>
                <input type="text" id="transaction_id" name="transaction_id" value="<?php echo htmlspecialchars($paymentToEdit['transaction_id'] ?? ''); ?>">
            </div>
            <div class="form-group">
                <label for="payment_status">Status:</label>
                <select id="payment_status" name="status" required>
                    <option value="pending" <?php echo (isset($paymentToEdit['status']) && $paymentToEdit['status'] == 'pending' ? 'selected' : ''); ?>>Ausstehend</option>
                    <option value="completed" <?php echo (isset($paymentToEdit['status']) && $paymentToEdit['status'] == 'completed' ? 'selected' : ''); ?>>Abgeschlossen</option>
                    <option value="refunded" <?php echo (isset($paymentToEdit['status']) && $paymentToEdit['status'] == 'refunded' ? 'selected' : ''); ?>>Rückerstattet</option>
                    <option value="failed" <?php echo (isset($paymentToEdit['status']) && $paymentToEdit['status'] == 'failed' ? 'selected' : ''); ?>>Fehlgeschlagen</option>
                </select>
            </div>
            <div class="form-group">
                <label for="notes">Notizen:</label>
                <textarea id="notes" name="notes"><?php echo htmlspecialchars($paymentToEdit['notes'] ?? ''); ?></textarea>
            </div>
            <button type="submit" name="<?php echo ($action === 'add' ? 'add_payment' : 'update_payment'); ?>"><?php echo ($action === 'add' ? 'Zahlung hinzufügen' : 'Zahlung aktualisieren'); ?></button>
        </form>
    </div>
    <?php
} else {
    $stmt = $pdo->query("SELECT p.*, o.order_id, u.first_name, u.last_name FROM payments p JOIN orders o ON p.order_id = o.order_id JOIN users u ON o.user_id = u.user_id ORDER BY p.payment_date DESC");
    $payments = $stmt->fetchAll();
    ?>
    <div class="action-buttons">
        <a href="?section=payments&action=add" class="add-btn">Neue Zahlung hinzufügen</a>
    </div>
    <table>
        <thead>
            <tr>
                <th>ID</th>
                <th>Bestellung ID</th>
                <th>Kunde</th>
                <th>Datum</th>
                <th>Betrag</th>
                <th>Methode</th>
                <th>Transaktions ID</th>
                <th>Status</th>
                <th>Aktionen</th>
            </tr>
        </thead>
        <tbody>
            <?php foreach ($payments as $payment): ?>
                <tr>
                    <td><?php echo htmlspecialchars($payment['payment_id']); ?></td>
                    <td><a href="?section=orders&action=edit&id=<?php echo htmlspecialchars($payment['order_id']); ?>"><?php echo htmlspecialchars($payment['order_id']); ?></a></td>
                    <td><?php echo htmlspecialchars($payment['first_name'] . ' ' . $payment['last_name']); ?></td>
                    <td><?php echo (new DateTime($payment['payment_date']))->format('d.m.Y H:i'); ?></td>
                    <td><?php echo formatEuroCurrency($payment['amount']); ?></td>
                    <td><?php echo htmlspecialchars(ucfirst(str_replace('_', ' ', $payment['payment_method']))); ?></td>
                    <td><?php echo htmlspecialchars($payment['transaction_id'] ?: 'N/A'); ?></td>
                    <td><?php echo htmlspecialchars(ucfirst($payment['status'])); ?></td>
                    <td class="action-buttons">
                        <a href="?section=payments&action=edit&id=<?php echo $payment['payment_id']; ?>" class="edit-btn">Bearbeiten</a>
                        <form method="POST" action="?section=payments&action=delete&id=<?php echo $payment['payment_id']; ?>" onsubmit="return confirm('Sicher? Diese Zahlung löschen?');" style="display:inline;">
                            <button type="submit" name="delete_payment" class="delete-btn">Löschen</button>
                        </form>
                    </td>
                </tr>
            <?php endforeach; ?>
        </tbody>
    </table>
    <?php
}

==================================================
DATEINAME: src/modules/admin/pickup_dates.php
--------------------------------------------------
<?php
// modules/admin/pickup_dates.php
// Wird von modules/admin/index.php geladen.
// $pdo, formatEuroCurrency, $currentSection, $id, $action, $actionStatus, $actionMessage sind bereits verfügbar.

// POST-Aktionen für Abholtermine verarbeiten (Hinzufügen, Bearbeiten, Löschen)
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    try {
        if ($action === 'add' && isset($_POST['add_pickup_date'])) {
            $stmt = $pdo->prepare("INSERT INTO pickup_dates (pickup_datetime, location, is_active, notes) VALUES (:pickup_datetime, :location, :is_active, :notes)");
            $stmt->execute([
                ':pickup_datetime' => $_POST['pickup_datetime'],
                ':location' => $_POST['location'],
                ':is_active' => isset($_POST['is_active']) ? 1 : 0,
                ':notes' => $_POST['notes']
            ]);
            header('Location: ?section=pickup_dates&status=success');
            exit();
        } elseif ($action === 'edit' && $id > 0 && isset($_POST['update_pickup_date'])) {
            $stmt = $pdo->prepare("UPDATE pickup_dates SET pickup_datetime = :pickup_datetime, location = :location, is_active = :is_active, notes = :notes, updated_at = CURRENT_TIMESTAMP WHERE pickup_date_id = :id");
            $stmt->execute([
                ':pickup_datetime' => $_POST['pickup_datetime'],
                ':location' => $_POST['location'],
                ':is_active' => isset($_POST['is_active']) ? 1 : 0,
                ':notes' => $_POST['notes'],
                ':id' => $id
            ]);
            header('Location: ?section=pickup_dates&status=success');
            exit();
        } elseif ($action === 'delete' && $id > 0 && isset($_POST['delete_pickup_date'])) {
             $stmt = $pdo->prepare("DELETE FROM pickup_dates WHERE pickup_date_id = :id");
             $stmt->execute([':id' => $id]);
             header('Location: ?section=pickup_dates&status=success');
             exit();
        }
    } catch (Exception $e) {
        error_log("Admin-Abholterminaktion Fehler: " . $e->getMessage());
        header('Location: ?section=pickup_dates&status=error&msg=' . urlencode($e->getMessage()));
        exit();
    }
}

// HTML-Ausgabe für Abholtermine
if ($action === 'add' || ($action === 'edit' && $id > 0)) {
    $dateToEdit = null;
    if ($action === 'edit') {
        $stmtEdit = $pdo->prepare("SELECT * FROM pickup_dates WHERE pickup_date_id = :id");
        $stmtEdit->execute([':id' => $id]);
        $dateToEdit = $stmtEdit->fetch();
        if (!$dateToEdit) {
            echo '<p class="alert error">Abholtermin nicht gefunden.</p>';
            return;
        }
    }
    ?>
    <div class="admin-form-container">
        <h3><?php echo ($action === 'add' ? 'Neuen Abholtermin hinzufügen' : 'Abholtermin #' . htmlspecialchars($id) . ' bearbeiten'); ?></h3>
        <form method="POST" action="?section=pickup_dates&action=<?php echo $action; ?><?php echo ($action === 'edit' ? '&id=' . $id : ''); ?>">
            <div class="form-group">
                <label for="pickup_datetime">Datum und Uhrzeit:</label>
                <input type="datetime-local" id="pickup_datetime" name="pickup_datetime" value="<?php echo (new DateTime($dateToEdit['pickup_datetime'] ?? 'now'))->format('Y-m-d\TH:i'); ?>" required>
            </div>
            <div class="form-group">
                <label for="location">Ort:</label>
                <input type="text" id="location" name="location" value="<?php echo htmlspecialchars($dateToEdit['location'] ?? 'Standard Abholort'); ?>" required>
            </div>
            <div class="form-group">
                <input type="checkbox" id="is_active" name="is_active" <?php echo (isset($dateToEdit['is_active']) && $dateToEdit['is_active'] ? 'checked' : ($action === 'add' ? 'checked' : '')); ?>>
                <label for="is_active" style="display: inline;">Aktiv</label>
            </div>
             <div class="form-group">
                <label for="notes">Notizen:</label>
                <textarea id="notes" name="notes"><?php echo htmlspecialchars($dateToEdit['notes'] ?? ''); ?></textarea>
            </div>
            <button type="submit" name="<?php echo ($action === 'add' ? 'add_pickup_date' : 'update_pickup_date'); ?>"><?php echo ($action === 'add' ? 'Abholtermin hinzufügen' : 'Abholtermin aktualisieren'); ?></button>
        </form>
    </div>
    <?php
} else {
    $stmt = $pdo->query("SELECT * FROM pickup_dates ORDER BY pickup_datetime DESC");
    $pickupDates = $stmt->fetchAll();
    ?>
    <div class="action-buttons">
        <a href="?section=pickup_dates&action=add" class="add-btn">Neuen Abholtermin hinzufügen</a>
    </div>
    <table>
        <thead>
            <tr>
                <th>ID</th>
                <th>Datum/Uhrzeit</th>
                <th>Ort</th>
                <th>Aktiv</th>
                <th>Notizen</th>
                <th>Aktionen</th>
            </tr>
        </thead>
        <tbody>
            <?php foreach ($pickupDates as $date): ?>
                <tr>
                    <td><?php echo htmlspecialchars($date['pickup_date_id']); ?></td>
                    <td><?php echo (new DateTime($date['pickup_datetime']))->format('d.m.Y H:i'); ?></td>
                    <td><?php echo htmlspecialchars($date['location']); ?></td>
                    <td><?php echo ($date['is_active'] ? 'Ja' : 'Nein'); ?></td>
                    <td><?php echo htmlspecialchars(substr($date['notes'], 0, 50)); ?><?php echo (strlen($date['notes']) > 50 ? '...' : ''); ?></td>
                    <td class="action-buttons">
                        <a href="?section=pickup_dates&action=edit&id=<?php echo $date['pickup_date_id']; ?>" class="edit-btn">Bearbeiten</a>
                        <form method="POST" action="?section=pickup_dates&action=delete&id=<?php echo $date['pickup_date_id']; ?>" onsubmit="return confirm('Sicher? Dies löscht den Abholtermin!');" style="display:inline;">
                            <button type="submit" name="delete_pickup_date" class="delete-btn">Löschen</button>
                        </form>
                    </td>
                </tr>
            <?php endforeach; ?>
        </tbody>
    </table>
    <?php
}

==================================================
DATEINAME: src/modules/admin/products.php
--------------------------------------------------
<?php
// modules/admin/products.php
// Wird von modules/admin/index.php geladen.
// $pdo, formatEuroCurrency, $currentSection, $id, $action, $actionStatus, $actionMessage sind bereits verfügbar.

// POST-Aktionen für Produkte verarbeiten (Hinzufügen, Bearbeiten, Löschen)
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    try {
        if ($action === 'add' && isset($_POST['add_product'])) {
            $stmt = $pdo->prepare("INSERT INTO products (name, description, price, stock_quantity, image_url, category_id, is_active) VALUES (:name, :description, :price, :stock_quantity, :image_url, :category_id, :is_active)");
            $stmt->execute([
                ':name' => $_POST['name'],
                ':description' => $_POST['description'],
                ':price' => $_POST['price'],
                ':stock_quantity' => $_POST['stock_quantity'],
                ':image_url' => $_POST['image_url'],
                ':category_id' => $_POST['category_id'],
                ':is_active' => isset($_POST['is_active']) ? 1 : 0
            ]);
            header('Location: ?section=products&status=success');
            exit();
        } elseif ($action === 'edit' && $id > 0 && isset($_POST['update_product'])) {
            $stmt = $pdo->prepare("UPDATE products SET name = :name, description = :description, price = :price, stock_quantity = :stock_quantity, image_url = :image_url, category_id = :category_id, is_active = :is_active, updated_at = CURRENT_TIMESTAMP WHERE product_id = :id");
            $stmt->execute([
                ':name' => $_POST['name'],
                ':description' => $_POST['description'],
                ':price' => $_POST['price'],
                ':stock_quantity' => $_POST['stock_quantity'],
                ':image_url' => $_POST['image_url'],
                ':category_id' => $_POST['category_id'],
                ':is_active' => isset($_POST['is_active']) ? 1 : 0,
                ':id' => $id
            ]);
            header('Location: ?section=products&status=success');
            exit();
        } elseif ($action === 'delete' && $id > 0 && isset($_POST['delete_product'])) {
             $stmt = $pdo->prepare("DELETE FROM products WHERE product_id = :id");
             $stmt->execute([':id' => $id]);
             header('Location: ?section=products&status=success');
             exit();
        }
    } catch (Exception $e) {
        error_log("Admin-Produktaktion Fehler: " . $e->getMessage());
        header('Location: ?section=products&status=error&msg=' . urlencode($e->getMessage()));
        exit();
    }
}

// HTML-Ausgabe für Produkte
if ($action === 'add' || ($action === 'edit' && $id > 0)) {
    $productToEdit = null;
    if ($action === 'edit') {
        $stmtEdit = $pdo->prepare("SELECT * FROM products WHERE product_id = :id");
        $stmtEdit->execute([':id' => $id]);
        $productToEdit = $stmtEdit->fetch();
        if (!$productToEdit) {
             echo '<p class="alert error">Produkt nicht gefunden.</p>';
             return;
        }
    }
    $categories = $pdo->query("SELECT * FROM categories ORDER BY name")->fetchAll();
    ?>
    <div class="admin-form-container">
        <h3><?php echo ($action === 'add' ? 'Neues Produkt hinzufügen' : 'Produkt #' . htmlspecialchars($id) . ' bearbeiten'); ?></h3>
        <form method="POST" action="?section=products&action=<?php echo $action; ?><?php echo ($action === 'edit' ? '&id=' . $id : ''); ?>">
            <div class="form-group">
                <label for="name">Name:</label>
                <input type="text" id="name" name="name" value="<?php echo htmlspecialchars($productToEdit['name'] ?? ''); ?>" required>
            </div>
            <div class="form-group">
                <label for="description">Beschreibung:</label>
                <textarea id="description" name="description"><?php echo htmlspecialchars($productToEdit['description'] ?? ''); ?></textarea>
            </div>
            <div class="form-group">
                <label for="price">Preis (€):</label>
                <input type="number" id="price" name="price" step="0.01" min="0" value="<?php echo htmlspecialchars($productToEdit['price'] ?? ''); ?>" required>
            </div>
            <div class="form-group">
                <label for="stock_quantity">Lagerbestand:</label>
                <input type="number" id="stock_quantity" name="stock_quantity" min="0" value="<?php echo htmlspecialchars($productToEdit['stock_quantity'] ?? ''); ?>" required>
            </div>
            <div class="form-group">
                <label for="image_url">Bild-URL:</label>
                <input type="text" id="image_url" name="image_url" value="<?php echo htmlspecialchars($productToEdit['image_url'] ?? ''); ?>">
            </div>
            <div class="form-group">
                <label for="category_id">Kategorie:</label>
                <select id="category_id" name="category_id" required>
                    <?php foreach ($categories as $category): ?>
                        <option value="<?php echo htmlspecialchars($category['category_id']); ?>" <?php echo (isset($productToEdit['category_id']) && $productToEdit['category_id'] == $category['category_id'] ? 'selected' : ''); ?>>
                            <?php echo htmlspecialchars($category['name']); ?>
                        </option>
                    <?php endforeach; ?>
                </select>
            </div>
            <div class="form-group">
                <input type="checkbox" id="is_active" name="is_active" <?php echo (isset($productToEdit['is_active']) && $productToEdit['is_active'] ? 'checked' : ($action === 'add' ? 'checked' : '')); ?>>
                <label for="is_active" style="display: inline;">Aktiv</label>
            </div>
            <button type="submit" name="<?php echo ($action === 'add' ? 'add_product' : 'update_product'); ?>"><?php echo ($action === 'add' ? 'Produkt hinzufügen' : 'Produkt aktualisieren'); ?></button>
        </form>
    </div>
    <?php
} else {
    $stmt = $pdo->query("SELECT p.*, c.name as category_name FROM products p JOIN categories c ON p.category_id = c.category_id ORDER BY p.name");
    $products = $stmt->fetchAll();
    ?>
    <div class="action-buttons">
        <a href="?section=products&action=add" class="add-btn">Neues Produkt hinzufügen</a>
    </div>
    <table>
        <thead>
            <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Beschreibung</th>
                <th>Preis</th>
                <th>Lager</th>
                <th>Kategorie</th>
                <th>Aktiv</th>
                <th>Aktionen</th>
            </tr>
        </thead>
        <tbody>
            <?php foreach ($products as $product): ?>
                <tr>
                    <td><?php echo htmlspecialchars($product['product_id']); ?></td>
                    <td><?php echo htmlspecialchars($product['name']); ?></td>
                    <td><?php echo htmlspecialchars(substr($product['description'], 0, 50)); ?><?php echo (strlen($product['description']) > 50 ? '...' : ''); ?></td>
                    <td><?php echo formatEuroCurrency($product['price']); ?></td>
                    <td><?php echo htmlspecialchars($product['stock_quantity']); ?></td>
                    <td><?php echo htmlspecialchars($product['category_name']); ?></td>
                    <td><?php echo ($product['is_active'] ? 'Ja' : 'Nein'); ?></td>
                    <td class="action-buttons">
                        <a href="?section=products&action=edit&id=<?php echo $product['product_id']; ?>" class="edit-btn">Bearbeiten</a>
                        <form method="POST" action="?section=products&action=delete&id=<?php echo $product['product_id']; ?>" onsubmit="return confirm('Sicher? Dies löscht auch alle Bestellartikel, die dieses Produkt verwenden!');" style="display:inline;">
                            <button type="submit" name="delete_product" class="delete-btn">Löschen</button>
                        </form>
                    </td>
                </tr>
            <?php endforeach; ?>
        </tbody>
    </table>
    <?php
}

==================================================
DATEINAME: src/partials/cart_content.php
--------------------------------------------------
<?php
// partials/cart_content.php
// Dieses Skript wird von index.php eingebunden, um den initialen Warenkorb anzuzeigen.
// Es geht davon aus, dass session_start() und ROOT_PATH bereits im aufrufenden Skript definiert wurden.

// Sicherstellen, dass der Warenkorb in der Session initialisiert ist
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
}

$cart = $_SESSION['cart'];
$totalAmount = 0;
?>

<div>
    <?php if (count($cart) > 0): ?>
        <ul id="cart-items">
            <?php foreach ($cart as $productId => $item):
                $itemTotal = $item['price'] * $item['quantity'];
                $totalAmount += $itemTotal;
            ?>
                <li class="cart-item">
                    <!-- GEÄNDERT: loading="lazy" und decoding="async" hinzugefügt -->
                    <img src="<?= htmlspecialchars($item['image_url']) ?>" alt="<?= htmlspecialchars($item['name']) ?>: <?= htmlspecialchars($item['description']) ?>" class="cart-item-img" loading="lazy" decoding="async">
                    <div class="cart-item-details">
                        <h4><?= htmlspecialchars($item['name']) ?></h4>
                        <p><?= number_format($item['price'], 2, ',', '.') ?> € x</p>
                    </div>
                    <div class="cart-item-actions">
                        <input type="number" min="1" value="<?= htmlspecialchars($item['quantity']) ?>" data-product-id="<?= htmlspecialchars($productId) ?>" class="quantity-input">
                        <button class="remove-item-btn" data-product-id="<?= htmlspecialchars($productId) ?>">X</button>
                    </div>
                </li>
            <?php endforeach; ?>
        </ul>
        <p id="cart-total">Gesamt: <?= number_format($totalAmount, 2, ',', '.') ?> €</p>
    <?php else: ?>
        <p>Ihr Warenkorb ist leer.</p>
        <p id="cart-total">Gesamt: 0,00 €</p>
    <?php endif; ?>
</div>

==================================================
DATEINAME: src/templates/footer.php
--------------------------------------------------
<?php
// templates/footer.php
// Dieser Footer wird durch index.php eingebunden
?>

</div> <!-- Schließt den #page-content-wrapper -->

<footer class="main-footer">
    <div class="footer-content-wrapper">
        <div class="footer-container">
            <div class="footer-section contact-info">
                <h3>Früchte aus Portugal</h3>
                <p>© <?php echo date("Y"); ?> Früchte aus Portugal. Alle Rechte vorbehalten.</p>
                <p>Rosental 1, 53332 Bornheim</p>
                <p>E-Mail: <a href="mailto:info@früch.de">info@früch.de</a></p>
            </div>
            <div class="footer-section navigation">
                <h3>Navigation</h3>
                <ul>
                    <li><a href="/">Home</a></li>
                    <li><a href="/produkte">Produkte</a></li>
                    <li><a href="/geschichte">Geschichte</a></li>
                    <li><a href="/kontakt">Kontakt</a></li>
                    <li><a href="/warenkorb">Warenkorb</a></li>
                </ul>
            </div>
            <div class="footer-section legal">
                <h3>Rechtliches</h3>
                <ul>
                    <li><a href="/impressum">Impressum</a></li>
                    <li><a href="/datenschutz">Datenschutz</a></li>
                    <li><a href="/agb">AGB</a></li>
                    <li><a href="/widerrufsrecht">Widerrufsrecht</a></li>
                </ul>
            </div>
            <div class="footer-section social">
                <h3>Folge uns</h3>
                <div class="social-icons">
                    <a href="https://www.efbornheim.de/" target="_blank" aria-label="Webseite"><img src="/-webseite.png" alt="Webseite" loading="lazy" decoding="async"></a>
                    <a href="https://chat.whatsapp.com/BaBd04yeoGvDkcGZcRNkTI?mode=ac_t" target="_blank" aria-label="WhatsApp"><img src="/-WhatsApp.png" alt="WhatsApp" loading="lazy" decoding="async"></a>
                    <a href="https://www.youtube.com/@efbornheim" target="_blank" aria-label="Youtube"><img src="/-youtube.png" alt="Youtube" loading="lazy" decoding="async"></a>
                    <a href="https://www.instagram.com/efbornheim/" target="_blank" aria-label="Twitter"><img src="/-instagram.png" alt="Instagram" loading="lazy" decoding="async"></a>
                </div>
            </div>
        </div>
        <div class="footer-bottom">
            Made with ❤️ in Germany
        </div>
    </div>
</footer>

<div id="checkoutModal" class="modal">
    <div class="modal-content">
        <span class="close-button">×</span>
        <h3>Bestellung abschliessen</h3>
        <div id="checkout-message" class="alert" style="display:none;"></div>
        <form id="checkoutForm">
            <div class="form-group">
                <label for="firstName">Vorname:</label>
                <input type="text" id="firstName" name="firstName" required>
            </div>
            <div class="form-group">
                <label for="lastName">Nachname:</label>
                <input type="text" id="lastName" name="lastName" required>
            </div>
            <div class="form-group">
                <label for="email">E-Mail:</label>
                <input type="email" id="email" name="email" required>
            </div>
            <div class="form-group">
                <label for="phone">Telefon (optional):</label>
                <input type="text" id="phone" name="phone">
            </div>

            <div class="form-group">
                <label>Zahlungsmethode:</label>
                <div class="payment-options-wrapper">
                    <label class="radio-option prefer-payment" for="paymentBankTransfer">
                        <input type="radio" id="paymentBankTransfer" name="paymentMethod" value="bank_transfer" required checked>
                        Überweisung
                    </label>
                    <label class="radio-option discourage-payment" for="paymentCash">
                        <input type="radio" id="paymentCash" name="paymentMethod" value="cash" required>
                        Barzahlung bei Abholung
                    </label>
                </div>
                <p class="payment-info-text">
                    <strong>Überweisung wird bevorzugt!</strong> Wir empfehlen die Überweisung, um einen reibungslosen und schnellen Bestellablauf zu gewährleisten und unsere ehrenamtliche Arbeit zu vereinfachen.
                </p>
            </div>

            <div class="form-group">
                <label for="pickupDate">Abholtermin:</label>
                <select id="pickupDate" name="pickupDate" required>
                    <option value="">Bitte wählen</option>
                    <?php
                    global $pdo;
                    if (!isset($pdo)) {
                        require_once ROOT_PATH . 'include/db.php';
                        $pdo = getDbConnection();
                    }
                    $pickup_dates_for_modal = [];
                    try {
                        $stmt_dates_modal = $pdo->query("SELECT * FROM pickup_dates WHERE is_active = TRUE AND pickup_datetime >= NOW() ORDER BY pickup_datetime ASC");
                        $pickup_dates_for_modal = $stmt_dates_modal->fetchAll();
                    } catch (PDOException $e) {
                        error_log("Datenbankfehler beim Laden der Abholtermine im Modal: " . $e->getMessage());
                    }
                    foreach ($pickup_dates_for_modal as $date): ?>
                        <option value="<?php echo htmlspecialchars($date['pickup_date_id']); ?>">
                            <?php echo (new DateTime($date['pickup_datetime']))->format('d.m.Y H:i') . ' Uhr'; ?> - <?php echo htmlspecialchars($date['location']); ?>
                        </option>
                    <?php endforeach; ?>
                    <?php if (empty($pickup_dates_for_modal)): ?>
                        <option value="" disabled>Keine Abholtermine verfügbar</option>
                    <?php endif; ?>
                </select>
            </div>

            <button type="submit" id="checkout-submit-button">Bestellung abschicken</button>
        </form>

        <div id="checkout-loading-overlay" class="loading-overlay" style="display: none;">
            <div class="spinner"></div>
            <p>Bestellung wird verarbeitet...</p>
        </div>

    </div>
</div>

<script>
    const formatEuroCurrencyJS = (amount) => {
        const floatAmount = parseFloat(amount);
        let formatted = floatAmount.toFixed(2).replace('.', ',');
        if (formatted.endsWith(',00')) {
            formatted = formatted.slice(0, -3);
        }
        return formatted + ' €';
    };

    document.addEventListener('DOMContentLoaded', () => {
        const cartSidebar = document.querySelector('.cart-sidebar');
        const cartItemsList = document.getElementById('cart-items');
        const cartTotalSpan = document.getElementById('cart-total');
        const checkoutButton = document.getElementById('open-checkout-modal');
        const mobileCartItemCount = document.getElementById('mobile-cart-item-count');
        const mobileCartTotalSummary = document.getElementById('mobile-cart-total-summary');
        const cartToggleButton = document.getElementById('cart-toggle-mobile');

        const checkoutModal = document.getElementById('checkoutModal');
        const closeButton = checkoutModal.querySelector('.close-button');
        const checkoutForm = checkoutModal.querySelector('#checkoutForm');
        const checkoutMessageDiv = checkoutModal.querySelector('#checkout-message');
        const pickupDateSelect = checkoutModal.querySelector('#pickupDate');
        const checkoutLoadingOverlay = checkoutModal.querySelector('#checkout-loading-overlay');


        // --- Event Listener für das Modal (global, da Modal jetzt im Footer ist) ---
        closeButton.addEventListener('click', () => {
            checkoutModal.style.display = 'none';
            document.body.style.overflow = '';
            checkoutLoadingOverlay.style.display = 'none';
        });

        window.addEventListener('click', (event) => {
            if (event.target === checkoutModal) {
                checkoutModal.style.display = 'none';
                document.body.style.overflow = '';
                checkoutLoadingOverlay.style.display = 'none';
            }
        });

        window.openCheckoutModal = () => {
            if (!checkoutButton.disabled) {
                if (window.innerWidth <= 768 && cartSidebar && cartSidebar.classList.contains('is-collapsed')) {
                    cartSidebar.classList.remove('is-collapsed');
                    cartSidebar.classList.add('is-expanded');
                }
                const currentCartItems = cartItemsList.querySelectorAll('.cart-item');
                if (currentCartItems.length > 0) {
                    checkoutModal.style.display = 'flex';
                    checkoutMessageDiv.style.display = 'none';
                    checkoutMessageDiv.className = 'alert';
                    document.body.style.overflow = 'hidden';
                    checkoutLoadingOverlay.style.display = 'none'; // Immer versteckt beim Öffnen
                } else {
                    checkoutModal.style.display = 'flex';
                    checkoutLoadingOverlay.style.display = 'none';
                    checkoutMessageDiv.classList.add('error');
                    checkoutMessageDiv.classList.remove('success');
                    checkoutMessageDiv.textContent = 'Ihr Warenkorb ist leer. Bitte fügen Sie Produkte hinzu.';
                    checkoutMessageDiv.style.display = 'block';
                    document.body.style.overflow = 'hidden';
                }
            }
        };

        if (checkoutButton) {
            checkoutButton.addEventListener('click', window.openCheckoutModal);
        }
        const mobileCheckoutButton = document.querySelector('.cart-header-mobile + .cart-body-content .checkout-button');
        if (mobileCheckoutButton) {
            mobileCheckoutButton.addEventListener('click', window.openCheckoutModal);
        }

        checkoutForm.addEventListener('submit', async (event) => {
            event.preventDefault();

            if (cartItemsList.querySelectorAll('.cart-item').length === 0) {
                 checkoutLoadingOverlay.style.display = 'none';
                 checkoutMessageDiv.style.display = 'block';
                 checkoutMessageDiv.classList.add('error');
                 checkoutMessageDiv.classList.remove('success');
                 checkoutMessageDiv.textContent = 'Ihr Warenkorb ist leer. Bitte fügen Sie Produkte hinzu.';
                 return;
            }

            checkoutLoadingOverlay.style.display = 'flex';
            checkoutMessageDiv.style.display = 'none';


            const formData = new FormData(checkoutForm);
            const cartTotalSpanInShop = document.getElementById('cart-total');
            formData.append('cart_total', parseFloat(cartTotalSpanInShop.textContent.replace(' €', '').replace(',', '.')));


            try {
                const response = await fetch('api/checkout_process.php', {
                    method: 'POST',
                    body: formData,
                    credentials: 'include' 
                });
                const data = await response.json();

                if (data.success) {
                    window.location.href = '/success';
                } else {
                    checkoutLoadingOverlay.style.display = 'none';
                    checkoutMessageDiv.style.display = 'block';
                    checkoutMessageDiv.classList.add('error');
                    checkoutMessageDiv.classList.remove('success');
                    checkoutMessageDiv.textContent = data.message;
                }
            } catch (error) {
                console.error('Fetch error:', error);
                checkoutLoadingOverlay.style.display = 'none';
                checkoutMessageDiv.style.display = 'block';
                checkoutMessageDiv.classList.add('error');
                checkoutMessageDiv.classList.remove('success');
                checkoutMessageDiv.textContent = 'Netzwerkfehler: Die Bestellung konnte nicht verarbeitet werden.';
            }
        });

        window.updateCartDisplay = (cart) => {
            cartItemsList.innerHTML = '';
            let total = 0;
            let itemCount = 0;

            if (Object.keys(cart).length === 0) {
                cartItemsList.innerHTML = '<li id="cart-empty-message">Ihr Warenkorb ist leer.</li>';
                checkoutButton.disabled = true;
                const checkoutSubmitButton = checkoutModal.querySelector('#checkout-submit-button');
                if (checkoutSubmitButton) checkoutSubmitButton.disabled = true;
            } else {
                checkoutButton.disabled = false;
                const checkoutSubmitButton = checkoutModal.querySelector('#checkout-submit-button');
                if (checkoutSubmitButton) checkoutSubmitButton.disabled = false;

                const existingEmptyMessage = document.getElementById('cart-empty-message');
                if (existingEmptyMessage) {
                    existingEmptyMessage.remove();
                }

                for (const productId in cart) {
                    const item = cart[productId];
                    total += parseFloat(item.price) * parseInt(item.quantity);
                    itemCount += parseInt(item.quantity);

                    const listItem = document.createElement('li');
                    listItem.classList.add('cart-item');
                    listItem.dataset.productId = productId;
                    listItem.innerHTML = `
                        <img src="${item.image_url || '/_placeholder.png'}" alt="Bild von ${item.name}: ${item.description}" class="cart-item-image" loading="lazy" decoding="async">
                        <div class="cart-item-info">
                            <h4>${item.name}</h4>
                            <p>${formatEuroCurrencyJS(parseFloat(item.price) * parseInt(item.quantity))}</p>
                        </div>
                        <div class="cart-item-controls">
                            <input type="number" class="cart-quantity-input" value="${item.quantity}" min="1" max="${item.stock}" data-product-id="${productId}">
                            <button class="remove-item-btn" data-product-id="${productId}">×</button>
                        </div>
                    `;
                    cartItemsList.appendChild(listItem);
                }
            }
            cartTotalSpan.textContent = formatEuroCurrencyJS(total);
            if (mobileCartItemCount) mobileCartItemCount.textContent = itemCount;
            if (mobileCartTotalSummary) mobileCartTotalSummary.textContent = formatEuroCurrencyJS(total);

            if (itemCount === 0) {
                checkoutButton.disabled = true;
            } else {
                checkoutButton.disabled = false;
            }
        };

        window.sendCartUpdateRequest = async (action, productId, quantity = 0) => {
            const formData = new FormData();
            formData.append('action', action);
            formData.append('product_id', productId);
            if (quantity > 0) {
                formData.append('quantity', quantity);
            }

            try {
                const response = await fetch('api/cart_process.php', {
                    method: 'POST',
                    body: formData,
                    credentials: 'include'
                });
                const data = await response.json();
                if (data.success) {
                    window.updateCartDisplay(data.cart);
                } else {
                    alert('Fehler: ' + (data.message || 'Etwas ist schief gelaufen.'));
                }
            } catch (error) {
                console.error('Fetch error:', error);
                alert('Netzwerkfehler beim Aktualisieren des Warenkorbs.');
            }
        };


        const pageContentWrapper = document.getElementById('page-content-wrapper');

        if (pageContentWrapper) {
            pageContentWrapper.addEventListener('click', (event) => {
                if (event.target.classList.contains('add-to-cart-btn')) {
                    const button = event.target;
                    const productId = button.dataset.productId;
                    const quantityInput = button.closest('.product-item').querySelector('.quantity-input');
                    const quantity = parseInt(quantityInput.value);
                    window.sendCartUpdateRequest('add', productId, quantity);
                }

                if (event.target.classList.contains('remove-item-btn')) {
                    const productId = event.target.dataset.productId;
                    window.sendCartUpdateRequest('remove', productId);
                }
            });

            pageContentWrapper.addEventListener('change', (event) => {
                if (event.target.classList.contains('quantity-input') && event.target.closest('.product-item')) {
                    let value = parseInt(event.target.value);
                    const max = parseInt(event.target.max);
                    const min = parseInt(event.target.min);

                    if (isNaN(value) || value < min) value = min;
                    if (value > max) value = max;
                    event.target.value = value;
                }

                if (event.target.classList.contains('cart-quantity-input')) {
                    const productId = event.target.dataset.productId;
                    let quantity = parseInt(event.target.value);
                    const max = parseInt(event.target.max);
                    const min = parseInt(event.target.min);

                    if (isNaN(quantity) || quantity < min) quantity = min;
                    if (quantity > max) quantity = max;
                    event.target.value = quantity;
                    window.sendCartUpdateRequest('update', productId, quantity);
                }
            });
        }


        const initialCart = <?php echo json_encode($_SESSION['cart']); ?>;
        window.updateCartDisplay(initialCart);

        const isMobile = () => window.innerWidth <= 768;

        // GEÄNDERT: Logik für das Auf- und Zuklappen des mobilen Warenkorbs
        const applyMobileCartState = () => {
            if (isMobile() && cartSidebar) {
                // Standardmäßig zusammengeklappt
                cartSidebar.classList.add('is-collapsed');
                cartSidebar.classList.remove('is-expanded');
            } else if (cartSidebar) {
                // Desktop-Ansicht: Klassen entfernen
                cartSidebar.classList.remove('is-collapsed', 'is-expanded');
            }
        };

        if (cartToggleButton) {
            cartToggleButton.addEventListener('click', () => {
                const isCollapsed = cartSidebar.classList.contains('is-collapsed');
                if (isCollapsed) {
                    cartSidebar.classList.remove('is-collapsed');
                    cartSidebar.classList.add('is-expanded');
                    document.body.style.overflow = 'hidden'; // Scrollen des Hintergrunds sperren
                } else {
                    cartSidebar.classList.remove('is-expanded');
                    cartSidebar.classList.add('is-collapsed');
                    document.body.style.overflow = ''; // Scrollen wieder erlauben
                }
            });
        }

        applyMobileCartState();
        window.addEventListener('resize', applyMobileCartState);
    });
</script>
</body>
</html>

==================================================
DATEINAME: src/templates/header.php
--------------------------------------------------
<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Früchte aus Portugal</title>

    <!-- CSS-Dateien und Icons -->
    <link rel="stylesheet" href="/.main.css">
    <link rel="icon" type="image/x-icon" href="/_favicon.ico">
    <link rel="icon" type="image/png" href="/-logo.png">
    <link rel="apple-touch-icon" href="/-apple-touch-icon.png">
</head>
<body>
    <?php
    require_once ROOT_PATH . 'include/disclaimer_modal.php';

    if ($show_disclaimer_modal):
    ?>
    <div id="disclaimerModal" class="disclaimer-modal">
        <div class="disclaimer-modal-content">
            <h2>Wichtiger Hinweis: Testumgebung!</h2>
            <p>Dies ist eine <strong>TESTUMGEBUNG</strong> für den Online-Shop "Früchte aus Portugal".</p>
            <p>Bitte beachten Sie Folgendes:</p>
            <ul>
                <li><strong>Kein bindender Kauf:</strong> Ihre Bestellung ist <strong>nicht bindend</strong>. Es werden keine realen Produkte versandt, und es wird kein Geld abgebucht.</li>
                <li><strong>Dummy-Zahlungen:</strong> Alle Zahlungsoptionen sind nur zu Testzwecken.</li>
                <li><strong>Testdaten:</strong> Alle angezeigten Preise und Produktinformationen sind fiktiv.</li>
                <li><strong>Feedback willkommen:</strong> Melden Sie Fehler und Anregungen gerne an <a href="mailto:info@früch.de">info@früch.de</a>.</li>
            </ul>
            <p>Mit der Bestätigung dieses Hinweises verstehen Sie, dass dies keine produktive Seite ist und keine echten Transaktionen durchgeführt werden.</p>
            
            <div class="disclaimer-button-wrapper">
                <button id="disclaimer-accept-button" class="disclaimer-accept-btn" disabled>
                    Verstanden (<span id="disclaimer-countdown">5</span>)
                </button>
            </div>
            <p class="disclaimer-bottom-note">Sie müssen den Hinweis akzeptieren, um die Webseite zu nutzen.</p>
        </div>
    </div>
    <?php endif; ?>

    <header>
        <div class="google-header-wrapper">
            <!-- Hamburger Icon für Mobile -->
            <button class="menu-toggle" aria-label="Menü öffnen" style="display: none;">
                <span class="hamburger"></span>
            </button>
            
            <!-- Logo, das auf Mobile im Header Wrapper sichtbar ist -->
            <a href="/" class="site-logo-link">
                <img src="/-full_logo.png" alt="Früchte aus Portugal Logo" class="site-logo-image" loading="eager">
            </a>

            <!-- Der eigentliche Navigationsbereich (der ausklappt) -->
            <nav class="google-search-like-nav">
                <ul class="nav-options">
                    <li><a href="/">Home</a></li>
                    <li><a href="/shop">Bestellen</a></li>
                    <li><a href="/geschichte">Geschichte</a></li>
                    <li><a href="/kontakt">Kontakt</a></li>
                </ul>
            </nav>

            <!-- Spenden Button, der sowohl für Desktop als auch Mobile dient und bei Mobile immer angezeigt wird -->
            <a href="/spenden" class="cart-button donate-button">Spenden</a>
        </div>
    </header>

    <div id="page-content-wrapper">

    <?php if ($show_disclaimer_modal ?? false): ?>
        <script src="/_disclaimer.js" defer></script>
    <?php endif; ?>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        const menuToggle = document.querySelector('.menu-toggle');
        const googleHeaderWrapper = document.querySelector('.google-header-wrapper');
        // NEU: Das korrekte Element für die Navigation auswählen
        const googleSearchLikeNav = document.querySelector('.google-search-like-nav');

        // Prüfen, ob alle benötigten Elemente existieren
        if (menuToggle && googleSearchLikeNav && googleHeaderWrapper) {
            menuToggle.addEventListener('click', () => {
                // Die Klasse 'is-open' auf das Navigations-Container-Element anwenden
                googleSearchLikeNav.classList.toggle('is-open');
                menuToggle.classList.toggle('is-active');
                googleHeaderWrapper.classList.toggle('nav-expanded');
                menuToggle.blur();
            });

            window.addEventListener('resize', () => {
                if (window.innerWidth > 768) { // Desktop-Breakpoint
                    // Klasse entfernen, wenn zur Desktop-Ansicht gewechselt wird
                    googleSearchLikeNav.classList.remove('is-open');
                    menuToggle.classList.remove('is-active');
                    googleHeaderWrapper.classList.remove('nav-expanded');
                    document.body.style.overflow = '';
                }
            });

            document.addEventListener('keydown', (event) => {
                // Menü mit ESC schließen
                if (event.key === 'Escape' && googleSearchLikeNav.classList.contains('is-open')) {
                    googleSearchLikeNav.classList.remove('is-open');
                    menuToggle.classList.remove('is-active');
                    googleHeaderWrapper.classList.remove('nav-expanded');
                    document.body.style.overflow = '';
                    menuToggle.focus();
                }
            });
        }
    });
</script>

==================================================
DATEINAME: src/index.php
--------------------------------------------------
<?php

/**
 * Kern-Datei der Anwendung
 * Diese Datei verarbeitet alle Anfragen dank .htaccess
 */

// --- PHASE 1: ABSOLUT NOTWENDIGE KONFIGURATION UND ASSET-HANDLING ---
// Konfigurationsdatei einbinden (Bleibt hier, da sie grundlegende Konstanten wie ROOT_PATH definiert)
require_once __DIR__ . '/config/config.php';

// Angeforderte URI extrahieren
$request_uri = trim(parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH), '/');
$segments = explode('/', $request_uri);
$page = !empty($segments[0]) ? $segments[0] : 'home';

// Asset Handler Funktion definieren (NICHT die ganze Loader-Datei laden!)
// Wir definieren die Funktion hier direkt oder laden nur die asset_handler.php
// ohne die anderen Loader, um Performance zu sparen.
// Die asset_handler.php muss so umgeschrieben werden, dass sie keine anderen Includes hat.
require_once ROOT_PATH . 'include/asset_handler.php';

// Prüfen, ob eine Asset-Anfrage vorliegt und diese behandeln
// Wenn handleAssetRequest() ein Asset findet und ausliefert, beendet es das Skript.
handleAssetRequest($page);

// --- PHASE 2: LADEN ALLER WEITEREN INCLUDES NUR FÜR NICHT-ASSET-ANFRAGEN ---
// Wenn das Skript hier ankommt, ist es KEIN Asset. Jetzt können wir alle anderen Loader laden.
require_once ROOT_PATH . 'include/loader.php'; // Lädt startup.php, db.php, email.php, helpers.php etc.
require_once ROOT_PATH . 'vendor/autoload.php'; // Composer Autoload für PHPMailer etc.

// Session starten (wichtig für den Warenkorb und Admin-Login)
if (session_status() == PHP_SESSION_NONE) {
    session_start();
}


// --- PHASE 3: ROUTING FÜR API, ADMIN UND REGULÄRE SEITEN ---

// API ROUTING
if ($page === 'api' && isset($segments[1])) {
    $api_file = ROOT_PATH . 'api/' . $segments[1];
    if (file_exists($api_file)) {
        require_once $api_file;
        exit();
    } else {
        header("HTTP/1.0 404 Not Found");
        require_once ROOT_PATH . 'modules/404.php';
        exit();
    }
}

// ADMIN ROUTING
if ($page === 'admin') {
    require_once ROOT_PATH . 'modules/admin/index.php'; // Pfad korrigiert, falls es nicht in einem Unterordner ist
    exit();
}


// --- PHASE 4: RENDERING DER REGULÄREN SEITEN ---
// Seitennamen bereinigen, um nur alphanumerische Zeichen, Bindestriche, Unterstriche zu erlauben
$page = preg_replace('/[^a-zA-Z0-9\-_.]/', '', $page);

// Pfad zum Modul
$module_path = ROOT_PATH . 'modules/' . $page . '.php';

// Header der Seite einbinden
require_once ROOT_PATH . 'templates/header.php';

// Modul laden oder 404-Fehler anzeigen
if (file_exists($module_path)) {
    if ($page === 'home') {
        require_once $module_path;
    } else {
        echo '<div class="site-content-wrapper">';
        require_once $module_path;
        echo '</div>';
    }
} else {
    header("HTTP/1.0 404 Not Found");
    echo '<div class="site-content-wrapper">';
    require_once ROOT_PATH . 'modules/404.php';
    echo '</div>';
}

// Footer der Seite einbinden
require_once ROOT_PATH . 'templates/footer.php';

?>

==================================================
DATEINAME: src/.htaccess
--------------------------------------------------
RewriteEngine On
RewriteBase "/"

# Wenn die Anfrage für eine existierende Datei ist, bearbeite sie direkt
RewriteCond %{REQUEST_FILENAME} -f
RewriteRule ^ - [L]

# Wenn die Anfrage für ein existierendes Verzeichnis ist, bearbeite es direkt
RewriteCond %{REQUEST_FILENAME} -d
RewriteRule ^ - [L]

# Alle anderen Anfragen werden an index.php weitergeleitet
RewriteRule ^(.*)$ index.php [QSA,L]


==================================================
DATEINAME: Dockerfile
--------------------------------------------------
# Verwenden Sie ein offizielles PHP-Image mit Apache
FROM php:8.2-apache

# Installieren Sie den MySQL PDO-Treiber für die Datenbankverbindung
RUN docker-php-ext-install pdo pdo_mysql

# Aktivieren Sie mod_rewrite für unsere Regeln
RUN a2enmod rewrite

# Kopieren Sie die individuelle Apache-Konfigurationsdatei
COPY my-custom.conf /etc/apache2/conf-available/my-custom.conf

# Aktivieren Sie Ihre individuelle Apache-Konfigurationsdatei
RUN a2enconf my-custom

# Kopieren Sie alle Webseiten-Dateien in den DocumentRoot
COPY ./src /var/www/html/

# Optional: Stellen Sie sicher, dass Ihre 404.html-Seite ebenfalls kopiert wird,
# falls sie nicht bereits im ./src-Verzeichnis enthalten ist, das oben kopiert wird.
# Wenn sie in ./src liegt, ist dieser Schritt überflüssig.
# COPY ./src/404.html /var/www/html/404.html 

# Stellen Sie sicher, dass das 'config'-Verzeichnis im DocumentRoot existiert.
# Dies ist wichtig, damit die sensitive_config.php dort platziert werden kann.
RUN mkdir -p /var/www/html/config

# Generieren Sie die sensitive_config.php während des Builds.
# Diese Datei enthält PHP-Code, der zur Laufzeit die Umgebungsvariablen ausliest.
# Die Werte werden in Coodlify in den "Environment Variables" definiert.
RUN cat << 'EOF' > /var/www/html/config/sensitive_config.php
<?php
// config/sensitive_config.php

// Diese Datei wurde automatisch während des Docker-Builds erstellt.
// Ihre Werte werden zur Laufzeit aus den Umgebungsvariablen gelesen,
// die in Coodlify gesetzt sind. Bearbeiten Sie diese Datei NICHT direkt im Container.

// --- DATENBANK-KONFIGURATION ---
define('DB_HOST', getenv('DB_HOST') ?: 'localhost'); // Standardwert für Entwicklung/Fallback
define('DB_USER', getenv('DB_USER') ?: 'root');
define('DB_PASS', getenv('DB_PASS') ?: ''); // Wichtige Umgebungsvariable
define('DB_NAME', getenv('DB_NAME') ?: 'mydatabase');
define('DB_CHARSET', getenv('DB_CHARSET') ?: 'utf8mb4');

// --- E-MAIL-KONFIGURATION (SMTP) ---
define('MAIL_HOST', getenv('MAIL_HOST') ?: 'smtp.example.com');
define('MAIL_USERNAME', getenv('MAIL_USERNAME') ?: 'noreply@example.com');
define('MAIL_PASSWORD', getenv('MAIL_PASSWORD') ?: ''); // Wichtige Umgebungsvariable
define('MAIL_PORT', (int)getenv('MAIL_PORT') ?: 587); // Typ-Casting zu int
define('MAIL_ENCRYPTION', getenv('MAIL_ENCRYPTION') ?: 'tls');

// Absender-Details für E-Mails
define('MAIL_FROM_EMAIL', getenv('MAIL_FROM_EMAIL') ?: 'noreply@example.com');
define('MAIL_FROM_NAME', getenv('MAIL_FROM_NAME') ?: 'Your Application');

// Für den Login auf der Admin Seite
define('ADMIN_PASSWORD', getenv('ADMIN_PASSWORD') ?: ''); // Wichtige Umgebungsvariable

?>
EOF

# Konfigurieren Sie Apache, um auf Port 801 zu lauschen
EXPOSE 801
RUN echo "Listen 801" >> /etc/apache2/ports.conf

# Passen Sie die Standard-VirtualHost-Konfiguration an, um auf Port 801 zu lauschen
RUN sed -i -e 's/VirtualHost \*:80/VirtualHost \*:801/' /etc/apache2/sites-available/000-default.conf
RUN sed -i -e 's/VirtualHost _default_:80/VirtualHost _default_:801/' /etc/apache2/sites-available/default-ssl.conf

# WICHTIG: Setzen Sie AllowOverride All für den DocumentRoot, damit mod_rewrite-Regeln funktionieren
RUN sed -i 's/AllowOverride None/AllowOverride All/' /etc/apache2/sites-available/000-default.conf

# Apache wird als Standard-CMD des Basis-Images gestartet (apache2-foreground)
CMD ["apache2-foreground"]

==================================================
DATEINAME: composer.json
--------------------------------------------------
{
        "name": "tigerkopf/portugal-fruits",
        "description": "Eine einfache PHP-Anwendung für Früchte aus Portugal.",
        "type": "project",
        "license": "MIT",
        "authors": [
            {
                "name": "TigerKopf",
                "email": "kopftiger678@gmail.com"
            }
        ],
        "minimum-stability": "dev",
        "prefer-stable": true,
        "require": {
            "php": ">=8.2",
            "beberlei/assert": "^3.3",
            "thecodingmachine/safe": "^3.3",
            "ext-pdo": "*",
            "ext-pdo_mysql": "*",
                "phpmailer/phpmailer": "^6.10"
        },
        "autoload": {
            "psr-4": {
                "App\\": "app/"
            }
        },
        "config": {
            "allow-plugins": {
                "php-http/discovery": true,
                "composer/package-versions-deprecated": true
            }
        }
    }


==================================================
DATEINAME: Datenbank.sql
--------------------------------------------------
/*M!999999\- enable the sandbox mode */ 
-- MariaDB dump 10.19-12.0.2-MariaDB, for Linux (x86_64)
--
-- Host: 147.189.175.36    Database: default
-- ------------------------------------------------------
-- Server version	11.8.3-MariaDB-ubu2404

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*M!100616 SET @OLD_NOTE_VERBOSITY=@@NOTE_VERBOSITY, NOTE_VERBOSITY=0 */;

--
-- Table structure for table `categories`
--

DROP TABLE IF EXISTS `categories`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8mb4 */;
CREATE TABLE `categories` (
  `category_id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(100) NOT NULL,
  `description` text DEFAULT NULL,
  `created_at` timestamp NULL DEFAULT current_timestamp(),
  `updated_at` timestamp NULL DEFAULT current_timestamp() ON UPDATE current_timestamp(),
  PRIMARY KEY (`category_id`),
  UNIQUE KEY `name` (`name`)
) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `email_logs`
--

DROP TABLE IF EXISTS `email_logs`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8mb4 */;
CREATE TABLE `email_logs` (
  `log_id` int(11) NOT NULL AUTO_INCREMENT,
  `order_id` int(11) DEFAULT NULL,
  `to_email` varchar(255) NOT NULL,
  `subject` varchar(255) DEFAULT NULL,
  `body_snippet` text DEFAULT NULL,
  `sent_at` timestamp NULL DEFAULT current_timestamp(),
  `status` enum('sent','failed') NOT NULL,
  `error_message` text DEFAULT NULL,
  PRIMARY KEY (`log_id`),
  KEY `order_id` (`order_id`),
  CONSTRAINT `email_logs_ibfk_1` FOREIGN KEY (`order_id`) REFERENCES `orders` (`order_id`) ON DELETE SET NULL
) ENGINE=InnoDB AUTO_INCREMENT=19 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `orders`
--

DROP TABLE IF EXISTS `orders`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8mb4 */;
CREATE TABLE `orders` (
  `order_id` int(11) NOT NULL AUTO_INCREMENT,
  `user_id` int(11) NOT NULL,
  `pickup_date_id` int(11) DEFAULT NULL,
  `order_date` timestamp NULL DEFAULT current_timestamp(),
  `total_amount` decimal(10,2) NOT NULL,
  `status` enum('pending','confirmed','completed','cancelled') DEFAULT 'pending',
  `payment_method` enum('bank_transfer','cash') NOT NULL,
  `created_at` timestamp NULL DEFAULT current_timestamp(),
  `updated_at` timestamp NULL DEFAULT current_timestamp() ON UPDATE current_timestamp(),
  PRIMARY KEY (`order_id`),
  KEY `user_id` (`user_id`),
  KEY `pickup_date_id` (`pickup_date_id`),
  CONSTRAINT `orders_ibfk_1` FOREIGN KEY (`user_id`) REFERENCES `users` (`user_id`) ON DELETE CASCADE,
  CONSTRAINT `orders_ibfk_2` FOREIGN KEY (`pickup_date_id`) REFERENCES `pickup_dates` (`pickup_date_id`) ON DELETE SET NULL
) ENGINE=InnoDB AUTO_INCREMENT=20 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `payments`
--

DROP TABLE IF EXISTS `payments`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8mb4 */;
CREATE TABLE `payments` (
  `payment_id` int(11) NOT NULL AUTO_INCREMENT,
  `order_id` int(11) NOT NULL,
  `payment_date` timestamp NULL DEFAULT current_timestamp(),
  `amount` decimal(10,2) NOT NULL,
  `payment_method` enum('bank_transfer','cash') NOT NULL,
  `transaction_id` varchar(255) DEFAULT NULL,
  `status` enum('pending','completed','refunded','failed') DEFAULT 'pending',
  `notes` text DEFAULT NULL,
  `created_at` timestamp NULL DEFAULT current_timestamp(),
  `updated_at` timestamp NULL DEFAULT current_timestamp() ON UPDATE current_timestamp(),
  PRIMARY KEY (`payment_id`),
  KEY `order_id` (`order_id`),
  CONSTRAINT `payments_ibfk_1` FOREIGN KEY (`order_id`) REFERENCES `orders` (`order_id`) ON DELETE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=21 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `pickup_dates`
--

DROP TABLE IF EXISTS `pickup_dates`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8mb4 */;
CREATE TABLE `pickup_dates` (
  `pickup_date_id` int(11) NOT NULL AUTO_INCREMENT,
  `pickup_datetime` datetime NOT NULL,
  `location` varchar(255) DEFAULT 'Standard Abholort',
  `is_active` tinyint(1) DEFAULT 1,
  `notes` text DEFAULT NULL,
  `created_at` timestamp NULL DEFAULT current_timestamp(),
  `updated_at` timestamp NULL DEFAULT current_timestamp() ON UPDATE current_timestamp(),
  PRIMARY KEY (`pickup_date_id`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `products`
--

DROP TABLE IF EXISTS `products`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8mb4 */;
CREATE TABLE `products` (
  `product_id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) NOT NULL,
  `description` text DEFAULT NULL,
  `price` decimal(10,2) NOT NULL,
  `stock_quantity` int(11) NOT NULL DEFAULT 0,
  `image_url` varchar(255) DEFAULT NULL,
  `category_id` int(11) DEFAULT NULL,
  `is_active` tinyint(1) DEFAULT 1,
  `created_at` timestamp NULL DEFAULT current_timestamp(),
  `updated_at` timestamp NULL DEFAULT current_timestamp() ON UPDATE current_timestamp(),
  PRIMARY KEY (`product_id`),
  KEY `category_id` (`category_id`),
  CONSTRAINT `products_ibfk_1` FOREIGN KEY (`category_id`) REFERENCES `categories` (`category_id`) ON DELETE SET NULL
) ENGINE=InnoDB AUTO_INCREMENT=19 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `users`
--

DROP TABLE IF EXISTS `users`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8mb4 */;
CREATE TABLE `users` (
  `user_id` int(11) NOT NULL AUTO_INCREMENT,
  `username` varchar(50) NOT NULL,
  `email` varchar(100) NOT NULL,
  `password_hash` varchar(255) NOT NULL,
  `first_name` varchar(50) DEFAULT NULL,
  `last_name` varchar(50) DEFAULT NULL,
  `address` varchar(255) DEFAULT NULL,
  `city` varchar(100) DEFAULT NULL,
  `zip_code` varchar(10) DEFAULT NULL,
  `country` varchar(100) DEFAULT NULL,
  `phone_number` varchar(20) DEFAULT NULL,
  `is_admin` tinyint(1) DEFAULT 0,
  `created_at` timestamp NULL DEFAULT current_timestamp(),
  `updated_at` timestamp NULL DEFAULT current_timestamp() ON UPDATE current_timestamp(),
  PRIMARY KEY (`user_id`),
  UNIQUE KEY `username` (`username`),
  UNIQUE KEY `email` (`email`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*M!100616 SET NOTE_VERBOSITY=@OLD_NOTE_VERBOSITY */;

-- Dump completed on 2025-09-09 18:00:59


